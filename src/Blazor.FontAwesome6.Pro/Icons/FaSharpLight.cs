using System;
using Rocket.Surgery.Blazor.FontAwesome6;
namespace Rocket.Surgery.Blazor.FontAwesome6.Pro;
public static partial class FaSharpLight
{
   private static Icon? _0f;
   public static Icon _0 => _0f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "0");
   private static Icon? _1f;
   public static Icon _1 => _1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "1");
   private static Icon? _2f;
   public static Icon _2 => _2f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "2");
   private static Icon? _3f;
   public static Icon _3 => _3f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "3");
   private static Icon? _4f;
   public static Icon _4 => _4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "4");
   private static Icon? _5f;
   public static Icon _5 => _5f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "5");
   private static Icon? _6f;
   public static Icon _6 => _6f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "6");
   private static Icon? _7f;
   public static Icon _7 => _7f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "7");
   private static Icon? _8f;
   public static Icon _8 => _8f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "8");
   private static Icon? _9f;
   public static Icon _9 => _9f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "9");
   private static Icon? _00f;
   public static Icon _00 => _00f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "00");
   private static Icon? _360Degreesf;
   public static Icon _360Degrees => _360Degreesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "360-degrees");
   private static Icon? Af;
   public static Icon A => Af ??= new Icon(IconFamily.Sharp, IconStyle.Light, "a");
   private static Icon? Abacusf;
   public static Icon Abacus => Abacusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "abacus");
   private static Icon? AccentGravef;
   public static Icon AccentGrave => AccentGravef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "accent-grave");
   private static Icon? Acornf;
   public static Icon Acorn => Acornf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "acorn");
   private static Icon? AddressBookf;
   public static Icon AddressBook => AddressBookf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "address-book");
   public static Icon ContactBook => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AddressBook;
   private static Icon? AddressCardf;
   public static Icon AddressCard => AddressCardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "address-card");
   public static Icon ContactCard => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AddressCard;
   public static Icon Vcard => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AddressCard;
   private static Icon? AirConditionerf;
   public static Icon AirConditioner => AirConditionerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "air-conditioner");
   private static Icon? Airplayf;
   public static Icon Airplay => Airplayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "airplay");
   private static Icon? AlarmClockf;
   public static Icon AlarmClock => AlarmClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "alarm-clock");
   private static Icon? AlarmExclamationf;
   public static Icon AlarmExclamation => AlarmExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "alarm-exclamation");
   private static Icon? AlarmPlusf;
   public static Icon AlarmPlus => AlarmPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "alarm-plus");
   private static Icon? AlarmSnoozef;
   public static Icon AlarmSnooze => AlarmSnoozef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "alarm-snooze");
   private static Icon? Albumf;
   public static Icon Album => Albumf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "album");
   private static Icon? AlbumCirclePlusf;
   public static Icon AlbumCirclePlus => AlbumCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "album-circle-plus");
   private static Icon? AlbumCircleUserf;
   public static Icon AlbumCircleUser => AlbumCircleUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "album-circle-user");
   private static Icon? AlbumCollectionf;
   public static Icon AlbumCollection => AlbumCollectionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "album-collection");
   private static Icon? AlbumCollectionCirclePlusf;
   public static Icon AlbumCollectionCirclePlus => AlbumCollectionCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "album-collection-circle-plus");
   private static Icon? AlbumCollectionCircleUserf;
   public static Icon AlbumCollectionCircleUser => AlbumCollectionCircleUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "album-collection-circle-user");
   private static Icon? Alicornf;
   public static Icon Alicorn => Alicornf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "alicorn");
   private static Icon? Alienf;
   public static Icon Alien => Alienf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "alien");
   private static Icon? Alien8bitf;
   public static Icon Alien8bit => Alien8bitf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "alien-8bit");
   public static Icon AlienMonster => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Alien8bit;
   private static Icon? AlignCenterf;
   public static Icon AlignCenter => AlignCenterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "align-center");
   private static Icon? AlignJustifyf;
   public static Icon AlignJustify => AlignJustifyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "align-justify");
   private static Icon? AlignLeftf;
   public static Icon AlignLeft => AlignLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "align-left");
   private static Icon? AlignRightf;
   public static Icon AlignRight => AlignRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "align-right");
   private static Icon? AlignSlashf;
   public static Icon AlignSlash => AlignSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "align-slash");
   private static Icon? Altf;
   public static Icon Alt => Altf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "alt");
   private static Icon? AmpGuitarf;
   public static Icon AmpGuitar => AmpGuitarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "amp-guitar");
   private static Icon? Ampersandf;
   public static Icon Ampersand => Ampersandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ampersand");
   private static Icon? Anchorf;
   public static Icon Anchor => Anchorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "anchor");
   private static Icon? AnchorCircleCheckf;
   public static Icon AnchorCircleCheck => AnchorCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "anchor-circle-check");
   private static Icon? AnchorCircleExclamationf;
   public static Icon AnchorCircleExclamation => AnchorCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "anchor-circle-exclamation");
   private static Icon? AnchorCircleXmarkf;
   public static Icon AnchorCircleXmark => AnchorCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "anchor-circle-xmark");
   private static Icon? AnchorLockf;
   public static Icon AnchorLock => AnchorLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "anchor-lock");
   private static Icon? Angelf;
   public static Icon Angel => Angelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angel");
   private static Icon? Anglef;
   public static Icon Angle => Anglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angle");
   private static Icon? Angle90f;
   public static Icon Angle90 => Angle90f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angle-90");
   private static Icon? AngleDownf;
   public static Icon AngleDown => AngleDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angle-down");
   private static Icon? AngleLeftf;
   public static Icon AngleLeft => AngleLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angle-left");
   private static Icon? AngleRightf;
   public static Icon AngleRight => AngleRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angle-right");
   private static Icon? AngleUpf;
   public static Icon AngleUp => AngleUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angle-up");
   private static Icon? AnglesDownf;
   public static Icon AnglesDown => AnglesDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angles-down");
   public static Icon AngleDoubleDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AnglesDown;
   private static Icon? AnglesLeftf;
   public static Icon AnglesLeft => AnglesLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angles-left");
   public static Icon AngleDoubleLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AnglesLeft;
   private static Icon? AnglesRightf;
   public static Icon AnglesRight => AnglesRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angles-right");
   public static Icon AngleDoubleRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AnglesRight;
   private static Icon? AnglesUpf;
   public static Icon AnglesUp => AnglesUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angles-up");
   public static Icon AngleDoubleUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AnglesUp;
   private static Icon? AnglesUpDownf;
   public static Icon AnglesUpDown => AnglesUpDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "angles-up-down");
   private static Icon? Ankhf;
   public static Icon Ankh => Ankhf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ankh");
   private static Icon? Apartmentf;
   public static Icon Apartment => Apartmentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "apartment");
   private static Icon? Aperturef;
   public static Icon Aperture => Aperturef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "aperture");
   private static Icon? Apostrophef;
   public static Icon Apostrophe => Apostrophef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "apostrophe");
   private static Icon? AppleCoref;
   public static Icon AppleCore => AppleCoref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "apple-core");
   private static Icon? AppleWholef;
   public static Icon AppleWhole => AppleWholef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "apple-whole");
   public static Icon AppleAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AppleWhole;
   private static Icon? Archwayf;
   public static Icon Archway => Archwayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "archway");
   private static Icon? ArrowDownf;
   public static Icon ArrowDown => ArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down");
   private static Icon? ArrowDown19f;
   public static Icon ArrowDown19 => ArrowDown19f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-1-9");
   public static Icon SortNumericAsc => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDown19;
   public static Icon SortNumericDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDown19;
   private static Icon? ArrowDown91f;
   public static Icon ArrowDown91 => ArrowDown91f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-9-1");
   public static Icon SortNumericDesc => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDown91;
   public static Icon SortNumericDownAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDown91;
   private static Icon? ArrowDownAZf;
   public static Icon ArrowDownAZ => ArrowDownAZf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-a-z");
   public static Icon SortAlphaAsc => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownAZ;
   public static Icon SortAlphaDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownAZ;
   private static Icon? ArrowDownArrowUpf;
   public static Icon ArrowDownArrowUp => ArrowDownArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-arrow-up");
   public static Icon SortAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownArrowUp;
   private static Icon? ArrowDownBigSmallf;
   public static Icon ArrowDownBigSmall => ArrowDownBigSmallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-big-small");
   public static Icon SortSizeDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownBigSmall;
   private static Icon? ArrowDownFromArcf;
   public static Icon ArrowDownFromArc => ArrowDownFromArcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-from-arc");
   private static Icon? ArrowDownFromDottedLinef;
   public static Icon ArrowDownFromDottedLine => ArrowDownFromDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-from-dotted-line");
   private static Icon? ArrowDownFromLinef;
   public static Icon ArrowDownFromLine => ArrowDownFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-from-line");
   public static Icon ArrowFromTop => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownFromLine;
   private static Icon? ArrowDownLeftf;
   public static Icon ArrowDownLeft => ArrowDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-left");
   private static Icon? ArrowDownLeftAndArrowUpRightToCenterf;
   public static Icon ArrowDownLeftAndArrowUpRightToCenter => ArrowDownLeftAndArrowUpRightToCenterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-left-and-arrow-up-right-to-center");
   private static Icon? ArrowDownLongf;
   public static Icon ArrowDownLong => ArrowDownLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-long");
   public static Icon LongArrowDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownLong;
   private static Icon? ArrowDownRightf;
   public static Icon ArrowDownRight => ArrowDownRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-right");
   private static Icon? ArrowDownShortWidef;
   public static Icon ArrowDownShortWide => ArrowDownShortWidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-short-wide");
   public static Icon SortAmountDesc => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownShortWide;
   public static Icon SortAmountDownAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownShortWide;
   private static Icon? ArrowDownSmallBigf;
   public static Icon ArrowDownSmallBig => ArrowDownSmallBigf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-small-big");
   public static Icon SortSizeDownAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownSmallBig;
   private static Icon? ArrowDownSquareTrianglef;
   public static Icon ArrowDownSquareTriangle => ArrowDownSquareTrianglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-square-triangle");
   public static Icon SortShapesDownAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownSquareTriangle;
   private static Icon? ArrowDownToArcf;
   public static Icon ArrowDownToArc => ArrowDownToArcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-to-arc");
   private static Icon? ArrowDownToBracketf;
   public static Icon ArrowDownToBracket => ArrowDownToBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-to-bracket");
   private static Icon? ArrowDownToDottedLinef;
   public static Icon ArrowDownToDottedLine => ArrowDownToDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-to-dotted-line");
   private static Icon? ArrowDownToLinef;
   public static Icon ArrowDownToLine => ArrowDownToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-to-line");
   public static Icon ArrowToBottom => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownToLine;
   private static Icon? ArrowDownToSquaref;
   public static Icon ArrowDownToSquare => ArrowDownToSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-to-square");
   private static Icon? ArrowDownTriangleSquaref;
   public static Icon ArrowDownTriangleSquare => ArrowDownTriangleSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-triangle-square");
   public static Icon SortShapesDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownTriangleSquare;
   private static Icon? ArrowDownUpAcrossLinef;
   public static Icon ArrowDownUpAcrossLine => ArrowDownUpAcrossLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-up-across-line");
   private static Icon? ArrowDownUpLockf;
   public static Icon ArrowDownUpLock => ArrowDownUpLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-up-lock");
   private static Icon? ArrowDownWideShortf;
   public static Icon ArrowDownWideShort => ArrowDownWideShortf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-wide-short");
   public static Icon SortAmountAsc => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownWideShort;
   public static Icon SortAmountDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownWideShort;
   private static Icon? ArrowDownZAf;
   public static Icon ArrowDownZA => ArrowDownZAf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-down-z-a");
   public static Icon SortAlphaDesc => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownZA;
   public static Icon SortAlphaDownAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowDownZA;
   private static Icon? ArrowLeftf;
   public static Icon ArrowLeft => ArrowLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-left");
   private static Icon? ArrowLeftFromArcf;
   public static Icon ArrowLeftFromArc => ArrowLeftFromArcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-left-from-arc");
   private static Icon? ArrowLeftFromLinef;
   public static Icon ArrowLeftFromLine => ArrowLeftFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-left-from-line");
   public static Icon ArrowFromRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowLeftFromLine;
   private static Icon? ArrowLeftLongf;
   public static Icon ArrowLeftLong => ArrowLeftLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-left-long");
   public static Icon LongArrowLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowLeftLong;
   private static Icon? ArrowLeftLongToLinef;
   public static Icon ArrowLeftLongToLine => ArrowLeftLongToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-left-long-to-line");
   private static Icon? ArrowLeftToArcf;
   public static Icon ArrowLeftToArc => ArrowLeftToArcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-left-to-arc");
   private static Icon? ArrowLeftToLinef;
   public static Icon ArrowLeftToLine => ArrowLeftToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-left-to-line");
   public static Icon ArrowToLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowLeftToLine;
   private static Icon? ArrowPointerf;
   public static Icon ArrowPointer => ArrowPointerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-pointer");
   public static Icon MousePointer => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowPointer;
   private static Icon? ArrowProgressf;
   public static Icon ArrowProgress => ArrowProgressf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-progress");
   private static Icon? ArrowRightf;
   public static Icon ArrowRight => ArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right");
   private static Icon? ArrowRightArrowLeftf;
   public static Icon ArrowRightArrowLeft => ArrowRightArrowLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-arrow-left");
   public static Icon Exchange => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRightArrowLeft;
   private static Icon? ArrowRightFromArcf;
   public static Icon ArrowRightFromArc => ArrowRightFromArcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-from-arc");
   private static Icon? ArrowRightFromBracketf;
   public static Icon ArrowRightFromBracket => ArrowRightFromBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-from-bracket");
   public static Icon SignOut => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRightFromBracket;
   private static Icon? ArrowRightFromLinef;
   public static Icon ArrowRightFromLine => ArrowRightFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-from-line");
   public static Icon ArrowFromLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRightFromLine;
   private static Icon? ArrowRightLongf;
   public static Icon ArrowRightLong => ArrowRightLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-long");
   public static Icon LongArrowRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRightLong;
   private static Icon? ArrowRightLongToLinef;
   public static Icon ArrowRightLongToLine => ArrowRightLongToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-long-to-line");
   private static Icon? ArrowRightToArcf;
   public static Icon ArrowRightToArc => ArrowRightToArcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-to-arc");
   private static Icon? ArrowRightToBracketf;
   public static Icon ArrowRightToBracket => ArrowRightToBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-to-bracket");
   public static Icon SignIn => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRightToBracket;
   private static Icon? ArrowRightToCityf;
   public static Icon ArrowRightToCity => ArrowRightToCityf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-to-city");
   private static Icon? ArrowRightToLinef;
   public static Icon ArrowRightToLine => ArrowRightToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-right-to-line");
   public static Icon ArrowToRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRightToLine;
   private static Icon? ArrowRotateLeftf;
   public static Icon ArrowRotateLeft => ArrowRotateLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-rotate-left");
   public static Icon ArrowLeftRotate => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRotateLeft;
   public static Icon ArrowRotateBack => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRotateLeft;
   public static Icon ArrowRotateBackward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRotateLeft;
   public static Icon Undo => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRotateLeft;
   private static Icon? ArrowRotateRightf;
   public static Icon ArrowRotateRight => ArrowRotateRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-rotate-right");
   public static Icon ArrowRightRotate => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRotateRight;
   public static Icon ArrowRotateForward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRotateRight;
   public static Icon Redo => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowRotateRight;
   private static Icon? ArrowTrendDownf;
   public static Icon ArrowTrendDown => ArrowTrendDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-trend-down");
   private static Icon? ArrowTrendUpf;
   public static Icon ArrowTrendUp => ArrowTrendUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-trend-up");
   private static Icon? ArrowTurnDownf;
   public static Icon ArrowTurnDown => ArrowTurnDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-turn-down");
   public static Icon LevelDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowTurnDown;
   private static Icon? ArrowTurnDownLeftf;
   public static Icon ArrowTurnDownLeft => ArrowTurnDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-turn-down-left");
   private static Icon? ArrowTurnDownRightf;
   public static Icon ArrowTurnDownRight => ArrowTurnDownRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-turn-down-right");
   private static Icon? ArrowTurnLeftf;
   public static Icon ArrowTurnLeft => ArrowTurnLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-turn-left");
   private static Icon? ArrowTurnLeftDownf;
   public static Icon ArrowTurnLeftDown => ArrowTurnLeftDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-turn-left-down");
   private static Icon? ArrowTurnLeftUpf;
   public static Icon ArrowTurnLeftUp => ArrowTurnLeftUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-turn-left-up");
   private static Icon? ArrowTurnRightf;
   public static Icon ArrowTurnRight => ArrowTurnRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-turn-right");
   private static Icon? ArrowTurnUpf;
   public static Icon ArrowTurnUp => ArrowTurnUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-turn-up");
   public static Icon LevelUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowTurnUp;
   private static Icon? ArrowUpf;
   public static Icon ArrowUp => ArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up");
   private static Icon? ArrowUp19f;
   public static Icon ArrowUp19 => ArrowUp19f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-1-9");
   public static Icon SortNumericUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUp19;
   private static Icon? ArrowUp91f;
   public static Icon ArrowUp91 => ArrowUp91f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-9-1");
   public static Icon SortNumericUpAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUp91;
   private static Icon? ArrowUpAZf;
   public static Icon ArrowUpAZ => ArrowUpAZf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-a-z");
   public static Icon SortAlphaUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpAZ;
   private static Icon? ArrowUpArrowDownf;
   public static Icon ArrowUpArrowDown => ArrowUpArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-arrow-down");
   public static Icon SortUpDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpArrowDown;
   private static Icon? ArrowUpBigSmallf;
   public static Icon ArrowUpBigSmall => ArrowUpBigSmallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-big-small");
   public static Icon SortSizeUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpBigSmall;
   private static Icon? ArrowUpFromArcf;
   public static Icon ArrowUpFromArc => ArrowUpFromArcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-from-arc");
   private static Icon? ArrowUpFromBracketf;
   public static Icon ArrowUpFromBracket => ArrowUpFromBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-from-bracket");
   private static Icon? ArrowUpFromDottedLinef;
   public static Icon ArrowUpFromDottedLine => ArrowUpFromDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-from-dotted-line");
   private static Icon? ArrowUpFromGroundWaterf;
   public static Icon ArrowUpFromGroundWater => ArrowUpFromGroundWaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-from-ground-water");
   private static Icon? ArrowUpFromLinef;
   public static Icon ArrowUpFromLine => ArrowUpFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-from-line");
   public static Icon ArrowFromBottom => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpFromLine;
   private static Icon? ArrowUpFromSquaref;
   public static Icon ArrowUpFromSquare => ArrowUpFromSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-from-square");
   private static Icon? ArrowUpFromWaterPumpf;
   public static Icon ArrowUpFromWaterPump => ArrowUpFromWaterPumpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-from-water-pump");
   private static Icon? ArrowUpLeftf;
   public static Icon ArrowUpLeft => ArrowUpLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-left");
   private static Icon? ArrowUpLeftFromCirclef;
   public static Icon ArrowUpLeftFromCircle => ArrowUpLeftFromCirclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-left-from-circle");
   private static Icon? ArrowUpLongf;
   public static Icon ArrowUpLong => ArrowUpLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-long");
   public static Icon LongArrowUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpLong;
   private static Icon? ArrowUpRightf;
   public static Icon ArrowUpRight => ArrowUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-right");
   private static Icon? ArrowUpRightAndArrowDownLeftFromCenterf;
   public static Icon ArrowUpRightAndArrowDownLeftFromCenter => ArrowUpRightAndArrowDownLeftFromCenterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-right-and-arrow-down-left-from-center");
   private static Icon? ArrowUpRightDotsf;
   public static Icon ArrowUpRightDots => ArrowUpRightDotsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-right-dots");
   private static Icon? ArrowUpRightFromSquaref;
   public static Icon ArrowUpRightFromSquare => ArrowUpRightFromSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-right-from-square");
   public static Icon ExternalLink => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpRightFromSquare;
   private static Icon? ArrowUpShortWidef;
   public static Icon ArrowUpShortWide => ArrowUpShortWidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-short-wide");
   public static Icon SortAmountUpAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpShortWide;
   private static Icon? ArrowUpSmallBigf;
   public static Icon ArrowUpSmallBig => ArrowUpSmallBigf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-small-big");
   public static Icon SortSizeUpAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpSmallBig;
   private static Icon? ArrowUpSquareTrianglef;
   public static Icon ArrowUpSquareTriangle => ArrowUpSquareTrianglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-square-triangle");
   public static Icon SortShapesUpAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpSquareTriangle;
   private static Icon? ArrowUpToArcf;
   public static Icon ArrowUpToArc => ArrowUpToArcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-to-arc");
   private static Icon? ArrowUpToDottedLinef;
   public static Icon ArrowUpToDottedLine => ArrowUpToDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-to-dotted-line");
   private static Icon? ArrowUpToLinef;
   public static Icon ArrowUpToLine => ArrowUpToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-to-line");
   public static Icon ArrowToTop => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpToLine;
   private static Icon? ArrowUpTriangleSquaref;
   public static Icon ArrowUpTriangleSquare => ArrowUpTriangleSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-triangle-square");
   public static Icon SortShapesUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpTriangleSquare;
   private static Icon? ArrowUpWideShortf;
   public static Icon ArrowUpWideShort => ArrowUpWideShortf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-wide-short");
   public static Icon SortAmountUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpWideShort;
   private static Icon? ArrowUpZAf;
   public static Icon ArrowUpZA => ArrowUpZAf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrow-up-z-a");
   public static Icon SortAlphaUpAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowUpZA;
   private static Icon? ArrowsCrossf;
   public static Icon ArrowsCross => ArrowsCrossf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-cross");
   private static Icon? ArrowsDownToLinef;
   public static Icon ArrowsDownToLine => ArrowsDownToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-down-to-line");
   private static Icon? ArrowsDownToPeoplef;
   public static Icon ArrowsDownToPeople => ArrowsDownToPeoplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-down-to-people");
   private static Icon? ArrowsFromDottedLinef;
   public static Icon ArrowsFromDottedLine => ArrowsFromDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-from-dotted-line");
   private static Icon? ArrowsFromLinef;
   public static Icon ArrowsFromLine => ArrowsFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-from-line");
   private static Icon? ArrowsLeftRightf;
   public static Icon ArrowsLeftRight => ArrowsLeftRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-left-right");
   public static Icon ArrowsH => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsLeftRight;
   private static Icon? ArrowsLeftRightToLinef;
   public static Icon ArrowsLeftRightToLine => ArrowsLeftRightToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-left-right-to-line");
   private static Icon? ArrowsMaximizef;
   public static Icon ArrowsMaximize => ArrowsMaximizef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-maximize");
   public static Icon ExpandArrows => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsMaximize;
   private static Icon? ArrowsMinimizef;
   public static Icon ArrowsMinimize => ArrowsMinimizef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-minimize");
   public static Icon CompressArrows => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsMinimize;
   private static Icon? ArrowsRepeatf;
   public static Icon ArrowsRepeat => ArrowsRepeatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-repeat");
   public static Icon RepeatAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsRepeat;
   private static Icon? ArrowsRepeat1f;
   public static Icon ArrowsRepeat1 => ArrowsRepeat1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-repeat-1");
   public static Icon Repeat1Alt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsRepeat1;
   private static Icon? ArrowsRetweetf;
   public static Icon ArrowsRetweet => ArrowsRetweetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-retweet");
   public static Icon RetweetAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsRetweet;
   private static Icon? ArrowsRotatef;
   public static Icon ArrowsRotate => ArrowsRotatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-rotate");
   public static Icon Refresh => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsRotate;
   public static Icon Sync => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsRotate;
   private static Icon? ArrowsRotateReversef;
   public static Icon ArrowsRotateReverse => ArrowsRotateReversef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-rotate-reverse");
   private static Icon? ArrowsSpinf;
   public static Icon ArrowsSpin => ArrowsSpinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-spin");
   private static Icon? ArrowsSplitUpAndLeftf;
   public static Icon ArrowsSplitUpAndLeft => ArrowsSplitUpAndLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-split-up-and-left");
   private static Icon? ArrowsToCirclef;
   public static Icon ArrowsToCircle => ArrowsToCirclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-to-circle");
   private static Icon? ArrowsToDotf;
   public static Icon ArrowsToDot => ArrowsToDotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-to-dot");
   private static Icon? ArrowsToDottedLinef;
   public static Icon ArrowsToDottedLine => ArrowsToDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-to-dotted-line");
   private static Icon? ArrowsToEyef;
   public static Icon ArrowsToEye => ArrowsToEyef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-to-eye");
   private static Icon? ArrowsToLinef;
   public static Icon ArrowsToLine => ArrowsToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-to-line");
   private static Icon? ArrowsTurnRightf;
   public static Icon ArrowsTurnRight => ArrowsTurnRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-turn-right");
   private static Icon? ArrowsTurnToDotsf;
   public static Icon ArrowsTurnToDots => ArrowsTurnToDotsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-turn-to-dots");
   private static Icon? ArrowsUpDownf;
   public static Icon ArrowsUpDown => ArrowsUpDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-up-down");
   public static Icon ArrowsV => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsUpDown;
   private static Icon? ArrowsUpDownLeftRightf;
   public static Icon ArrowsUpDownLeftRight => ArrowsUpDownLeftRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-up-down-left-right");
   public static Icon Arrows => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ArrowsUpDownLeftRight;
   private static Icon? ArrowsUpToLinef;
   public static Icon ArrowsUpToLine => ArrowsUpToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "arrows-up-to-line");
   private static Icon? Asteriskf;
   public static Icon Asterisk => Asteriskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "asterisk");
   private static Icon? Atf;
   public static Icon At => Atf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "at");
   private static Icon? Atomf;
   public static Icon Atom => Atomf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "atom");
   private static Icon? AtomSimplef;
   public static Icon AtomSimple => AtomSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "atom-simple");
   public static Icon AtomAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.AtomSimple;
   private static Icon? AudioDescriptionf;
   public static Icon AudioDescription => AudioDescriptionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "audio-description");
   private static Icon? AudioDescriptionSlashf;
   public static Icon AudioDescriptionSlash => AudioDescriptionSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "audio-description-slash");
   private static Icon? AustralSignf;
   public static Icon AustralSign => AustralSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "austral-sign");
   private static Icon? Avocadof;
   public static Icon Avocado => Avocadof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "avocado");
   private static Icon? Awardf;
   public static Icon Award => Awardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "award");
   private static Icon? AwardSimplef;
   public static Icon AwardSimple => AwardSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "award-simple");
   private static Icon? Axef;
   public static Icon Axe => Axef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "axe");
   private static Icon? AxeBattlef;
   public static Icon AxeBattle => AxeBattlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "axe-battle");
   private static Icon? Bf;
   public static Icon B => Bf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "b");
   private static Icon? Babyf;
   public static Icon Baby => Babyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "baby");
   private static Icon? BabyCarriagef;
   public static Icon BabyCarriage => BabyCarriagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "baby-carriage");
   public static Icon CarriageBaby => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BabyCarriage;
   private static Icon? Backpackf;
   public static Icon Backpack => Backpackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "backpack");
   private static Icon? Backwardf;
   public static Icon Backward => Backwardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "backward");
   private static Icon? BackwardFastf;
   public static Icon BackwardFast => BackwardFastf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "backward-fast");
   public static Icon FastBackward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BackwardFast;
   private static Icon? BackwardStepf;
   public static Icon BackwardStep => BackwardStepf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "backward-step");
   public static Icon StepBackward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BackwardStep;
   private static Icon? Baconf;
   public static Icon Bacon => Baconf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bacon");
   private static Icon? Bacteriaf;
   public static Icon Bacteria => Bacteriaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bacteria");
   private static Icon? Bacteriumf;
   public static Icon Bacterium => Bacteriumf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bacterium");
   private static Icon? Badgef;
   public static Icon Badge => Badgef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "badge");
   private static Icon? BadgeCheckf;
   public static Icon BadgeCheck => BadgeCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "badge-check");
   private static Icon? BadgeDollarf;
   public static Icon BadgeDollar => BadgeDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "badge-dollar");
   private static Icon? BadgePercentf;
   public static Icon BadgePercent => BadgePercentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "badge-percent");
   private static Icon? BadgeSherifff;
   public static Icon BadgeSheriff => BadgeSherifff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "badge-sheriff");
   private static Icon? BadgerHoneyf;
   public static Icon BadgerHoney => BadgerHoneyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "badger-honey");
   private static Icon? Badmintonf;
   public static Icon Badminton => Badmintonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "badminton");
   private static Icon? BagSeedlingf;
   public static Icon BagSeedling => BagSeedlingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bag-seedling");
   private static Icon? BagShoppingf;
   public static Icon BagShopping => BagShoppingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bag-shopping");
   public static Icon ShoppingBag => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BagShopping;
   private static Icon? BagShoppingMinusf;
   public static Icon BagShoppingMinus => BagShoppingMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bag-shopping-minus");
   private static Icon? BagShoppingPlusf;
   public static Icon BagShoppingPlus => BagShoppingPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bag-shopping-plus");
   private static Icon? Bagelf;
   public static Icon Bagel => Bagelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bagel");
   private static Icon? BagsShoppingf;
   public static Icon BagsShopping => BagsShoppingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bags-shopping");
   private static Icon? Baguettef;
   public static Icon Baguette => Baguettef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "baguette");
   private static Icon? Bahaif;
   public static Icon Bahai => Bahaif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bahai");
   public static Icon Haykal => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Bahai;
   private static Icon? BahtSignf;
   public static Icon BahtSign => BahtSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "baht-sign");
   private static Icon? BallPilef;
   public static Icon BallPile => BallPilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ball-pile");
   private static Icon? Balloonf;
   public static Icon Balloon => Balloonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "balloon");
   private static Icon? Balloonsf;
   public static Icon Balloons => Balloonsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "balloons");
   private static Icon? Ballotf;
   public static Icon Ballot => Ballotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ballot");
   private static Icon? BallotCheckf;
   public static Icon BallotCheck => BallotCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ballot-check");
   private static Icon? Banf;
   public static Icon Ban => Banf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ban");
   public static Icon Cancel => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Ban;
   private static Icon? BanBugf;
   public static Icon BanBug => BanBugf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ban-bug");
   public static Icon Debug => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BanBug;
   private static Icon? BanParkingf;
   public static Icon BanParking => BanParkingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ban-parking");
   public static Icon ParkingCircleSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BanParking;
   private static Icon? BanSmokingf;
   public static Icon BanSmoking => BanSmokingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ban-smoking");
   public static Icon SmokingBan => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BanSmoking;
   private static Icon? Bananaf;
   public static Icon Banana => Bananaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "banana");
   private static Icon? Bandagef;
   public static Icon Bandage => Bandagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bandage");
   public static Icon BandAid => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Bandage;
   private static Icon? BangladeshiTakaSignf;
   public static Icon BangladeshiTakaSign => BangladeshiTakaSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bangladeshi-taka-sign");
   private static Icon? Banjof;
   public static Icon Banjo => Banjof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "banjo");
   private static Icon? Barcodef;
   public static Icon Barcode => Barcodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "barcode");
   private static Icon? BarcodeReadf;
   public static Icon BarcodeRead => BarcodeReadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "barcode-read");
   private static Icon? BarcodeScanf;
   public static Icon BarcodeScan => BarcodeScanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "barcode-scan");
   private static Icon? Barsf;
   public static Icon Bars => Barsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bars");
   public static Icon Navicon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Bars;
   private static Icon? BarsFilterf;
   public static Icon BarsFilter => BarsFilterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bars-filter");
   private static Icon? BarsProgressf;
   public static Icon BarsProgress => BarsProgressf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bars-progress");
   public static Icon TasksAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BarsProgress;
   private static Icon? BarsSortf;
   public static Icon BarsSort => BarsSortf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bars-sort");
   private static Icon? BarsStaggeredf;
   public static Icon BarsStaggered => BarsStaggeredf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bars-staggered");
   public static Icon Reorder => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BarsStaggered;
   public static Icon Stream => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BarsStaggered;
   private static Icon? Baseballf;
   public static Icon Baseball => Baseballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "baseball");
   public static Icon BaseballBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Baseball;
   private static Icon? BaseballBatBallf;
   public static Icon BaseballBatBall => BaseballBatBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "baseball-bat-ball");
   private static Icon? BasketShoppingf;
   public static Icon BasketShopping => BasketShoppingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "basket-shopping");
   public static Icon ShoppingBasket => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BasketShopping;
   private static Icon? BasketShoppingMinusf;
   public static Icon BasketShoppingMinus => BasketShoppingMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "basket-shopping-minus");
   private static Icon? BasketShoppingPlusf;
   public static Icon BasketShoppingPlus => BasketShoppingPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "basket-shopping-plus");
   private static Icon? BasketShoppingSimplef;
   public static Icon BasketShoppingSimple => BasketShoppingSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "basket-shopping-simple");
   public static Icon ShoppingBasketAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BasketShoppingSimple;
   private static Icon? Basketballf;
   public static Icon Basketball => Basketballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "basketball");
   public static Icon BasketballBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Basketball;
   private static Icon? BasketballHoopf;
   public static Icon BasketballHoop => BasketballHoopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "basketball-hoop");
   private static Icon? Batf;
   public static Icon Bat => Batf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bat");
   private static Icon? Bathf;
   public static Icon Bath => Bathf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bath");
   public static Icon Bathtub => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Bath;
   private static Icon? BatteryBoltf;
   public static Icon BatteryBolt => BatteryBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-bolt");
   private static Icon? BatteryEmptyf;
   public static Icon BatteryEmpty => BatteryEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-empty");
   public static Icon Battery0 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BatteryEmpty;
   private static Icon? BatteryExclamationf;
   public static Icon BatteryExclamation => BatteryExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-exclamation");
   private static Icon? BatteryFullf;
   public static Icon BatteryFull => BatteryFullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-full");
   public static Icon Battery => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BatteryFull;
   public static Icon Battery5 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BatteryFull;
   private static Icon? BatteryHalff;
   public static Icon BatteryHalf => BatteryHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-half");
   public static Icon Battery3 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BatteryHalf;
   private static Icon? BatteryLowf;
   public static Icon BatteryLow => BatteryLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-low");
   public static Icon Battery1 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BatteryLow;
   private static Icon? BatteryQuarterf;
   public static Icon BatteryQuarter => BatteryQuarterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-quarter");
   public static Icon Battery2 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BatteryQuarter;
   private static Icon? BatterySlashf;
   public static Icon BatterySlash => BatterySlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-slash");
   private static Icon? BatteryThreeQuartersf;
   public static Icon BatteryThreeQuarters => BatteryThreeQuartersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "battery-three-quarters");
   public static Icon Battery4 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BatteryThreeQuarters;
   private static Icon? Bedf;
   public static Icon Bed => Bedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bed");
   private static Icon? BedBunkf;
   public static Icon BedBunk => BedBunkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bed-bunk");
   private static Icon? BedEmptyf;
   public static Icon BedEmpty => BedEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bed-empty");
   private static Icon? BedFrontf;
   public static Icon BedFront => BedFrontf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bed-front");
   public static Icon BedAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BedFront;
   private static Icon? BedPulsef;
   public static Icon BedPulse => BedPulsef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bed-pulse");
   public static Icon Procedures => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BedPulse;
   private static Icon? Beef;
   public static Icon Bee => Beef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bee");
   private static Icon? BeerMugf;
   public static Icon BeerMug => BeerMugf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "beer-mug");
   public static Icon BeerFoam => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BeerMug;
   private static Icon? BeerMugEmptyf;
   public static Icon BeerMugEmpty => BeerMugEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "beer-mug-empty");
   public static Icon Beer => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BeerMugEmpty;
   private static Icon? Bellf;
   public static Icon Bell => Bellf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell");
   private static Icon? BellConciergef;
   public static Icon BellConcierge => BellConciergef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell-concierge");
   public static Icon ConciergeBell => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BellConcierge;
   private static Icon? BellExclamationf;
   public static Icon BellExclamation => BellExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell-exclamation");
   private static Icon? BellOnf;
   public static Icon BellOn => BellOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell-on");
   private static Icon? BellPlusf;
   public static Icon BellPlus => BellPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell-plus");
   private static Icon? BellRingf;
   public static Icon BellRing => BellRingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell-ring");
   private static Icon? BellSchoolf;
   public static Icon BellSchool => BellSchoolf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell-school");
   private static Icon? BellSchoolSlashf;
   public static Icon BellSchoolSlash => BellSchoolSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell-school-slash");
   private static Icon? BellSlashf;
   public static Icon BellSlash => BellSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bell-slash");
   private static Icon? Bellsf;
   public static Icon Bells => Bellsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bells");
   private static Icon? BenchTreef;
   public static Icon BenchTree => BenchTreef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bench-tree");
   private static Icon? BezierCurvef;
   public static Icon BezierCurve => BezierCurvef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bezier-curve");
   private static Icon? Bicyclef;
   public static Icon Bicycle => Bicyclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bicycle");
   private static Icon? Billboardf;
   public static Icon Billboard => Billboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "billboard");
   private static Icon? BinBottlesf;
   public static Icon BinBottles => BinBottlesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bin-bottles");
   private static Icon? BinBottlesRecyclef;
   public static Icon BinBottlesRecycle => BinBottlesRecyclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bin-bottles-recycle");
   private static Icon? BinRecyclef;
   public static Icon BinRecycle => BinRecyclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bin-recycle");
   private static Icon? Binaryf;
   public static Icon Binary => Binaryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "binary");
   private static Icon? BinaryCircleCheckf;
   public static Icon BinaryCircleCheck => BinaryCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "binary-circle-check");
   private static Icon? BinaryLockf;
   public static Icon BinaryLock => BinaryLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "binary-lock");
   private static Icon? BinarySlashf;
   public static Icon BinarySlash => BinarySlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "binary-slash");
   private static Icon? Binocularsf;
   public static Icon Binoculars => Binocularsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "binoculars");
   private static Icon? Biohazardf;
   public static Icon Biohazard => Biohazardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "biohazard");
   private static Icon? Birdf;
   public static Icon Bird => Birdf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bird");
   private static Icon? BitcoinSignf;
   public static Icon BitcoinSign => BitcoinSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bitcoin-sign");
   private static Icon? Blanketf;
   public static Icon Blanket => Blanketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blanket");
   private static Icon? BlanketFiref;
   public static Icon BlanketFire => BlanketFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blanket-fire");
   private static Icon? Blenderf;
   public static Icon Blender => Blenderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blender");
   private static Icon? BlenderPhonef;
   public static Icon BlenderPhone => BlenderPhonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blender-phone");
   private static Icon? Blindsf;
   public static Icon Blinds => Blindsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blinds");
   private static Icon? BlindsOpenf;
   public static Icon BlindsOpen => BlindsOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blinds-open");
   private static Icon? BlindsRaisedf;
   public static Icon BlindsRaised => BlindsRaisedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blinds-raised");
   private static Icon? Blockf;
   public static Icon Block => Blockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "block");
   private static Icon? BlockBrickf;
   public static Icon BlockBrick => BlockBrickf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "block-brick");
   public static Icon WallBrick => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BlockBrick;
   private static Icon? BlockBrickFiref;
   public static Icon BlockBrickFire => BlockBrickFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "block-brick-fire");
   public static Icon Firewall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BlockBrickFire;
   private static Icon? BlockQuestionf;
   public static Icon BlockQuestion => BlockQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "block-question");
   private static Icon? BlockQuotef;
   public static Icon BlockQuote => BlockQuotef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "block-quote");
   private static Icon? Blogf;
   public static Icon Blog => Blogf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blog");
   private static Icon? Blueberriesf;
   public static Icon Blueberries => Blueberriesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "blueberries");
   private static Icon? Bluetoothf;
   public static Icon Bluetooth => Bluetoothf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bluetooth");
   private static Icon? Boldf;
   public static Icon Bold => Boldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bold");
   private static Icon? Boltf;
   public static Icon Bolt => Boltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bolt");
   public static Icon Zap => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Bolt;
   private static Icon? BoltAutof;
   public static Icon BoltAuto => BoltAutof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bolt-auto");
   private static Icon? BoltLightningf;
   public static Icon BoltLightning => BoltLightningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bolt-lightning");
   private static Icon? BoltSlashf;
   public static Icon BoltSlash => BoltSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bolt-slash");
   private static Icon? Bombf;
   public static Icon Bomb => Bombf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bomb");
   private static Icon? Bonef;
   public static Icon Bone => Bonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bone");
   private static Icon? BoneBreakf;
   public static Icon BoneBreak => BoneBreakf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bone-break");
   private static Icon? Bongf;
   public static Icon Bong => Bongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bong");
   private static Icon? Bookf;
   public static Icon Book => Bookf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book");
   private static Icon? BookArrowRightf;
   public static Icon BookArrowRight => BookArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-arrow-right");
   private static Icon? BookArrowUpf;
   public static Icon BookArrowUp => BookArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-arrow-up");
   private static Icon? BookAtlasf;
   public static Icon BookAtlas => BookAtlasf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-atlas");
   public static Icon Atlas => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookAtlas;
   private static Icon? BookBiblef;
   public static Icon BookBible => BookBiblef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-bible");
   public static Icon Bible => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookBible;
   private static Icon? BookBlankf;
   public static Icon BookBlank => BookBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-blank");
   public static Icon BookAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookBlank;
   private static Icon? BookBookmarkf;
   public static Icon BookBookmark => BookBookmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-bookmark");
   private static Icon? BookCircleArrowRightf;
   public static Icon BookCircleArrowRight => BookCircleArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-circle-arrow-right");
   private static Icon? BookCircleArrowUpf;
   public static Icon BookCircleArrowUp => BookCircleArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-circle-arrow-up");
   private static Icon? BookCopyf;
   public static Icon BookCopy => BookCopyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-copy");
   private static Icon? BookFontf;
   public static Icon BookFont => BookFontf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-font");
   private static Icon? BookHeartf;
   public static Icon BookHeart => BookHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-heart");
   private static Icon? BookJournalWhillsf;
   public static Icon BookJournalWhills => BookJournalWhillsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-journal-whills");
   public static Icon JournalWhills => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookJournalWhills;
   private static Icon? BookMedicalf;
   public static Icon BookMedical => BookMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-medical");
   private static Icon? BookOpenf;
   public static Icon BookOpen => BookOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-open");
   private static Icon? BookOpenCoverf;
   public static Icon BookOpenCover => BookOpenCoverf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-open-cover");
   public static Icon BookOpenAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookOpenCover;
   private static Icon? BookOpenReaderf;
   public static Icon BookOpenReader => BookOpenReaderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-open-reader");
   public static Icon BookReader => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookOpenReader;
   private static Icon? BookQuranf;
   public static Icon BookQuran => BookQuranf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-quran");
   public static Icon Quran => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookQuran;
   private static Icon? BookSectionf;
   public static Icon BookSection => BookSectionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-section");
   public static Icon BookLaw => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookSection;
   private static Icon? BookSkullf;
   public static Icon BookSkull => BookSkullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-skull");
   public static Icon BookDead => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookSkull;
   private static Icon? BookSparklesf;
   public static Icon BookSparkles => BookSparklesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-sparkles");
   public static Icon BookSpells => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookSparkles;
   private static Icon? BookTanakhf;
   public static Icon BookTanakh => BookTanakhf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-tanakh");
   public static Icon Tanakh => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BookTanakh;
   private static Icon? BookUserf;
   public static Icon BookUser => BookUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "book-user");
   private static Icon? Bookmarkf;
   public static Icon Bookmark => Bookmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bookmark");
   private static Icon? BookmarkSlashf;
   public static Icon BookmarkSlash => BookmarkSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bookmark-slash");
   private static Icon? Booksf;
   public static Icon Books => Booksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "books");
   private static Icon? BooksMedicalf;
   public static Icon BooksMedical => BooksMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "books-medical");
   private static Icon? Boomboxf;
   public static Icon Boombox => Boomboxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "boombox");
   private static Icon? Bootf;
   public static Icon Boot => Bootf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "boot");
   private static Icon? BootHeeledf;
   public static Icon BootHeeled => BootHeeledf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "boot-heeled");
   private static Icon? BoothCurtainf;
   public static Icon BoothCurtain => BoothCurtainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "booth-curtain");
   private static Icon? BorderAllf;
   public static Icon BorderAll => BorderAllf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-all");
   private static Icon? BorderBottomf;
   public static Icon BorderBottom => BorderBottomf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-bottom");
   private static Icon? BorderBottomRightf;
   public static Icon BorderBottomRight => BorderBottomRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-bottom-right");
   public static Icon BorderStyleAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BorderBottomRight;
   private static Icon? BorderCenterHf;
   public static Icon BorderCenterH => BorderCenterHf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-center-h");
   private static Icon? BorderCenterVf;
   public static Icon BorderCenterV => BorderCenterVf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-center-v");
   private static Icon? BorderInnerf;
   public static Icon BorderInner => BorderInnerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-inner");
   private static Icon? BorderLeftf;
   public static Icon BorderLeft => BorderLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-left");
   private static Icon? BorderNonef;
   public static Icon BorderNone => BorderNonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-none");
   private static Icon? BorderOuterf;
   public static Icon BorderOuter => BorderOuterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-outer");
   private static Icon? BorderRightf;
   public static Icon BorderRight => BorderRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-right");
   private static Icon? BorderTopf;
   public static Icon BorderTop => BorderTopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-top");
   private static Icon? BorderTopLeftf;
   public static Icon BorderTopLeft => BorderTopLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "border-top-left");
   public static Icon BorderStyle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BorderTopLeft;
   private static Icon? BoreHolef;
   public static Icon BoreHole => BoreHolef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bore-hole");
   private static Icon? BottleDropletf;
   public static Icon BottleDroplet => BottleDropletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bottle-droplet");
   private static Icon? BottleWaterf;
   public static Icon BottleWater => BottleWaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bottle-water");
   private static Icon? BowArrowf;
   public static Icon BowArrow => BowArrowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bow-arrow");
   private static Icon? BowlChopsticksf;
   public static Icon BowlChopsticks => BowlChopsticksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-chopsticks");
   private static Icon? BowlChopsticksNoodlesf;
   public static Icon BowlChopsticksNoodles => BowlChopsticksNoodlesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-chopsticks-noodles");
   private static Icon? BowlFoodf;
   public static Icon BowlFood => BowlFoodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-food");
   private static Icon? BowlHotf;
   public static Icon BowlHot => BowlHotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-hot");
   public static Icon Soup => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BowlHot;
   private static Icon? BowlRicef;
   public static Icon BowlRice => BowlRicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-rice");
   private static Icon? BowlScoopf;
   public static Icon BowlScoop => BowlScoopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-scoop");
   public static Icon BowlShavedIce => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BowlScoop;
   private static Icon? BowlScoopsf;
   public static Icon BowlScoops => BowlScoopsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-scoops");
   private static Icon? BowlSoftServef;
   public static Icon BowlSoftServe => BowlSoftServef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-soft-serve");
   private static Icon? BowlSpoonf;
   public static Icon BowlSpoon => BowlSpoonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowl-spoon");
   private static Icon? BowlingBallf;
   public static Icon BowlingBall => BowlingBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowling-ball");
   private static Icon? BowlingBallPinf;
   public static Icon BowlingBallPin => BowlingBallPinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowling-ball-pin");
   private static Icon? BowlingPinsf;
   public static Icon BowlingPins => BowlingPinsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bowling-pins");
   private static Icon? Boxf;
   public static Icon Box => Boxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box");
   private static Icon? BoxArchivef;
   public static Icon BoxArchive => BoxArchivef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-archive");
   public static Icon Archive => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BoxArchive;
   private static Icon? BoxBallotf;
   public static Icon BoxBallot => BoxBallotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-ballot");
   private static Icon? BoxCheckf;
   public static Icon BoxCheck => BoxCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-check");
   private static Icon? BoxCircleCheckf;
   public static Icon BoxCircleCheck => BoxCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-circle-check");
   private static Icon? BoxDollarf;
   public static Icon BoxDollar => BoxDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-dollar");
   public static Icon BoxUsd => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BoxDollar;
   private static Icon? BoxHeartf;
   public static Icon BoxHeart => BoxHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-heart");
   private static Icon? BoxOpenf;
   public static Icon BoxOpen => BoxOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-open");
   private static Icon? BoxOpenFullf;
   public static Icon BoxOpenFull => BoxOpenFullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-open-full");
   public static Icon BoxFull => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BoxOpenFull;
   private static Icon? BoxTapedf;
   public static Icon BoxTaped => BoxTapedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-taped");
   public static Icon BoxAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BoxTaped;
   private static Icon? BoxTissuef;
   public static Icon BoxTissue => BoxTissuef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "box-tissue");
   private static Icon? BoxesPackingf;
   public static Icon BoxesPacking => BoxesPackingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "boxes-packing");
   private static Icon? BoxesStackedf;
   public static Icon BoxesStacked => BoxesStackedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "boxes-stacked");
   public static Icon Boxes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BoxesStacked;
   public static Icon BoxesAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BoxesStacked;
   private static Icon? BoxingGlovef;
   public static Icon BoxingGlove => BoxingGlovef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "boxing-glove");
   public static Icon GloveBoxing => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BoxingGlove;
   private static Icon? BracketCurlyf;
   public static Icon BracketCurly => BracketCurlyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bracket-curly");
   public static Icon BracketCurlyLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BracketCurly;
   private static Icon? BracketCurlyRightf;
   public static Icon BracketCurlyRight => BracketCurlyRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bracket-curly-right");
   private static Icon? BracketRoundf;
   public static Icon BracketRound => BracketRoundf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bracket-round");
   public static Icon Parenthesis => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BracketRound;
   private static Icon? BracketRoundRightf;
   public static Icon BracketRoundRight => BracketRoundRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bracket-round-right");
   private static Icon? BracketSquaref;
   public static Icon BracketSquare => BracketSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bracket-square");
   public static Icon Bracket => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BracketSquare;
   public static Icon BracketLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BracketSquare;
   private static Icon? BracketSquareRightf;
   public static Icon BracketSquareRight => BracketSquareRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bracket-square-right");
   private static Icon? BracketsCurlyf;
   public static Icon BracketsCurly => BracketsCurlyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brackets-curly");
   private static Icon? BracketsRoundf;
   public static Icon BracketsRound => BracketsRoundf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brackets-round");
   public static Icon Parentheses => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BracketsRound;
   private static Icon? BracketsSquaref;
   public static Icon BracketsSquare => BracketsSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brackets-square");
   public static Icon Brackets => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BracketsSquare;
   private static Icon? Braillef;
   public static Icon Braille => Braillef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "braille");
   private static Icon? Brainf;
   public static Icon Brain => Brainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brain");
   private static Icon? BrainArrowCurvedRightf;
   public static Icon BrainArrowCurvedRight => BrainArrowCurvedRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brain-arrow-curved-right");
   public static Icon MindShare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BrainArrowCurvedRight;
   private static Icon? BrainCircuitf;
   public static Icon BrainCircuit => BrainCircuitf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brain-circuit");
   private static Icon? BrakeWarningf;
   public static Icon BrakeWarning => BrakeWarningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brake-warning");
   private static Icon? BrazilianRealSignf;
   public static Icon BrazilianRealSign => BrazilianRealSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brazilian-real-sign");
   private static Icon? BreadLoaff;
   public static Icon BreadLoaf => BreadLoaff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bread-loaf");
   private static Icon? BreadSlicef;
   public static Icon BreadSlice => BreadSlicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bread-slice");
   private static Icon? BreadSliceButterf;
   public static Icon BreadSliceButter => BreadSliceButterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bread-slice-butter");
   private static Icon? Bridgef;
   public static Icon Bridge => Bridgef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bridge");
   private static Icon? BridgeCircleCheckf;
   public static Icon BridgeCircleCheck => BridgeCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bridge-circle-check");
   private static Icon? BridgeCircleExclamationf;
   public static Icon BridgeCircleExclamation => BridgeCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bridge-circle-exclamation");
   private static Icon? BridgeCircleXmarkf;
   public static Icon BridgeCircleXmark => BridgeCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bridge-circle-xmark");
   private static Icon? BridgeLockf;
   public static Icon BridgeLock => BridgeLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bridge-lock");
   private static Icon? BridgeSuspensionf;
   public static Icon BridgeSuspension => BridgeSuspensionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bridge-suspension");
   private static Icon? BridgeWaterf;
   public static Icon BridgeWater => BridgeWaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bridge-water");
   private static Icon? Briefcasef;
   public static Icon Briefcase => Briefcasef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "briefcase");
   private static Icon? BriefcaseArrowRightf;
   public static Icon BriefcaseArrowRight => BriefcaseArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "briefcase-arrow-right");
   private static Icon? BriefcaseBlankf;
   public static Icon BriefcaseBlank => BriefcaseBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "briefcase-blank");
   private static Icon? BriefcaseMedicalf;
   public static Icon BriefcaseMedical => BriefcaseMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "briefcase-medical");
   private static Icon? Brightnessf;
   public static Icon Brightness => Brightnessf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brightness");
   private static Icon? BrightnessLowf;
   public static Icon BrightnessLow => BrightnessLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brightness-low");
   private static Icon? BringForwardf;
   public static Icon BringForward => BringForwardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bring-forward");
   private static Icon? BringFrontf;
   public static Icon BringFront => BringFrontf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bring-front");
   private static Icon? Broccolif;
   public static Icon Broccoli => Broccolif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "broccoli");
   private static Icon? Broomf;
   public static Icon Broom => Broomf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "broom");
   private static Icon? BroomBallf;
   public static Icon BroomBall => BroomBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "broom-ball");
   public static Icon Quidditch => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BroomBall;
   public static Icon QuidditchBroomBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BroomBall;
   private static Icon? BroomWidef;
   public static Icon BroomWide => BroomWidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "broom-wide");
   private static Icon? Browserf;
   public static Icon Browser => Browserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "browser");
   private static Icon? Browsersf;
   public static Icon Browsers => Browsersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "browsers");
   private static Icon? Brushf;
   public static Icon Brush => Brushf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "brush");
   private static Icon? Bucketf;
   public static Icon Bucket => Bucketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bucket");
   private static Icon? Bugf;
   public static Icon Bug => Bugf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bug");
   private static Icon? BugSlashf;
   public static Icon BugSlash => BugSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bug-slash");
   private static Icon? Bugsf;
   public static Icon Bugs => Bugsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bugs");
   private static Icon? Buildingf;
   public static Icon Building => Buildingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building");
   private static Icon? BuildingCircleArrowRightf;
   public static Icon BuildingCircleArrowRight => BuildingCircleArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-circle-arrow-right");
   private static Icon? BuildingCircleCheckf;
   public static Icon BuildingCircleCheck => BuildingCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-circle-check");
   private static Icon? BuildingCircleExclamationf;
   public static Icon BuildingCircleExclamation => BuildingCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-circle-exclamation");
   private static Icon? BuildingCircleXmarkf;
   public static Icon BuildingCircleXmark => BuildingCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-circle-xmark");
   private static Icon? BuildingColumnsf;
   public static Icon BuildingColumns => BuildingColumnsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-columns");
   public static Icon Bank => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BuildingColumns;
   public static Icon Institution => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BuildingColumns;
   public static Icon Museum => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BuildingColumns;
   public static Icon University => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BuildingColumns;
   private static Icon? BuildingFlagf;
   public static Icon BuildingFlag => BuildingFlagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-flag");
   private static Icon? BuildingLockf;
   public static Icon BuildingLock => BuildingLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-lock");
   private static Icon? BuildingMagnifyingGlassf;
   public static Icon BuildingMagnifyingGlass => BuildingMagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-magnifying-glass");
   private static Icon? BuildingMemof;
   public static Icon BuildingMemo => BuildingMemof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-memo");
   private static Icon? BuildingNgof;
   public static Icon BuildingNgo => BuildingNgof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-ngo");
   private static Icon? BuildingShieldf;
   public static Icon BuildingShield => BuildingShieldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-shield");
   private static Icon? BuildingUnf;
   public static Icon BuildingUn => BuildingUnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-un");
   private static Icon? BuildingUserf;
   public static Icon BuildingUser => BuildingUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-user");
   private static Icon? BuildingWheatf;
   public static Icon BuildingWheat => BuildingWheatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "building-wheat");
   private static Icon? Buildingsf;
   public static Icon Buildings => Buildingsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "buildings");
   private static Icon? Bulldozerf;
   public static Icon Bulldozer => Bulldozerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bulldozer");
   private static Icon? Bullhornf;
   public static Icon Bullhorn => Bullhornf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bullhorn");
   private static Icon? Bullseyef;
   public static Icon Bullseye => Bullseyef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bullseye");
   private static Icon? BullseyeArrowf;
   public static Icon BullseyeArrow => BullseyeArrowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bullseye-arrow");
   private static Icon? BullseyePointerf;
   public static Icon BullseyePointer => BullseyePointerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bullseye-pointer");
   private static Icon? Buoyf;
   public static Icon Buoy => Buoyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "buoy");
   private static Icon? BuoyMooringf;
   public static Icon BuoyMooring => BuoyMooringf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "buoy-mooring");
   private static Icon? Burgerf;
   public static Icon Burger => Burgerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "burger");
   public static Icon Hamburger => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Burger;
   private static Icon? BurgerCheesef;
   public static Icon BurgerCheese => BurgerCheesef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "burger-cheese");
   public static Icon Cheeseburger => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BurgerCheese;
   private static Icon? BurgerFriesf;
   public static Icon BurgerFries => BurgerFriesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "burger-fries");
   private static Icon? BurgerGlassf;
   public static Icon BurgerGlass => BurgerGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "burger-glass");
   private static Icon? BurgerLettucef;
   public static Icon BurgerLettuce => BurgerLettucef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "burger-lettuce");
   private static Icon? BurgerSodaf;
   public static Icon BurgerSoda => BurgerSodaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "burger-soda");
   private static Icon? Burritof;
   public static Icon Burrito => Burritof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "burrito");
   private static Icon? Burstf;
   public static Icon Burst => Burstf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "burst");
   private static Icon? Busf;
   public static Icon Bus => Busf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bus");
   private static Icon? BusSchoolf;
   public static Icon BusSchool => BusSchoolf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bus-school");
   private static Icon? BusSimplef;
   public static Icon BusSimple => BusSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "bus-simple");
   public static Icon BusAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BusSimple;
   private static Icon? BusinessTimef;
   public static Icon BusinessTime => BusinessTimef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "business-time");
   public static Icon BriefcaseClock => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.BusinessTime;
   private static Icon? Butterf;
   public static Icon Butter => Butterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "butter");
   private static Icon? Cf;
   public static Icon C => Cf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "c");
   private static Icon? Cabinf;
   public static Icon Cabin => Cabinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cabin");
   private static Icon? CabinetFilingf;
   public static Icon CabinetFiling => CabinetFilingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cabinet-filing");
   private static Icon? CableCarf;
   public static Icon CableCar => CableCarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cable-car");
   public static Icon Tram => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CableCar;
   private static Icon? Cactusf;
   public static Icon Cactus => Cactusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cactus");
   private static Icon? CakeCandlesf;
   public static Icon CakeCandles => CakeCandlesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cake-candles");
   public static Icon BirthdayCake => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CakeCandles;
   public static Icon Cake => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CakeCandles;
   private static Icon? CakeSlicef;
   public static Icon CakeSlice => CakeSlicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cake-slice");
   public static Icon Shortcake => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CakeSlice;
   private static Icon? Calculatorf;
   public static Icon Calculator => Calculatorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calculator");
   private static Icon? CalculatorSimplef;
   public static Icon CalculatorSimple => CalculatorSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calculator-simple");
   public static Icon CalculatorAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CalculatorSimple;
   private static Icon? Calendarf;
   public static Icon Calendar => Calendarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar");
   private static Icon? CalendarArrowDownf;
   public static Icon CalendarArrowDown => CalendarArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-arrow-down");
   public static Icon CalendarDownload => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CalendarArrowDown;
   private static Icon? CalendarArrowUpf;
   public static Icon CalendarArrowUp => CalendarArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-arrow-up");
   public static Icon CalendarUpload => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CalendarArrowUp;
   private static Icon? CalendarCheckf;
   public static Icon CalendarCheck => CalendarCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-check");
   private static Icon? CalendarCircleExclamationf;
   public static Icon CalendarCircleExclamation => CalendarCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-circle-exclamation");
   private static Icon? CalendarCircleMinusf;
   public static Icon CalendarCircleMinus => CalendarCircleMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-circle-minus");
   private static Icon? CalendarCirclePlusf;
   public static Icon CalendarCirclePlus => CalendarCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-circle-plus");
   private static Icon? CalendarCircleUserf;
   public static Icon CalendarCircleUser => CalendarCircleUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-circle-user");
   private static Icon? CalendarClockf;
   public static Icon CalendarClock => CalendarClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-clock");
   public static Icon CalendarTime => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CalendarClock;
   private static Icon? CalendarDayf;
   public static Icon CalendarDay => CalendarDayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-day");
   private static Icon? CalendarDaysf;
   public static Icon CalendarDays => CalendarDaysf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-days");
   public static Icon CalendarAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CalendarDays;
   private static Icon? CalendarExclamationf;
   public static Icon CalendarExclamation => CalendarExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-exclamation");
   private static Icon? CalendarHeartf;
   public static Icon CalendarHeart => CalendarHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-heart");
   private static Icon? CalendarImagef;
   public static Icon CalendarImage => CalendarImagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-image");
   private static Icon? CalendarLinesf;
   public static Icon CalendarLines => CalendarLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-lines");
   public static Icon CalendarNote => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CalendarLines;
   private static Icon? CalendarLinesPenf;
   public static Icon CalendarLinesPen => CalendarLinesPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-lines-pen");
   private static Icon? CalendarMinusf;
   public static Icon CalendarMinus => CalendarMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-minus");
   private static Icon? CalendarPenf;
   public static Icon CalendarPen => CalendarPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-pen");
   public static Icon CalendarEdit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CalendarPen;
   private static Icon? CalendarPlusf;
   public static Icon CalendarPlus => CalendarPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-plus");
   private static Icon? CalendarRangef;
   public static Icon CalendarRange => CalendarRangef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-range");
   private static Icon? CalendarStarf;
   public static Icon CalendarStar => CalendarStarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-star");
   private static Icon? CalendarUsersf;
   public static Icon CalendarUsers => CalendarUsersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-users");
   private static Icon? CalendarWeekf;
   public static Icon CalendarWeek => CalendarWeekf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-week");
   private static Icon? CalendarXmarkf;
   public static Icon CalendarXmark => CalendarXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendar-xmark");
   public static Icon CalendarTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CalendarXmark;
   private static Icon? Calendarsf;
   public static Icon Calendars => Calendarsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "calendars");
   private static Icon? Camcorderf;
   public static Icon Camcorder => Camcorderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camcorder");
   public static Icon VideoHandheld => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Camcorder;
   private static Icon? Cameraf;
   public static Icon Camera => Cameraf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera");
   public static Icon CameraAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Camera;
   private static Icon? CameraCctvf;
   public static Icon CameraCctv => CameraCctvf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-cctv");
   public static Icon Cctv => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CameraCctv;
   private static Icon? CameraMovief;
   public static Icon CameraMovie => CameraMovief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-movie");
   private static Icon? CameraPolaroidf;
   public static Icon CameraPolaroid => CameraPolaroidf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-polaroid");
   private static Icon? CameraRetrof;
   public static Icon CameraRetro => CameraRetrof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-retro");
   private static Icon? CameraRotatef;
   public static Icon CameraRotate => CameraRotatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-rotate");
   private static Icon? CameraSecurityf;
   public static Icon CameraSecurity => CameraSecurityf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-security");
   public static Icon CameraHome => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CameraSecurity;
   private static Icon? CameraSlashf;
   public static Icon CameraSlash => CameraSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-slash");
   private static Icon? CameraViewfinderf;
   public static Icon CameraViewfinder => CameraViewfinderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-viewfinder");
   public static Icon Screenshot => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CameraViewfinder;
   private static Icon? CameraWebf;
   public static Icon CameraWeb => CameraWebf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-web");
   public static Icon Webcam => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CameraWeb;
   private static Icon? CameraWebSlashf;
   public static Icon CameraWebSlash => CameraWebSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "camera-web-slash");
   public static Icon WebcamSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CameraWebSlash;
   private static Icon? Campfiref;
   public static Icon Campfire => Campfiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "campfire");
   private static Icon? Campgroundf;
   public static Icon Campground => Campgroundf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "campground");
   private static Icon? CanFoodf;
   public static Icon CanFood => CanFoodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "can-food");
   private static Icon? CandleHolderf;
   public static Icon CandleHolder => CandleHolderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "candle-holder");
   private static Icon? Candyf;
   public static Icon Candy => Candyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "candy");
   private static Icon? CandyBarf;
   public static Icon CandyBar => CandyBarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "candy-bar");
   public static Icon ChocolateBar => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CandyBar;
   private static Icon? CandyCanef;
   public static Icon CandyCane => CandyCanef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "candy-cane");
   private static Icon? CandyCornf;
   public static Icon CandyCorn => CandyCornf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "candy-corn");
   private static Icon? Cannabisf;
   public static Icon Cannabis => Cannabisf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cannabis");
   private static Icon? Cannonf;
   public static Icon Cannon => Cannonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cannon");
   private static Icon? Capsulesf;
   public static Icon Capsules => Capsulesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "capsules");
   private static Icon? Carf;
   public static Icon Car => Carf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car");
   public static Icon Automobile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Car;
   private static Icon? CarBatteryf;
   public static Icon CarBattery => CarBatteryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-battery");
   public static Icon BatteryCar => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CarBattery;
   private static Icon? CarBoltf;
   public static Icon CarBolt => CarBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-bolt");
   private static Icon? CarBuildingf;
   public static Icon CarBuilding => CarBuildingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-building");
   private static Icon? CarBumpf;
   public static Icon CarBump => CarBumpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-bump");
   private static Icon? CarBurstf;
   public static Icon CarBurst => CarBurstf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-burst");
   public static Icon CarCrash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CarBurst;
   private static Icon? CarBusf;
   public static Icon CarBus => CarBusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-bus");
   private static Icon? CarCircleBoltf;
   public static Icon CarCircleBolt => CarCircleBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-circle-bolt");
   private static Icon? CarGaragef;
   public static Icon CarGarage => CarGaragef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-garage");
   private static Icon? CarMirrorsf;
   public static Icon CarMirrors => CarMirrorsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-mirrors");
   private static Icon? CarOnf;
   public static Icon CarOn => CarOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-on");
   private static Icon? CarRearf;
   public static Icon CarRear => CarRearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-rear");
   public static Icon CarAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CarRear;
   private static Icon? CarSidef;
   public static Icon CarSide => CarSidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-side");
   private static Icon? CarSideBoltf;
   public static Icon CarSideBolt => CarSideBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-side-bolt");
   private static Icon? CarTiltf;
   public static Icon CarTilt => CarTiltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-tilt");
   private static Icon? CarTunnelf;
   public static Icon CarTunnel => CarTunnelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-tunnel");
   private static Icon? CarWashf;
   public static Icon CarWash => CarWashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-wash");
   private static Icon? CarWrenchf;
   public static Icon CarWrench => CarWrenchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "car-wrench");
   public static Icon CarMechanic => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CarWrench;
   private static Icon? Caravanf;
   public static Icon Caravan => Caravanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "caravan");
   private static Icon? CaravanSimplef;
   public static Icon CaravanSimple => CaravanSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "caravan-simple");
   public static Icon CaravanAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CaravanSimple;
   private static Icon? CardClubf;
   public static Icon CardClub => CardClubf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "card-club");
   private static Icon? CardDiamondf;
   public static Icon CardDiamond => CardDiamondf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "card-diamond");
   private static Icon? CardHeartf;
   public static Icon CardHeart => CardHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "card-heart");
   private static Icon? CardSpadef;
   public static Icon CardSpade => CardSpadef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "card-spade");
   private static Icon? Cardsf;
   public static Icon Cards => Cardsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cards");
   private static Icon? CardsBlankf;
   public static Icon CardsBlank => CardsBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cards-blank");
   private static Icon? CaretDownf;
   public static Icon CaretDown => CaretDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "caret-down");
   private static Icon? CaretLeftf;
   public static Icon CaretLeft => CaretLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "caret-left");
   private static Icon? CaretRightf;
   public static Icon CaretRight => CaretRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "caret-right");
   private static Icon? CaretUpf;
   public static Icon CaretUp => CaretUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "caret-up");
   private static Icon? Carrotf;
   public static Icon Carrot => Carrotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "carrot");
   private static Icon? Carsf;
   public static Icon Cars => Carsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cars");
   private static Icon? CartArrowDownf;
   public static Icon CartArrowDown => CartArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-arrow-down");
   private static Icon? CartArrowUpf;
   public static Icon CartArrowUp => CartArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-arrow-up");
   private static Icon? CartCircleArrowDownf;
   public static Icon CartCircleArrowDown => CartCircleArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-circle-arrow-down");
   private static Icon? CartCircleArrowUpf;
   public static Icon CartCircleArrowUp => CartCircleArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-circle-arrow-up");
   private static Icon? CartCircleCheckf;
   public static Icon CartCircleCheck => CartCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-circle-check");
   private static Icon? CartCircleExclamationf;
   public static Icon CartCircleExclamation => CartCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-circle-exclamation");
   private static Icon? CartCirclePlusf;
   public static Icon CartCirclePlus => CartCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-circle-plus");
   private static Icon? CartCircleXmarkf;
   public static Icon CartCircleXmark => CartCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-circle-xmark");
   private static Icon? CartFlatbedf;
   public static Icon CartFlatbed => CartFlatbedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-flatbed");
   public static Icon DollyFlatbed => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CartFlatbed;
   private static Icon? CartFlatbedBoxesf;
   public static Icon CartFlatbedBoxes => CartFlatbedBoxesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-flatbed-boxes");
   public static Icon DollyFlatbedAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CartFlatbedBoxes;
   private static Icon? CartFlatbedEmptyf;
   public static Icon CartFlatbedEmpty => CartFlatbedEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-flatbed-empty");
   public static Icon DollyFlatbedEmpty => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CartFlatbedEmpty;
   private static Icon? CartFlatbedSuitcasef;
   public static Icon CartFlatbedSuitcase => CartFlatbedSuitcasef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-flatbed-suitcase");
   public static Icon LuggageCart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CartFlatbedSuitcase;
   private static Icon? CartMinusf;
   public static Icon CartMinus => CartMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-minus");
   private static Icon? CartPlusf;
   public static Icon CartPlus => CartPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-plus");
   private static Icon? CartShoppingf;
   public static Icon CartShopping => CartShoppingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-shopping");
   public static Icon ShoppingCart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CartShopping;
   private static Icon? CartShoppingFastf;
   public static Icon CartShoppingFast => CartShoppingFastf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-shopping-fast");
   private static Icon? CartXmarkf;
   public static Icon CartXmark => CartXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cart-xmark");
   private static Icon? CashRegisterf;
   public static Icon CashRegister => CashRegisterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cash-register");
   private static Icon? CassetteBetamaxf;
   public static Icon CassetteBetamax => CassetteBetamaxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cassette-betamax");
   public static Icon Betamax => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CassetteBetamax;
   private static Icon? CassetteTapef;
   public static Icon CassetteTape => CassetteTapef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cassette-tape");
   private static Icon? CassetteVhsf;
   public static Icon CassetteVhs => CassetteVhsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cassette-vhs");
   public static Icon Vhs => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CassetteVhs;
   private static Icon? Castlef;
   public static Icon Castle => Castlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "castle");
   private static Icon? Catf;
   public static Icon Cat => Catf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cat");
   private static Icon? CatSpacef;
   public static Icon CatSpace => CatSpacef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cat-space");
   private static Icon? Cauldronf;
   public static Icon Cauldron => Cauldronf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cauldron");
   private static Icon? CediSignf;
   public static Icon CediSign => CediSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cedi-sign");
   private static Icon? CentSignf;
   public static Icon CentSign => CentSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cent-sign");
   private static Icon? Certificatef;
   public static Icon Certificate => Certificatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "certificate");
   private static Icon? Chairf;
   public static Icon Chair => Chairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chair");
   private static Icon? ChairOfficef;
   public static Icon ChairOffice => ChairOfficef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chair-office");
   private static Icon? Chalkboardf;
   public static Icon Chalkboard => Chalkboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chalkboard");
   public static Icon Blackboard => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Chalkboard;
   private static Icon? ChalkboardUserf;
   public static Icon ChalkboardUser => ChalkboardUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chalkboard-user");
   public static Icon ChalkboardTeacher => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChalkboardUser;
   private static Icon? ChampagneGlassf;
   public static Icon ChampagneGlass => ChampagneGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "champagne-glass");
   public static Icon GlassChampagne => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChampagneGlass;
   private static Icon? ChampagneGlassesf;
   public static Icon ChampagneGlasses => ChampagneGlassesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "champagne-glasses");
   public static Icon GlassCheers => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChampagneGlasses;
   private static Icon? ChargingStationf;
   public static Icon ChargingStation => ChargingStationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "charging-station");
   private static Icon? ChartAreaf;
   public static Icon ChartArea => ChartAreaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-area");
   public static Icon AreaChart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChartArea;
   private static Icon? ChartBarf;
   public static Icon ChartBar => ChartBarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-bar");
   public static Icon BarChart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChartBar;
   private static Icon? ChartBulletf;
   public static Icon ChartBullet => ChartBulletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-bullet");
   private static Icon? ChartCandlestickf;
   public static Icon ChartCandlestick => ChartCandlestickf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-candlestick");
   private static Icon? ChartColumnf;
   public static Icon ChartColumn => ChartColumnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-column");
   private static Icon? ChartGanttf;
   public static Icon ChartGantt => ChartGanttf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-gantt");
   private static Icon? ChartKanbanf;
   public static Icon ChartKanban => ChartKanbanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-kanban");
   private static Icon? ChartLinef;
   public static Icon ChartLine => ChartLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-line");
   public static Icon LineChart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChartLine;
   private static Icon? ChartLineDownf;
   public static Icon ChartLineDown => ChartLineDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-line-down");
   private static Icon? ChartLineUpf;
   public static Icon ChartLineUp => ChartLineUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-line-up");
   private static Icon? ChartLineUpDownf;
   public static Icon ChartLineUpDown => ChartLineUpDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-line-up-down");
   private static Icon? ChartMixedf;
   public static Icon ChartMixed => ChartMixedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-mixed");
   public static Icon Analytics => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChartMixed;
   private static Icon? ChartMixedUpCircleCurrencyf;
   public static Icon ChartMixedUpCircleCurrency => ChartMixedUpCircleCurrencyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-mixed-up-circle-currency");
   private static Icon? ChartMixedUpCircleDollarf;
   public static Icon ChartMixedUpCircleDollar => ChartMixedUpCircleDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-mixed-up-circle-dollar");
   private static Icon? ChartNetworkf;
   public static Icon ChartNetwork => ChartNetworkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-network");
   private static Icon? ChartPief;
   public static Icon ChartPie => ChartPief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-pie");
   public static Icon PieChart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChartPie;
   private static Icon? ChartPieSimplef;
   public static Icon ChartPieSimple => ChartPieSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-pie-simple");
   public static Icon ChartPieAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChartPieSimple;
   private static Icon? ChartPieSimpleCircleCurrencyf;
   public static Icon ChartPieSimpleCircleCurrency => ChartPieSimpleCircleCurrencyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-pie-simple-circle-currency");
   private static Icon? ChartPieSimpleCircleDollarf;
   public static Icon ChartPieSimpleCircleDollar => ChartPieSimpleCircleDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-pie-simple-circle-dollar");
   private static Icon? ChartPyramidf;
   public static Icon ChartPyramid => ChartPyramidf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-pyramid");
   private static Icon? ChartRadarf;
   public static Icon ChartRadar => ChartRadarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-radar");
   private static Icon? ChartScatterf;
   public static Icon ChartScatter => ChartScatterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-scatter");
   private static Icon? ChartScatter3df;
   public static Icon ChartScatter3d => ChartScatter3df ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-scatter-3d");
   private static Icon? ChartScatterBubblef;
   public static Icon ChartScatterBubble => ChartScatterBubblef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-scatter-bubble");
   private static Icon? ChartSimplef;
   public static Icon ChartSimple => ChartSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-simple");
   private static Icon? ChartSimpleHorizontalf;
   public static Icon ChartSimpleHorizontal => ChartSimpleHorizontalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-simple-horizontal");
   private static Icon? ChartTreeMapf;
   public static Icon ChartTreeMap => ChartTreeMapf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-tree-map");
   private static Icon? ChartUserf;
   public static Icon ChartUser => ChartUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-user");
   public static Icon UserChart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChartUser;
   private static Icon? ChartWaterfallf;
   public static Icon ChartWaterfall => ChartWaterfallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chart-waterfall");
   private static Icon? Checkf;
   public static Icon Check => Checkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "check");
   private static Icon? CheckDoublef;
   public static Icon CheckDouble => CheckDoublef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "check-double");
   private static Icon? CheckToSlotf;
   public static Icon CheckToSlot => CheckToSlotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "check-to-slot");
   public static Icon VoteYea => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CheckToSlot;
   private static Icon? Cheesef;
   public static Icon Cheese => Cheesef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cheese");
   private static Icon? CheeseSwissf;
   public static Icon CheeseSwiss => CheeseSwissf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cheese-swiss");
   private static Icon? Cherriesf;
   public static Icon Cherries => Cherriesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cherries");
   private static Icon? Chessf;
   public static Icon Chess => Chessf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess");
   private static Icon? ChessBishopf;
   public static Icon ChessBishop => ChessBishopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-bishop");
   private static Icon? ChessBishopPiecef;
   public static Icon ChessBishopPiece => ChessBishopPiecef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-bishop-piece");
   public static Icon ChessBishopAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChessBishopPiece;
   private static Icon? ChessBoardf;
   public static Icon ChessBoard => ChessBoardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-board");
   private static Icon? ChessClockf;
   public static Icon ChessClock => ChessClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-clock");
   private static Icon? ChessClockFlipf;
   public static Icon ChessClockFlip => ChessClockFlipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-clock-flip");
   public static Icon ChessClockAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChessClockFlip;
   private static Icon? ChessKingf;
   public static Icon ChessKing => ChessKingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-king");
   private static Icon? ChessKingPiecef;
   public static Icon ChessKingPiece => ChessKingPiecef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-king-piece");
   public static Icon ChessKingAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChessKingPiece;
   private static Icon? ChessKnightf;
   public static Icon ChessKnight => ChessKnightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-knight");
   private static Icon? ChessKnightPiecef;
   public static Icon ChessKnightPiece => ChessKnightPiecef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-knight-piece");
   public static Icon ChessKnightAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChessKnightPiece;
   private static Icon? ChessPawnf;
   public static Icon ChessPawn => ChessPawnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-pawn");
   private static Icon? ChessPawnPiecef;
   public static Icon ChessPawnPiece => ChessPawnPiecef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-pawn-piece");
   public static Icon ChessPawnAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChessPawnPiece;
   private static Icon? ChessQueenf;
   public static Icon ChessQueen => ChessQueenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-queen");
   private static Icon? ChessQueenPiecef;
   public static Icon ChessQueenPiece => ChessQueenPiecef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-queen-piece");
   public static Icon ChessQueenAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChessQueenPiece;
   private static Icon? ChessRookf;
   public static Icon ChessRook => ChessRookf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-rook");
   private static Icon? ChessRookPiecef;
   public static Icon ChessRookPiece => ChessRookPiecef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chess-rook-piece");
   public static Icon ChessRookAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChessRookPiece;
   private static Icon? Chestnutf;
   public static Icon Chestnut => Chestnutf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chestnut");
   private static Icon? ChevronDownf;
   public static Icon ChevronDown => ChevronDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chevron-down");
   private static Icon? ChevronLeftf;
   public static Icon ChevronLeft => ChevronLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chevron-left");
   private static Icon? ChevronRightf;
   public static Icon ChevronRight => ChevronRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chevron-right");
   private static Icon? ChevronUpf;
   public static Icon ChevronUp => ChevronUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chevron-up");
   private static Icon? ChevronsDownf;
   public static Icon ChevronsDown => ChevronsDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chevrons-down");
   public static Icon ChevronDoubleDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChevronsDown;
   private static Icon? ChevronsLeftf;
   public static Icon ChevronsLeft => ChevronsLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chevrons-left");
   public static Icon ChevronDoubleLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChevronsLeft;
   private static Icon? ChevronsRightf;
   public static Icon ChevronsRight => ChevronsRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chevrons-right");
   public static Icon ChevronDoubleRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChevronsRight;
   private static Icon? ChevronsUpf;
   public static Icon ChevronsUp => ChevronsUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chevrons-up");
   public static Icon ChevronDoubleUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChevronsUp;
   private static Icon? ChfSignf;
   public static Icon ChfSign => ChfSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chf-sign");
   private static Icon? Childf;
   public static Icon Child => Childf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "child");
   private static Icon? ChildCombatantf;
   public static Icon ChildCombatant => ChildCombatantf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "child-combatant");
   public static Icon ChildRifle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ChildCombatant;
   private static Icon? ChildDressf;
   public static Icon ChildDress => ChildDressf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "child-dress");
   private static Icon? ChildReachingf;
   public static Icon ChildReaching => ChildReachingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "child-reaching");
   private static Icon? Childrenf;
   public static Icon Children => Childrenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "children");
   private static Icon? Chimneyf;
   public static Icon Chimney => Chimneyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chimney");
   private static Icon? Chopsticksf;
   public static Icon Chopsticks => Chopsticksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "chopsticks");
   private static Icon? Churchf;
   public static Icon Church => Churchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "church");
   private static Icon? Circlef;
   public static Icon Circle => Circlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle");
   private static Icon? Circle0f;
   public static Icon Circle0 => Circle0f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-0");
   private static Icon? Circle1f;
   public static Icon Circle1 => Circle1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-1");
   private static Icon? Circle2f;
   public static Icon Circle2 => Circle2f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-2");
   private static Icon? Circle3f;
   public static Icon Circle3 => Circle3f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-3");
   private static Icon? Circle4f;
   public static Icon Circle4 => Circle4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-4");
   private static Icon? Circle5f;
   public static Icon Circle5 => Circle5f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-5");
   private static Icon? Circle6f;
   public static Icon Circle6 => Circle6f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-6");
   private static Icon? Circle7f;
   public static Icon Circle7 => Circle7f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-7");
   private static Icon? Circle8f;
   public static Icon Circle8 => Circle8f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-8");
   private static Icon? Circle9f;
   public static Icon Circle9 => Circle9f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-9");
   private static Icon? CircleAf;
   public static Icon CircleA => CircleAf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-a");
   private static Icon? CircleAmpersandf;
   public static Icon CircleAmpersand => CircleAmpersandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-ampersand");
   private static Icon? CircleArrowDownf;
   public static Icon CircleArrowDown => CircleArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-arrow-down");
   public static Icon ArrowCircleDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleArrowDown;
   private static Icon? CircleArrowDownLeftf;
   public static Icon CircleArrowDownLeft => CircleArrowDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-arrow-down-left");
   private static Icon? CircleArrowDownRightf;
   public static Icon CircleArrowDownRight => CircleArrowDownRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-arrow-down-right");
   private static Icon? CircleArrowLeftf;
   public static Icon CircleArrowLeft => CircleArrowLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-arrow-left");
   public static Icon ArrowCircleLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleArrowLeft;
   private static Icon? CircleArrowRightf;
   public static Icon CircleArrowRight => CircleArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-arrow-right");
   public static Icon ArrowCircleRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleArrowRight;
   private static Icon? CircleArrowUpf;
   public static Icon CircleArrowUp => CircleArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-arrow-up");
   public static Icon ArrowCircleUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleArrowUp;
   private static Icon? CircleArrowUpLeftf;
   public static Icon CircleArrowUpLeft => CircleArrowUpLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-arrow-up-left");
   private static Icon? CircleArrowUpRightf;
   public static Icon CircleArrowUpRight => CircleArrowUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-arrow-up-right");
   private static Icon? CircleBf;
   public static Icon CircleB => CircleBf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-b");
   private static Icon? CircleBoltf;
   public static Icon CircleBolt => CircleBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-bolt");
   private static Icon? CircleBookOpenf;
   public static Icon CircleBookOpen => CircleBookOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-book-open");
   public static Icon BookCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleBookOpen;
   private static Icon? CircleBookmarkf;
   public static Icon CircleBookmark => CircleBookmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-bookmark");
   public static Icon BookmarkCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleBookmark;
   private static Icon? CircleCf;
   public static Icon CircleC => CircleCf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-c");
   private static Icon? CircleCalendarf;
   public static Icon CircleCalendar => CircleCalendarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-calendar");
   public static Icon CalendarCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleCalendar;
   private static Icon? CircleCameraf;
   public static Icon CircleCamera => CircleCameraf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-camera");
   public static Icon CameraCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleCamera;
   private static Icon? CircleCaretDownf;
   public static Icon CircleCaretDown => CircleCaretDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-caret-down");
   public static Icon CaretCircleDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleCaretDown;
   private static Icon? CircleCaretLeftf;
   public static Icon CircleCaretLeft => CircleCaretLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-caret-left");
   public static Icon CaretCircleLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleCaretLeft;
   private static Icon? CircleCaretRightf;
   public static Icon CircleCaretRight => CircleCaretRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-caret-right");
   public static Icon CaretCircleRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleCaretRight;
   private static Icon? CircleCaretUpf;
   public static Icon CircleCaretUp => CircleCaretUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-caret-up");
   public static Icon CaretCircleUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleCaretUp;
   private static Icon? CircleCheckf;
   public static Icon CircleCheck => CircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-check");
   public static Icon CheckCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleCheck;
   private static Icon? CircleChevronDownf;
   public static Icon CircleChevronDown => CircleChevronDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-chevron-down");
   public static Icon ChevronCircleDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleChevronDown;
   private static Icon? CircleChevronLeftf;
   public static Icon CircleChevronLeft => CircleChevronLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-chevron-left");
   public static Icon ChevronCircleLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleChevronLeft;
   private static Icon? CircleChevronRightf;
   public static Icon CircleChevronRight => CircleChevronRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-chevron-right");
   public static Icon ChevronCircleRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleChevronRight;
   private static Icon? CircleChevronUpf;
   public static Icon CircleChevronUp => CircleChevronUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-chevron-up");
   public static Icon ChevronCircleUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleChevronUp;
   private static Icon? CircleDf;
   public static Icon CircleD => CircleDf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-d");
   private static Icon? CircleDashedf;
   public static Icon CircleDashed => CircleDashedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-dashed");
   private static Icon? CircleDividef;
   public static Icon CircleDivide => CircleDividef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-divide");
   private static Icon? CircleDollarf;
   public static Icon CircleDollar => CircleDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-dollar");
   public static Icon DollarCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleDollar;
   public static Icon UsdCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleDollar;
   private static Icon? CircleDollarToSlotf;
   public static Icon CircleDollarToSlot => CircleDollarToSlotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-dollar-to-slot");
   public static Icon Donate => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleDollarToSlot;
   private static Icon? CircleDotf;
   public static Icon CircleDot => CircleDotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-dot");
   public static Icon DotCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleDot;
   private static Icon? CircleDownf;
   public static Icon CircleDown => CircleDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-down");
   public static Icon ArrowAltCircleDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleDown;
   private static Icon? CircleDownLeftf;
   public static Icon CircleDownLeft => CircleDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-down-left");
   private static Icon? CircleDownRightf;
   public static Icon CircleDownRight => CircleDownRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-down-right");
   private static Icon? CircleEf;
   public static Icon CircleE => CircleEf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-e");
   private static Icon? CircleEllipsisf;
   public static Icon CircleEllipsis => CircleEllipsisf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-ellipsis");
   private static Icon? CircleEllipsisVerticalf;
   public static Icon CircleEllipsisVertical => CircleEllipsisVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-ellipsis-vertical");
   private static Icon? CircleEnvelopef;
   public static Icon CircleEnvelope => CircleEnvelopef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-envelope");
   public static Icon EnvelopeCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleEnvelope;
   private static Icon? CircleEurof;
   public static Icon CircleEuro => CircleEurof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-euro");
   private static Icon? CircleExclamationf;
   public static Icon CircleExclamation => CircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-exclamation");
   public static Icon ExclamationCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleExclamation;
   private static Icon? CircleExclamationCheckf;
   public static Icon CircleExclamationCheck => CircleExclamationCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-exclamation-check");
   private static Icon? CircleFf;
   public static Icon CircleF => CircleFf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-f");
   private static Icon? CircleGf;
   public static Icon CircleG => CircleGf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-g");
   private static Icon? CircleHf;
   public static Icon CircleH => CircleHf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-h");
   public static Icon HospitalSymbol => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleH;
   private static Icon? CircleHalff;
   public static Icon CircleHalf => CircleHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-half");
   private static Icon? CircleHalfStrokef;
   public static Icon CircleHalfStroke => CircleHalfStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-half-stroke");
   public static Icon Adjust => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleHalfStroke;
   private static Icon? CircleHeartf;
   public static Icon CircleHeart => CircleHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-heart");
   public static Icon HeartCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleHeart;
   private static Icon? CircleIf;
   public static Icon CircleI => CircleIf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-i");
   private static Icon? CircleInfof;
   public static Icon CircleInfo => CircleInfof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-info");
   public static Icon InfoCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleInfo;
   private static Icon? CircleJf;
   public static Icon CircleJ => CircleJf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-j");
   private static Icon? CircleKf;
   public static Icon CircleK => CircleKf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-k");
   private static Icon? CircleLf;
   public static Icon CircleL => CircleLf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-l");
   private static Icon? CircleLeftf;
   public static Icon CircleLeft => CircleLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-left");
   public static Icon ArrowAltCircleLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleLeft;
   private static Icon? CircleLocationArrowf;
   public static Icon CircleLocationArrow => CircleLocationArrowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-location-arrow");
   public static Icon LocationCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleLocationArrow;
   private static Icon? CircleMf;
   public static Icon CircleM => CircleMf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-m");
   private static Icon? CircleMicrophonef;
   public static Icon CircleMicrophone => CircleMicrophonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-microphone");
   public static Icon MicrophoneCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleMicrophone;
   private static Icon? CircleMicrophoneLinesf;
   public static Icon CircleMicrophoneLines => CircleMicrophoneLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-microphone-lines");
   public static Icon MicrophoneCircleAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleMicrophoneLines;
   private static Icon? CircleMinusf;
   public static Icon CircleMinus => CircleMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-minus");
   public static Icon MinusCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleMinus;
   private static Icon? CircleNf;
   public static Icon CircleN => CircleNf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-n");
   private static Icon? CircleNodesf;
   public static Icon CircleNodes => CircleNodesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-nodes");
   private static Icon? CircleNotchf;
   public static Icon CircleNotch => CircleNotchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-notch");
   private static Icon? CircleOf;
   public static Icon CircleO => CircleOf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-o");
   private static Icon? CirclePf;
   public static Icon CircleP => CirclePf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-p");
   private static Icon? CircleParkingf;
   public static Icon CircleParking => CircleParkingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-parking");
   public static Icon ParkingCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleParking;
   private static Icon? CirclePausef;
   public static Icon CirclePause => CirclePausef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-pause");
   public static Icon PauseCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CirclePause;
   private static Icon? CirclePhonef;
   public static Icon CirclePhone => CirclePhonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-phone");
   public static Icon PhoneCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CirclePhone;
   private static Icon? CirclePhoneFlipf;
   public static Icon CirclePhoneFlip => CirclePhoneFlipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-phone-flip");
   public static Icon PhoneCircleAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CirclePhoneFlip;
   private static Icon? CirclePhoneHangupf;
   public static Icon CirclePhoneHangup => CirclePhoneHangupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-phone-hangup");
   public static Icon PhoneCircleDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CirclePhoneHangup;
   private static Icon? CirclePlayf;
   public static Icon CirclePlay => CirclePlayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-play");
   public static Icon PlayCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CirclePlay;
   private static Icon? CirclePlusf;
   public static Icon CirclePlus => CirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-plus");
   public static Icon PlusCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CirclePlus;
   private static Icon? CircleQf;
   public static Icon CircleQ => CircleQf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-q");
   private static Icon? CircleQuarterf;
   public static Icon CircleQuarter => CircleQuarterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-quarter");
   private static Icon? CircleQuarterStrokef;
   public static Icon CircleQuarterStroke => CircleQuarterStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-quarter-stroke");
   private static Icon? CircleQuartersf;
   public static Icon CircleQuarters => CircleQuartersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-quarters");
   private static Icon? CircleQuestionf;
   public static Icon CircleQuestion => CircleQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-question");
   public static Icon QuestionCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleQuestion;
   private static Icon? CircleRf;
   public static Icon CircleR => CircleRf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-r");
   private static Icon? CircleRadiationf;
   public static Icon CircleRadiation => CircleRadiationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-radiation");
   public static Icon RadiationAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleRadiation;
   private static Icon? CircleRightf;
   public static Icon CircleRight => CircleRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-right");
   public static Icon ArrowAltCircleRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleRight;
   private static Icon? CircleSf;
   public static Icon CircleS => CircleSf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-s");
   private static Icon? CircleSmallf;
   public static Icon CircleSmall => CircleSmallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-small");
   private static Icon? CircleSortf;
   public static Icon CircleSort => CircleSortf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-sort");
   public static Icon SortCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleSort;
   private static Icon? CircleSortDownf;
   public static Icon CircleSortDown => CircleSortDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-sort-down");
   public static Icon SortCircleDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleSortDown;
   private static Icon? CircleSortUpf;
   public static Icon CircleSortUp => CircleSortUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-sort-up");
   public static Icon SortCircleUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleSortUp;
   private static Icon? CircleStarf;
   public static Icon CircleStar => CircleStarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-star");
   public static Icon StarCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleStar;
   private static Icon? CircleSterlingf;
   public static Icon CircleSterling => CircleSterlingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-sterling");
   private static Icon? CircleStopf;
   public static Icon CircleStop => CircleStopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-stop");
   public static Icon StopCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleStop;
   private static Icon? CircleTf;
   public static Icon CircleT => CircleTf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-t");
   private static Icon? CircleThreeQuartersf;
   public static Icon CircleThreeQuarters => CircleThreeQuartersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-three-quarters");
   private static Icon? CircleThreeQuartersStrokef;
   public static Icon CircleThreeQuartersStroke => CircleThreeQuartersStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-three-quarters-stroke");
   private static Icon? CircleTrashf;
   public static Icon CircleTrash => CircleTrashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-trash");
   public static Icon TrashCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleTrash;
   private static Icon? CircleUf;
   public static Icon CircleU => CircleUf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-u");
   private static Icon? CircleUpf;
   public static Icon CircleUp => CircleUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-up");
   public static Icon ArrowAltCircleUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleUp;
   private static Icon? CircleUpLeftf;
   public static Icon CircleUpLeft => CircleUpLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-up-left");
   private static Icon? CircleUpRightf;
   public static Icon CircleUpRight => CircleUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-up-right");
   private static Icon? CircleUserf;
   public static Icon CircleUser => CircleUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-user");
   public static Icon UserCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleUser;
   private static Icon? CircleVf;
   public static Icon CircleV => CircleVf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-v");
   private static Icon? CircleVideof;
   public static Icon CircleVideo => CircleVideof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-video");
   public static Icon VideoCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleVideo;
   private static Icon? CircleWf;
   public static Icon CircleW => CircleWf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-w");
   private static Icon? CircleWaveformLinesf;
   public static Icon CircleWaveformLines => CircleWaveformLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-waveform-lines");
   public static Icon WaveformCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleWaveformLines;
   private static Icon? CircleXf;
   public static Icon CircleX => CircleXf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-x");
   private static Icon? CircleXmarkf;
   public static Icon CircleXmark => CircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-xmark");
   public static Icon TimesCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleXmark;
   public static Icon XmarkCircle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CircleXmark;
   private static Icon? CircleYf;
   public static Icon CircleY => CircleYf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-y");
   private static Icon? CircleYenf;
   public static Icon CircleYen => CircleYenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-yen");
   private static Icon? CircleZf;
   public static Icon CircleZ => CircleZf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circle-z");
   private static Icon? CirclesOverlapf;
   public static Icon CirclesOverlap => CirclesOverlapf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "circles-overlap");
   private static Icon? Citrusf;
   public static Icon Citrus => Citrusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "citrus");
   private static Icon? CitrusSlicef;
   public static Icon CitrusSlice => CitrusSlicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "citrus-slice");
   private static Icon? Cityf;
   public static Icon City => Cityf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "city");
   private static Icon? Clapperboardf;
   public static Icon Clapperboard => Clapperboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clapperboard");
   private static Icon? ClapperboardPlayf;
   public static Icon ClapperboardPlay => ClapperboardPlayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clapperboard-play");
   private static Icon? Clarinetf;
   public static Icon Clarinet => Clarinetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clarinet");
   private static Icon? ClawMarksf;
   public static Icon ClawMarks => ClawMarksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "claw-marks");
   private static Icon? Clipboardf;
   public static Icon Clipboard => Clipboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clipboard");
   private static Icon? ClipboardCheckf;
   public static Icon ClipboardCheck => ClipboardCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clipboard-check");
   private static Icon? ClipboardListf;
   public static Icon ClipboardList => ClipboardListf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clipboard-list");
   private static Icon? ClipboardListCheckf;
   public static Icon ClipboardListCheck => ClipboardListCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clipboard-list-check");
   private static Icon? ClipboardMedicalf;
   public static Icon ClipboardMedical => ClipboardMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clipboard-medical");
   private static Icon? ClipboardPrescriptionf;
   public static Icon ClipboardPrescription => ClipboardPrescriptionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clipboard-prescription");
   private static Icon? ClipboardQuestionf;
   public static Icon ClipboardQuestion => ClipboardQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clipboard-question");
   private static Icon? ClipboardUserf;
   public static Icon ClipboardUser => ClipboardUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clipboard-user");
   private static Icon? Clockf;
   public static Icon Clock => Clockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock");
   public static Icon ClockFour => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Clock;
   private static Icon? ClockDeskf;
   public static Icon ClockDesk => ClockDeskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-desk");
   private static Icon? ClockEightf;
   public static Icon ClockEight => ClockEightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-eight");
   private static Icon? ClockEightThirtyf;
   public static Icon ClockEightThirty => ClockEightThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-eight-thirty");
   private static Icon? ClockElevenf;
   public static Icon ClockEleven => ClockElevenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-eleven");
   private static Icon? ClockElevenThirtyf;
   public static Icon ClockElevenThirty => ClockElevenThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-eleven-thirty");
   private static Icon? ClockFivef;
   public static Icon ClockFive => ClockFivef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-five");
   private static Icon? ClockFiveThirtyf;
   public static Icon ClockFiveThirty => ClockFiveThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-five-thirty");
   private static Icon? ClockFourThirtyf;
   public static Icon ClockFourThirty => ClockFourThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-four-thirty");
   private static Icon? ClockNinef;
   public static Icon ClockNine => ClockNinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-nine");
   private static Icon? ClockNineThirtyf;
   public static Icon ClockNineThirty => ClockNineThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-nine-thirty");
   private static Icon? ClockOnef;
   public static Icon ClockOne => ClockOnef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-one");
   private static Icon? ClockOneThirtyf;
   public static Icon ClockOneThirty => ClockOneThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-one-thirty");
   private static Icon? ClockRotateLeftf;
   public static Icon ClockRotateLeft => ClockRotateLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-rotate-left");
   public static Icon History => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ClockRotateLeft;
   private static Icon? ClockSevenf;
   public static Icon ClockSeven => ClockSevenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-seven");
   private static Icon? ClockSevenThirtyf;
   public static Icon ClockSevenThirty => ClockSevenThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-seven-thirty");
   private static Icon? ClockSixf;
   public static Icon ClockSix => ClockSixf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-six");
   private static Icon? ClockSixThirtyf;
   public static Icon ClockSixThirty => ClockSixThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-six-thirty");
   private static Icon? ClockTenf;
   public static Icon ClockTen => ClockTenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-ten");
   private static Icon? ClockTenThirtyf;
   public static Icon ClockTenThirty => ClockTenThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-ten-thirty");
   private static Icon? ClockThreef;
   public static Icon ClockThree => ClockThreef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-three");
   private static Icon? ClockThreeThirtyf;
   public static Icon ClockThreeThirty => ClockThreeThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-three-thirty");
   private static Icon? ClockTwelvef;
   public static Icon ClockTwelve => ClockTwelvef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-twelve");
   private static Icon? ClockTwelveThirtyf;
   public static Icon ClockTwelveThirty => ClockTwelveThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-twelve-thirty");
   private static Icon? ClockTwof;
   public static Icon ClockTwo => ClockTwof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-two");
   private static Icon? ClockTwoThirtyf;
   public static Icon ClockTwoThirty => ClockTwoThirtyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clock-two-thirty");
   private static Icon? Clonef;
   public static Icon Clone => Clonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clone");
   private static Icon? ClosedCaptioningf;
   public static Icon ClosedCaptioning => ClosedCaptioningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "closed-captioning");
   private static Icon? ClosedCaptioningSlashf;
   public static Icon ClosedCaptioningSlash => ClosedCaptioningSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "closed-captioning-slash");
   private static Icon? ClothesHangerf;
   public static Icon ClothesHanger => ClothesHangerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clothes-hanger");
   private static Icon? Cloudf;
   public static Icon Cloud => Cloudf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud");
   private static Icon? CloudArrowDownf;
   public static Icon CloudArrowDown => CloudArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-arrow-down");
   public static Icon CloudDownload => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CloudArrowDown;
   public static Icon CloudDownloadAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CloudArrowDown;
   private static Icon? CloudArrowUpf;
   public static Icon CloudArrowUp => CloudArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-arrow-up");
   public static Icon CloudUpload => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CloudArrowUp;
   public static Icon CloudUploadAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CloudArrowUp;
   private static Icon? CloudBinaryf;
   public static Icon CloudBinary => CloudBinaryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-binary");
   private static Icon? CloudBoltf;
   public static Icon CloudBolt => CloudBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-bolt");
   public static Icon Thunderstorm => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CloudBolt;
   private static Icon? CloudBoltMoonf;
   public static Icon CloudBoltMoon => CloudBoltMoonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-bolt-moon");
   public static Icon ThunderstormMoon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CloudBoltMoon;
   private static Icon? CloudBoltSunf;
   public static Icon CloudBoltSun => CloudBoltSunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-bolt-sun");
   public static Icon ThunderstormSun => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CloudBoltSun;
   private static Icon? CloudCheckf;
   public static Icon CloudCheck => CloudCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-check");
   private static Icon? CloudDrizzlef;
   public static Icon CloudDrizzle => CloudDrizzlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-drizzle");
   private static Icon? CloudExclamationf;
   public static Icon CloudExclamation => CloudExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-exclamation");
   private static Icon? CloudFogf;
   public static Icon CloudFog => CloudFogf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-fog");
   public static Icon Fog => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CloudFog;
   private static Icon? CloudHailf;
   public static Icon CloudHail => CloudHailf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-hail");
   private static Icon? CloudHailMixedf;
   public static Icon CloudHailMixed => CloudHailMixedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-hail-mixed");
   private static Icon? CloudMeatballf;
   public static Icon CloudMeatball => CloudMeatballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-meatball");
   private static Icon? CloudMinusf;
   public static Icon CloudMinus => CloudMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-minus");
   private static Icon? CloudMoonf;
   public static Icon CloudMoon => CloudMoonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-moon");
   private static Icon? CloudMoonRainf;
   public static Icon CloudMoonRain => CloudMoonRainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-moon-rain");
   private static Icon? CloudMusicf;
   public static Icon CloudMusic => CloudMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-music");
   private static Icon? CloudPlusf;
   public static Icon CloudPlus => CloudPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-plus");
   private static Icon? CloudQuestionf;
   public static Icon CloudQuestion => CloudQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-question");
   private static Icon? CloudRainf;
   public static Icon CloudRain => CloudRainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-rain");
   private static Icon? CloudRainbowf;
   public static Icon CloudRainbow => CloudRainbowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-rainbow");
   private static Icon? CloudShowersf;
   public static Icon CloudShowers => CloudShowersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-showers");
   private static Icon? CloudShowersHeavyf;
   public static Icon CloudShowersHeavy => CloudShowersHeavyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-showers-heavy");
   private static Icon? CloudShowersWaterf;
   public static Icon CloudShowersWater => CloudShowersWaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-showers-water");
   private static Icon? CloudSlashf;
   public static Icon CloudSlash => CloudSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-slash");
   private static Icon? CloudSleetf;
   public static Icon CloudSleet => CloudSleetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-sleet");
   private static Icon? CloudSnowf;
   public static Icon CloudSnow => CloudSnowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-snow");
   private static Icon? CloudSunf;
   public static Icon CloudSun => CloudSunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-sun");
   private static Icon? CloudSunRainf;
   public static Icon CloudSunRain => CloudSunRainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-sun-rain");
   private static Icon? CloudWordf;
   public static Icon CloudWord => CloudWordf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-word");
   private static Icon? CloudXmarkf;
   public static Icon CloudXmark => CloudXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cloud-xmark");
   private static Icon? Cloudsf;
   public static Icon Clouds => Cloudsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clouds");
   private static Icon? CloudsMoonf;
   public static Icon CloudsMoon => CloudsMoonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clouds-moon");
   private static Icon? CloudsSunf;
   public static Icon CloudsSun => CloudsSunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clouds-sun");
   private static Icon? Cloverf;
   public static Icon Clover => Cloverf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "clover");
   private static Icon? Clubf;
   public static Icon Club => Clubf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "club");
   private static Icon? Coconutf;
   public static Icon Coconut => Coconutf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coconut");
   private static Icon? Codef;
   public static Icon Code => Codef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code");
   private static Icon? CodeBranchf;
   public static Icon CodeBranch => CodeBranchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-branch");
   private static Icon? CodeCommitf;
   public static Icon CodeCommit => CodeCommitf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-commit");
   private static Icon? CodeComparef;
   public static Icon CodeCompare => CodeComparef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-compare");
   private static Icon? CodeForkf;
   public static Icon CodeFork => CodeForkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-fork");
   private static Icon? CodeMergef;
   public static Icon CodeMerge => CodeMergef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-merge");
   private static Icon? CodePullRequestf;
   public static Icon CodePullRequest => CodePullRequestf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-pull-request");
   private static Icon? CodePullRequestClosedf;
   public static Icon CodePullRequestClosed => CodePullRequestClosedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-pull-request-closed");
   private static Icon? CodePullRequestDraftf;
   public static Icon CodePullRequestDraft => CodePullRequestDraftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-pull-request-draft");
   private static Icon? CodeSimplef;
   public static Icon CodeSimple => CodeSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "code-simple");
   private static Icon? CoffeeBeanf;
   public static Icon CoffeeBean => CoffeeBeanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coffee-bean");
   private static Icon? CoffeeBeansf;
   public static Icon CoffeeBeans => CoffeeBeansf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coffee-beans");
   private static Icon? CoffeePotf;
   public static Icon CoffeePot => CoffeePotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coffee-pot");
   private static Icon? Coffinf;
   public static Icon Coffin => Coffinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coffin");
   private static Icon? CoffinCrossf;
   public static Icon CoffinCross => CoffinCrossf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coffin-cross");
   private static Icon? Coinf;
   public static Icon Coin => Coinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coin");
   private static Icon? CoinBlankf;
   public static Icon CoinBlank => CoinBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coin-blank");
   private static Icon? CoinFrontf;
   public static Icon CoinFront => CoinFrontf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coin-front");
   private static Icon? CoinVerticalf;
   public static Icon CoinVertical => CoinVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coin-vertical");
   private static Icon? Coinsf;
   public static Icon Coins => Coinsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "coins");
   private static Icon? Colonf;
   public static Icon Colon => Colonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "colon");
   private static Icon? ColonSignf;
   public static Icon ColonSign => ColonSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "colon-sign");
   private static Icon? Columns3f;
   public static Icon Columns3 => Columns3f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "columns-3");
   private static Icon? Cometf;
   public static Icon Comet => Cometf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comet");
   private static Icon? Commaf;
   public static Icon Comma => Commaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comma");
   private static Icon? Commandf;
   public static Icon Command => Commandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "command");
   private static Icon? Commentf;
   public static Icon Comment => Commentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment");
   private static Icon? CommentArrowDownf;
   public static Icon CommentArrowDown => CommentArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-arrow-down");
   private static Icon? CommentArrowUpf;
   public static Icon CommentArrowUp => CommentArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-arrow-up");
   private static Icon? CommentArrowUpRightf;
   public static Icon CommentArrowUpRight => CommentArrowUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-arrow-up-right");
   private static Icon? CommentCaptionsf;
   public static Icon CommentCaptions => CommentCaptionsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-captions");
   private static Icon? CommentCheckf;
   public static Icon CommentCheck => CommentCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-check");
   private static Icon? CommentCodef;
   public static Icon CommentCode => CommentCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-code");
   private static Icon? CommentDollarf;
   public static Icon CommentDollar => CommentDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-dollar");
   private static Icon? CommentDotsf;
   public static Icon CommentDots => CommentDotsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-dots");
   public static Icon Commenting => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CommentDots;
   private static Icon? CommentExclamationf;
   public static Icon CommentExclamation => CommentExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-exclamation");
   private static Icon? CommentHeartf;
   public static Icon CommentHeart => CommentHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-heart");
   private static Icon? CommentImagef;
   public static Icon CommentImage => CommentImagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-image");
   private static Icon? CommentLinesf;
   public static Icon CommentLines => CommentLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-lines");
   private static Icon? CommentMedicalf;
   public static Icon CommentMedical => CommentMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-medical");
   private static Icon? CommentMiddlef;
   public static Icon CommentMiddle => CommentMiddlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-middle");
   private static Icon? CommentMiddleTopf;
   public static Icon CommentMiddleTop => CommentMiddleTopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-middle-top");
   private static Icon? CommentMinusf;
   public static Icon CommentMinus => CommentMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-minus");
   private static Icon? CommentMusicf;
   public static Icon CommentMusic => CommentMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-music");
   private static Icon? CommentPenf;
   public static Icon CommentPen => CommentPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-pen");
   public static Icon CommentEdit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CommentPen;
   private static Icon? CommentPlusf;
   public static Icon CommentPlus => CommentPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-plus");
   private static Icon? CommentQuestionf;
   public static Icon CommentQuestion => CommentQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-question");
   private static Icon? CommentQuotef;
   public static Icon CommentQuote => CommentQuotef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-quote");
   private static Icon? CommentSlashf;
   public static Icon CommentSlash => CommentSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-slash");
   private static Icon? CommentSmilef;
   public static Icon CommentSmile => CommentSmilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-smile");
   private static Icon? CommentSmsf;
   public static Icon CommentSms => CommentSmsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-sms");
   public static Icon Sms => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CommentSms;
   private static Icon? CommentTextf;
   public static Icon CommentText => CommentTextf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-text");
   private static Icon? CommentXmarkf;
   public static Icon CommentXmark => CommentXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comment-xmark");
   public static Icon CommentTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CommentXmark;
   private static Icon? Commentsf;
   public static Icon Comments => Commentsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comments");
   private static Icon? CommentsDollarf;
   public static Icon CommentsDollar => CommentsDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comments-dollar");
   private static Icon? CommentsQuestionf;
   public static Icon CommentsQuestion => CommentsQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comments-question");
   private static Icon? CommentsQuestionCheckf;
   public static Icon CommentsQuestionCheck => CommentsQuestionCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "comments-question-check");
   private static Icon? CompactDiscf;
   public static Icon CompactDisc => CompactDiscf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "compact-disc");
   private static Icon? Compassf;
   public static Icon Compass => Compassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "compass");
   private static Icon? CompassDraftingf;
   public static Icon CompassDrafting => CompassDraftingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "compass-drafting");
   public static Icon DraftingCompass => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CompassDrafting;
   private static Icon? CompassSlashf;
   public static Icon CompassSlash => CompassSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "compass-slash");
   private static Icon? Compressf;
   public static Icon Compress => Compressf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "compress");
   private static Icon? CompressWidef;
   public static Icon CompressWide => CompressWidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "compress-wide");
   private static Icon? Computerf;
   public static Icon Computer => Computerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "computer");
   private static Icon? ComputerClassicf;
   public static Icon ComputerClassic => ComputerClassicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "computer-classic");
   private static Icon? ComputerMousef;
   public static Icon ComputerMouse => ComputerMousef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "computer-mouse");
   public static Icon Mouse => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ComputerMouse;
   private static Icon? ComputerMouseScrollwheelf;
   public static Icon ComputerMouseScrollwheel => ComputerMouseScrollwheelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "computer-mouse-scrollwheel");
   public static Icon MouseAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ComputerMouseScrollwheel;
   private static Icon? ComputerSpeakerf;
   public static Icon ComputerSpeaker => ComputerSpeakerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "computer-speaker");
   private static Icon? ContainerStoragef;
   public static Icon ContainerStorage => ContainerStoragef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "container-storage");
   private static Icon? ConveyorBeltf;
   public static Icon ConveyorBelt => ConveyorBeltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "conveyor-belt");
   private static Icon? ConveyorBeltArmf;
   public static Icon ConveyorBeltArm => ConveyorBeltArmf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "conveyor-belt-arm");
   private static Icon? ConveyorBeltBoxesf;
   public static Icon ConveyorBeltBoxes => ConveyorBeltBoxesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "conveyor-belt-boxes");
   public static Icon ConveyorBeltAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ConveyorBeltBoxes;
   private static Icon? ConveyorBeltEmptyf;
   public static Icon ConveyorBeltEmpty => ConveyorBeltEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "conveyor-belt-empty");
   private static Icon? Cookief;
   public static Icon Cookie => Cookief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cookie");
   private static Icon? CookieBitef;
   public static Icon CookieBite => CookieBitef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cookie-bite");
   private static Icon? Copyf;
   public static Icon Copy => Copyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "copy");
   private static Icon? Copyrightf;
   public static Icon Copyright => Copyrightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "copyright");
   private static Icon? Cornf;
   public static Icon Corn => Cornf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "corn");
   private static Icon? Cornerf;
   public static Icon Corner => Cornerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "corner");
   private static Icon? Couchf;
   public static Icon Couch => Couchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "couch");
   private static Icon? CourtSportf;
   public static Icon CourtSport => CourtSportf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "court-sport");
   private static Icon? Cowf;
   public static Icon Cow => Cowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cow");
   private static Icon? Cowbellf;
   public static Icon Cowbell => Cowbellf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cowbell");
   private static Icon? CowbellCirclePlusf;
   public static Icon CowbellCirclePlus => CowbellCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cowbell-circle-plus");
   public static Icon CowbellMore => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CowbellCirclePlus;
   private static Icon? Crabf;
   public static Icon Crab => Crabf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crab");
   private static Icon? CrateApplef;
   public static Icon CrateApple => CrateApplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crate-apple");
   public static Icon AppleCrate => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CrateApple;
   private static Icon? CrateEmptyf;
   public static Icon CrateEmpty => CrateEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crate-empty");
   private static Icon? CreditCardf;
   public static Icon CreditCard => CreditCardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "credit-card");
   public static Icon CreditCardAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CreditCard;
   private static Icon? CreditCardBlankf;
   public static Icon CreditCardBlank => CreditCardBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "credit-card-blank");
   private static Icon? CreditCardFrontf;
   public static Icon CreditCardFront => CreditCardFrontf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "credit-card-front");
   private static Icon? CricketBatBallf;
   public static Icon CricketBatBall => CricketBatBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cricket-bat-ball");
   public static Icon Cricket => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CricketBatBall;
   private static Icon? Croissantf;
   public static Icon Croissant => Croissantf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "croissant");
   private static Icon? Cropf;
   public static Icon Crop => Cropf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crop");
   private static Icon? CropSimplef;
   public static Icon CropSimple => CropSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crop-simple");
   public static Icon CropAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CropSimple;
   private static Icon? Crossf;
   public static Icon Cross => Crossf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cross");
   private static Icon? Crosshairsf;
   public static Icon Crosshairs => Crosshairsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crosshairs");
   private static Icon? CrosshairsSimplef;
   public static Icon CrosshairsSimple => CrosshairsSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crosshairs-simple");
   private static Icon? Crowf;
   public static Icon Crow => Crowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crow");
   private static Icon? Crownf;
   public static Icon Crown => Crownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crown");
   private static Icon? Crutchf;
   public static Icon Crutch => Crutchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crutch");
   private static Icon? Crutchesf;
   public static Icon Crutches => Crutchesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crutches");
   private static Icon? CruzeiroSignf;
   public static Icon CruzeiroSign => CruzeiroSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cruzeiro-sign");
   private static Icon? CrystalBallf;
   public static Icon CrystalBall => CrystalBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "crystal-ball");
   private static Icon? Cubef;
   public static Icon Cube => Cubef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cube");
   private static Icon? Cubesf;
   public static Icon Cubes => Cubesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cubes");
   private static Icon? CubesStackedf;
   public static Icon CubesStacked => CubesStackedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cubes-stacked");
   private static Icon? Cucumberf;
   public static Icon Cucumber => Cucumberf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cucumber");
   private static Icon? CupStrawf;
   public static Icon CupStraw => CupStrawf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cup-straw");
   private static Icon? CupStrawSwooshf;
   public static Icon CupStrawSwoosh => CupStrawSwooshf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cup-straw-swoosh");
   private static Icon? CupTogof;
   public static Icon CupTogo => CupTogof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cup-togo");
   public static Icon CoffeeTogo => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CupTogo;
   private static Icon? Cupcakef;
   public static Icon Cupcake => Cupcakef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "cupcake");
   private static Icon? CurlingStonef;
   public static Icon CurlingStone => CurlingStonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "curling-stone");
   public static Icon Curling => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.CurlingStone;
   private static Icon? Custardf;
   public static Icon Custard => Custardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "custard");
   private static Icon? Df;
   public static Icon D => Df ??= new Icon(IconFamily.Sharp, IconStyle.Light, "d");
   private static Icon? Daggerf;
   public static Icon Dagger => Daggerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dagger");
   private static Icon? Dashf;
   public static Icon Dash => Dashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dash");
   public static Icon MinusLarge => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Dash;
   private static Icon? Databasef;
   public static Icon Database => Databasef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "database");
   private static Icon? Deerf;
   public static Icon Deer => Deerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "deer");
   private static Icon? DeerRudolphf;
   public static Icon DeerRudolph => DeerRudolphf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "deer-rudolph");
   private static Icon? DeleteLeftf;
   public static Icon DeleteLeft => DeleteLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "delete-left");
   public static Icon Backspace => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DeleteLeft;
   private static Icon? DeleteRightf;
   public static Icon DeleteRight => DeleteRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "delete-right");
   private static Icon? Democratf;
   public static Icon Democrat => Democratf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "democrat");
   private static Icon? Desktopf;
   public static Icon Desktop => Desktopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "desktop");
   public static Icon DesktopAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Desktop;
   private static Icon? DesktopArrowDownf;
   public static Icon DesktopArrowDown => DesktopArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "desktop-arrow-down");
   private static Icon? Dharmachakraf;
   public static Icon Dharmachakra => Dharmachakraf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dharmachakra");
   private static Icon? DiagramCellsf;
   public static Icon DiagramCells => DiagramCellsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-cells");
   private static Icon? DiagramLeanCanvasf;
   public static Icon DiagramLeanCanvas => DiagramLeanCanvasf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-lean-canvas");
   private static Icon? DiagramNestedf;
   public static Icon DiagramNested => DiagramNestedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-nested");
   private static Icon? DiagramNextf;
   public static Icon DiagramNext => DiagramNextf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-next");
   private static Icon? DiagramPredecessorf;
   public static Icon DiagramPredecessor => DiagramPredecessorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-predecessor");
   private static Icon? DiagramPreviousf;
   public static Icon DiagramPrevious => DiagramPreviousf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-previous");
   private static Icon? DiagramProjectf;
   public static Icon DiagramProject => DiagramProjectf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-project");
   public static Icon ProjectDiagram => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DiagramProject;
   private static Icon? DiagramSankeyf;
   public static Icon DiagramSankey => DiagramSankeyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-sankey");
   private static Icon? DiagramSubtaskf;
   public static Icon DiagramSubtask => DiagramSubtaskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-subtask");
   private static Icon? DiagramSuccessorf;
   public static Icon DiagramSuccessor => DiagramSuccessorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-successor");
   private static Icon? DiagramVennf;
   public static Icon DiagramVenn => DiagramVennf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diagram-venn");
   private static Icon? Dialf;
   public static Icon Dial => Dialf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dial");
   public static Icon DialMedHigh => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Dial;
   private static Icon? DialHighf;
   public static Icon DialHigh => DialHighf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dial-high");
   private static Icon? DialLowf;
   public static Icon DialLow => DialLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dial-low");
   private static Icon? DialMaxf;
   public static Icon DialMax => DialMaxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dial-max");
   private static Icon? DialMedf;
   public static Icon DialMed => DialMedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dial-med");
   private static Icon? DialMedLowf;
   public static Icon DialMedLow => DialMedLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dial-med-low");
   private static Icon? DialMinf;
   public static Icon DialMin => DialMinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dial-min");
   private static Icon? DialOfff;
   public static Icon DialOff => DialOfff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dial-off");
   private static Icon? Diamondf;
   public static Icon Diamond => Diamondf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diamond");
   private static Icon? DiamondExclamationf;
   public static Icon DiamondExclamation => DiamondExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diamond-exclamation");
   private static Icon? DiamondHalff;
   public static Icon DiamondHalf => DiamondHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diamond-half");
   private static Icon? DiamondHalfStrokef;
   public static Icon DiamondHalfStroke => DiamondHalfStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diamond-half-stroke");
   private static Icon? DiamondTurnRightf;
   public static Icon DiamondTurnRight => DiamondTurnRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diamond-turn-right");
   public static Icon Directions => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DiamondTurnRight;
   private static Icon? Dicef;
   public static Icon Dice => Dicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice");
   private static Icon? DiceD10f;
   public static Icon DiceD10 => DiceD10f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-d10");
   private static Icon? DiceD12f;
   public static Icon DiceD12 => DiceD12f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-d12");
   private static Icon? DiceD20f;
   public static Icon DiceD20 => DiceD20f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-d20");
   private static Icon? DiceD4f;
   public static Icon DiceD4 => DiceD4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-d4");
   private static Icon? DiceD6f;
   public static Icon DiceD6 => DiceD6f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-d6");
   private static Icon? DiceD8f;
   public static Icon DiceD8 => DiceD8f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-d8");
   private static Icon? DiceFivef;
   public static Icon DiceFive => DiceFivef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-five");
   private static Icon? DiceFourf;
   public static Icon DiceFour => DiceFourf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-four");
   private static Icon? DiceOnef;
   public static Icon DiceOne => DiceOnef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-one");
   private static Icon? DiceSixf;
   public static Icon DiceSix => DiceSixf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-six");
   private static Icon? DiceThreef;
   public static Icon DiceThree => DiceThreef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-three");
   private static Icon? DiceTwof;
   public static Icon DiceTwo => DiceTwof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dice-two");
   private static Icon? Dinosaurf;
   public static Icon Dinosaur => Dinosaurf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dinosaur");
   private static Icon? Diplomaf;
   public static Icon Diploma => Diplomaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "diploma");
   public static Icon ScrollRibbon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Diploma;
   private static Icon? DiscDrivef;
   public static Icon DiscDrive => DiscDrivef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "disc-drive");
   private static Icon? Diseasef;
   public static Icon Disease => Diseasef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "disease");
   private static Icon? Displayf;
   public static Icon Display => Displayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "display");
   private static Icon? DisplayArrowDownf;
   public static Icon DisplayArrowDown => DisplayArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "display-arrow-down");
   private static Icon? DisplayChartUpf;
   public static Icon DisplayChartUp => DisplayChartUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "display-chart-up");
   private static Icon? DisplayChartUpCircleCurrencyf;
   public static Icon DisplayChartUpCircleCurrency => DisplayChartUpCircleCurrencyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "display-chart-up-circle-currency");
   private static Icon? DisplayChartUpCircleDollarf;
   public static Icon DisplayChartUpCircleDollar => DisplayChartUpCircleDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "display-chart-up-circle-dollar");
   private static Icon? DisplayCodef;
   public static Icon DisplayCode => DisplayCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "display-code");
   public static Icon DesktopCode => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DisplayCode;
   private static Icon? DisplayMedicalf;
   public static Icon DisplayMedical => DisplayMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "display-medical");
   public static Icon DesktopMedical => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DisplayMedical;
   private static Icon? DisplaySlashf;
   public static Icon DisplaySlash => DisplaySlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "display-slash");
   public static Icon DesktopSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DisplaySlash;
   private static Icon? DistributeSpacingHorizontalf;
   public static Icon DistributeSpacingHorizontal => DistributeSpacingHorizontalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "distribute-spacing-horizontal");
   private static Icon? DistributeSpacingVerticalf;
   public static Icon DistributeSpacingVertical => DistributeSpacingVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "distribute-spacing-vertical");
   private static Icon? Dittof;
   public static Icon Ditto => Dittof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ditto");
   private static Icon? Dividef;
   public static Icon Divide => Dividef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "divide");
   private static Icon? Dnaf;
   public static Icon Dna => Dnaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dna");
   private static Icon? DoNotEnterf;
   public static Icon DoNotEnter => DoNotEnterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "do-not-enter");
   private static Icon? Dogf;
   public static Icon Dog => Dogf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dog");
   private static Icon? DogLeashedf;
   public static Icon DogLeashed => DogLeashedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dog-leashed");
   private static Icon? DollarSignf;
   public static Icon DollarSign => DollarSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dollar-sign");
   public static Icon Dollar => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DollarSign;
   public static Icon Usd => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DollarSign;
   private static Icon? Dollyf;
   public static Icon Dolly => Dollyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dolly");
   public static Icon DollyBox => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Dolly;
   private static Icon? DollyEmptyf;
   public static Icon DollyEmpty => DollyEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dolly-empty");
   private static Icon? Dolphinf;
   public static Icon Dolphin => Dolphinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dolphin");
   private static Icon? DongSignf;
   public static Icon DongSign => DongSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dong-sign");
   private static Icon? Donutf;
   public static Icon Donut => Donutf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "donut");
   public static Icon Doughnut => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Donut;
   private static Icon? DoorClosedf;
   public static Icon DoorClosed => DoorClosedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "door-closed");
   private static Icon? DoorOpenf;
   public static Icon DoorOpen => DoorOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "door-open");
   private static Icon? Dovef;
   public static Icon Dove => Dovef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dove");
   private static Icon? Downf;
   public static Icon Down => Downf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down");
   public static Icon ArrowAltDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Down;
   private static Icon? DownFromDottedLinef;
   public static Icon DownFromDottedLine => DownFromDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-from-dotted-line");
   private static Icon? DownFromLinef;
   public static Icon DownFromLine => DownFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-from-line");
   public static Icon ArrowAltFromTop => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DownFromLine;
   private static Icon? DownLeftf;
   public static Icon DownLeft => DownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-left");
   private static Icon? DownLeftAndUpRightToCenterf;
   public static Icon DownLeftAndUpRightToCenter => DownLeftAndUpRightToCenterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-left-and-up-right-to-center");
   public static Icon CompressAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DownLeftAndUpRightToCenter;
   private static Icon? DownLongf;
   public static Icon DownLong => DownLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-long");
   public static Icon LongArrowAltDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DownLong;
   private static Icon? DownRightf;
   public static Icon DownRight => DownRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-right");
   private static Icon? DownToBracketf;
   public static Icon DownToBracket => DownToBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-to-bracket");
   private static Icon? DownToDottedLinef;
   public static Icon DownToDottedLine => DownToDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-to-dotted-line");
   private static Icon? DownToLinef;
   public static Icon DownToLine => DownToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "down-to-line");
   public static Icon ArrowAltToBottom => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DownToLine;
   private static Icon? Downloadf;
   public static Icon Download => Downloadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "download");
   private static Icon? Dragonf;
   public static Icon Dragon => Dragonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dragon");
   private static Icon? DrawCirclef;
   public static Icon DrawCircle => DrawCirclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "draw-circle");
   private static Icon? DrawPolygonf;
   public static Icon DrawPolygon => DrawPolygonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "draw-polygon");
   private static Icon? DrawSquaref;
   public static Icon DrawSquare => DrawSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "draw-square");
   private static Icon? Dreidelf;
   public static Icon Dreidel => Dreidelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dreidel");
   private static Icon? Dronef;
   public static Icon Drone => Dronef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "drone");
   private static Icon? DroneFrontf;
   public static Icon DroneFront => DroneFrontf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "drone-front");
   public static Icon DroneAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DroneFront;
   private static Icon? Dropletf;
   public static Icon Droplet => Dropletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "droplet");
   public static Icon Tint => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Droplet;
   private static Icon? DropletDegreef;
   public static Icon DropletDegree => DropletDegreef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "droplet-degree");
   public static Icon Dewpoint => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DropletDegree;
   private static Icon? DropletPercentf;
   public static Icon DropletPercent => DropletPercentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "droplet-percent");
   public static Icon Humidity => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DropletPercent;
   private static Icon? DropletSlashf;
   public static Icon DropletSlash => DropletSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "droplet-slash");
   public static Icon TintSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DropletSlash;
   private static Icon? Drumf;
   public static Icon Drum => Drumf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "drum");
   private static Icon? DrumSteelpanf;
   public static Icon DrumSteelpan => DrumSteelpanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "drum-steelpan");
   private static Icon? Drumstickf;
   public static Icon Drumstick => Drumstickf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "drumstick");
   private static Icon? DrumstickBitef;
   public static Icon DrumstickBite => DrumstickBitef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "drumstick-bite");
   private static Icon? Dryerf;
   public static Icon Dryer => Dryerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dryer");
   private static Icon? DryerHeatf;
   public static Icon DryerHeat => DryerHeatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dryer-heat");
   public static Icon DryerAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.DryerHeat;
   private static Icon? Duckf;
   public static Icon Duck => Duckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "duck");
   private static Icon? Dumbbellf;
   public static Icon Dumbbell => Dumbbellf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dumbbell");
   private static Icon? Dumpsterf;
   public static Icon Dumpster => Dumpsterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dumpster");
   private static Icon? DumpsterFiref;
   public static Icon DumpsterFire => DumpsterFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dumpster-fire");
   private static Icon? Dungeonf;
   public static Icon Dungeon => Dungeonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "dungeon");
   private static Icon? Ef;
   public static Icon E => Ef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "e");
   private static Icon? Earf;
   public static Icon Ear => Earf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ear");
   private static Icon? EarDeaff;
   public static Icon EarDeaf => EarDeaff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ear-deaf");
   public static Icon Deaf => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarDeaf;
   public static Icon Deafness => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarDeaf;
   public static Icon HardOfHearing => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarDeaf;
   private static Icon? EarListenf;
   public static Icon EarListen => EarListenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ear-listen");
   public static Icon AssistiveListeningSystems => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarListen;
   private static Icon? EarMuffsf;
   public static Icon EarMuffs => EarMuffsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ear-muffs");
   private static Icon? EarthAfricaf;
   public static Icon EarthAfrica => EarthAfricaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "earth-africa");
   public static Icon GlobeAfrica => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarthAfrica;
   private static Icon? EarthAmericasf;
   public static Icon EarthAmericas => EarthAmericasf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "earth-americas");
   public static Icon Earth => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarthAmericas;
   public static Icon EarthAmerica => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarthAmericas;
   public static Icon GlobeAmericas => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarthAmericas;
   private static Icon? EarthAsiaf;
   public static Icon EarthAsia => EarthAsiaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "earth-asia");
   public static Icon GlobeAsia => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarthAsia;
   private static Icon? EarthEuropef;
   public static Icon EarthEurope => EarthEuropef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "earth-europe");
   public static Icon GlobeEurope => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarthEurope;
   private static Icon? EarthOceaniaf;
   public static Icon EarthOceania => EarthOceaniaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "earth-oceania");
   public static Icon GlobeOceania => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EarthOceania;
   private static Icon? Eclipsef;
   public static Icon Eclipse => Eclipsef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eclipse");
   private static Icon? Eggf;
   public static Icon Egg => Eggf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "egg");
   private static Icon? EggFriedf;
   public static Icon EggFried => EggFriedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "egg-fried");
   private static Icon? Eggplantf;
   public static Icon Eggplant => Eggplantf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eggplant");
   private static Icon? Ejectf;
   public static Icon Eject => Ejectf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eject");
   private static Icon? Elephantf;
   public static Icon Elephant => Elephantf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "elephant");
   private static Icon? Elevatorf;
   public static Icon Elevator => Elevatorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "elevator");
   private static Icon? Ellipsisf;
   public static Icon Ellipsis => Ellipsisf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ellipsis");
   public static Icon EllipsisH => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Ellipsis;
   private static Icon? EllipsisStrokef;
   public static Icon EllipsisStroke => EllipsisStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ellipsis-stroke");
   public static Icon EllipsisHAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EllipsisStroke;
   private static Icon? EllipsisStrokeVerticalf;
   public static Icon EllipsisStrokeVertical => EllipsisStrokeVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ellipsis-stroke-vertical");
   public static Icon EllipsisVAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EllipsisStrokeVertical;
   private static Icon? EllipsisVerticalf;
   public static Icon EllipsisVertical => EllipsisVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ellipsis-vertical");
   public static Icon EllipsisV => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EllipsisVertical;
   private static Icon? EmptySetf;
   public static Icon EmptySet => EmptySetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "empty-set");
   private static Icon? Enginef;
   public static Icon Engine => Enginef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "engine");
   private static Icon? EngineWarningf;
   public static Icon EngineWarning => EngineWarningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "engine-warning");
   public static Icon EngineExclamation => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EngineWarning;
   private static Icon? Envelopef;
   public static Icon Envelope => Envelopef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "envelope");
   private static Icon? EnvelopeCircleCheckf;
   public static Icon EnvelopeCircleCheck => EnvelopeCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "envelope-circle-check");
   private static Icon? EnvelopeDotf;
   public static Icon EnvelopeDot => EnvelopeDotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "envelope-dot");
   public static Icon EnvelopeBadge => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EnvelopeDot;
   private static Icon? EnvelopeOpenf;
   public static Icon EnvelopeOpen => EnvelopeOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "envelope-open");
   private static Icon? EnvelopeOpenDollarf;
   public static Icon EnvelopeOpenDollar => EnvelopeOpenDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "envelope-open-dollar");
   private static Icon? EnvelopeOpenTextf;
   public static Icon EnvelopeOpenText => EnvelopeOpenTextf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "envelope-open-text");
   private static Icon? Envelopesf;
   public static Icon Envelopes => Envelopesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "envelopes");
   private static Icon? EnvelopesBulkf;
   public static Icon EnvelopesBulk => EnvelopesBulkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "envelopes-bulk");
   public static Icon MailBulk => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EnvelopesBulk;
   private static Icon? Equalf;
   public static Icon Equal => Equalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "equals");
   private static Icon? Eraserf;
   public static Icon Eraser => Eraserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eraser");
   private static Icon? Escalatorf;
   public static Icon Escalator => Escalatorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "escalator");
   private static Icon? Ethernetf;
   public static Icon Ethernet => Ethernetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ethernet");
   private static Icon? EuroSignf;
   public static Icon EuroSign => EuroSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "euro-sign");
   public static Icon Eur => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EuroSign;
   public static Icon Euro => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EuroSign;
   private static Icon? Excavatorf;
   public static Icon Excavator => Excavatorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "excavator");
   private static Icon? Exclamationf;
   public static Icon Exclamation => Exclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "exclamation");
   private static Icon? Expandf;
   public static Icon Expand => Expandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "expand");
   private static Icon? ExpandWidef;
   public static Icon ExpandWide => ExpandWidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "expand-wide");
   private static Icon? Explosionf;
   public static Icon Explosion => Explosionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "explosion");
   private static Icon? Eyef;
   public static Icon Eye => Eyef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eye");
   private static Icon? EyeDropperf;
   public static Icon EyeDropper => EyeDropperf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eye-dropper");
   public static Icon EyeDropperEmpty => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EyeDropper;
   public static Icon Eyedropper => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EyeDropper;
   private static Icon? EyeDropperFullf;
   public static Icon EyeDropperFull => EyeDropperFullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eye-dropper-full");
   private static Icon? EyeDropperHalff;
   public static Icon EyeDropperHalf => EyeDropperHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eye-dropper-half");
   private static Icon? EyeEvilf;
   public static Icon EyeEvil => EyeEvilf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eye-evil");
   private static Icon? EyeLowVisionf;
   public static Icon EyeLowVision => EyeLowVisionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eye-low-vision");
   public static Icon LowVision => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.EyeLowVision;
   private static Icon? EyeSlashf;
   public static Icon EyeSlash => EyeSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eye-slash");
   private static Icon? Eyesf;
   public static Icon Eyes => Eyesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "eyes");
   private static Icon? Ff;
   public static Icon F => Ff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "f");
   private static Icon? FaceAngryf;
   public static Icon FaceAngry => FaceAngryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-angry");
   public static Icon Angry => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceAngry;
   private static Icon? FaceAngryHornsf;
   public static Icon FaceAngryHorns => FaceAngryHornsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-angry-horns");
   private static Icon? FaceAnguishedf;
   public static Icon FaceAnguished => FaceAnguishedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-anguished");
   private static Icon? FaceAnxiousSweatf;
   public static Icon FaceAnxiousSweat => FaceAnxiousSweatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-anxious-sweat");
   private static Icon? FaceAstonishedf;
   public static Icon FaceAstonished => FaceAstonishedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-astonished");
   private static Icon? FaceAwesomef;
   public static Icon FaceAwesome => FaceAwesomef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-awesome");
   public static Icon GaveDandy => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceAwesome;
   private static Icon? FaceBeamHandOverMouthf;
   public static Icon FaceBeamHandOverMouth => FaceBeamHandOverMouthf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-beam-hand-over-mouth");
   private static Icon? FaceCloudsf;
   public static Icon FaceClouds => FaceCloudsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-clouds");
   private static Icon? FaceConfoundedf;
   public static Icon FaceConfounded => FaceConfoundedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-confounded");
   private static Icon? FaceConfusedf;
   public static Icon FaceConfused => FaceConfusedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-confused");
   private static Icon? FaceCowboyHatf;
   public static Icon FaceCowboyHat => FaceCowboyHatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-cowboy-hat");
   private static Icon? FaceDiagonalMouthf;
   public static Icon FaceDiagonalMouth => FaceDiagonalMouthf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-diagonal-mouth");
   private static Icon? FaceDisappointedf;
   public static Icon FaceDisappointed => FaceDisappointedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-disappointed");
   private static Icon? FaceDisguisef;
   public static Icon FaceDisguise => FaceDisguisef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-disguise");
   private static Icon? FaceDizzyf;
   public static Icon FaceDizzy => FaceDizzyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-dizzy");
   public static Icon Dizzy => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceDizzy;
   private static Icon? FaceDottedf;
   public static Icon FaceDotted => FaceDottedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-dotted");
   private static Icon? FaceDowncastSweatf;
   public static Icon FaceDowncastSweat => FaceDowncastSweatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-downcast-sweat");
   private static Icon? FaceDroolingf;
   public static Icon FaceDrooling => FaceDroolingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-drooling");
   private static Icon? FaceExhalingf;
   public static Icon FaceExhaling => FaceExhalingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-exhaling");
   private static Icon? FaceExplodef;
   public static Icon FaceExplode => FaceExplodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-explode");
   public static Icon ExplodingHead => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceExplode;
   private static Icon? FaceExpressionlessf;
   public static Icon FaceExpressionless => FaceExpressionlessf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-expressionless");
   private static Icon? FaceEyesXmarksf;
   public static Icon FaceEyesXmarks => FaceEyesXmarksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-eyes-xmarks");
   private static Icon? FaceFearfulf;
   public static Icon FaceFearful => FaceFearfulf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-fearful");
   private static Icon? FaceFlushedf;
   public static Icon FaceFlushed => FaceFlushedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-flushed");
   public static Icon Flushed => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceFlushed;
   private static Icon? FaceFrownf;
   public static Icon FaceFrown => FaceFrownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-frown");
   public static Icon Frown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceFrown;
   private static Icon? FaceFrownOpenf;
   public static Icon FaceFrownOpen => FaceFrownOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-frown-open");
   public static Icon FrownOpen => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceFrownOpen;
   private static Icon? FaceFrownSlightf;
   public static Icon FaceFrownSlight => FaceFrownSlightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-frown-slight");
   private static Icon? FaceGlassesf;
   public static Icon FaceGlasses => FaceGlassesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-glasses");
   private static Icon? FaceGrimacef;
   public static Icon FaceGrimace => FaceGrimacef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grimace");
   public static Icon Grimace => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrimace;
   private static Icon? FaceGrinf;
   public static Icon FaceGrin => FaceGrinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin");
   public static Icon Grin => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrin;
   private static Icon? FaceGrinBeamf;
   public static Icon FaceGrinBeam => FaceGrinBeamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-beam");
   public static Icon GrinBeam => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinBeam;
   private static Icon? FaceGrinBeamSweatf;
   public static Icon FaceGrinBeamSweat => FaceGrinBeamSweatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-beam-sweat");
   public static Icon GrinBeamSweat => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinBeamSweat;
   private static Icon? FaceGrinHeartsf;
   public static Icon FaceGrinHearts => FaceGrinHeartsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-hearts");
   public static Icon GrinHearts => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinHearts;
   private static Icon? FaceGrinSquintf;
   public static Icon FaceGrinSquint => FaceGrinSquintf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-squint");
   public static Icon GrinSquint => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinSquint;
   private static Icon? FaceGrinSquintTearsf;
   public static Icon FaceGrinSquintTears => FaceGrinSquintTearsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-squint-tears");
   public static Icon GrinSquintTears => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinSquintTears;
   private static Icon? FaceGrinStarsf;
   public static Icon FaceGrinStars => FaceGrinStarsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-stars");
   public static Icon GrinStars => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinStars;
   private static Icon? FaceGrinTearsf;
   public static Icon FaceGrinTears => FaceGrinTearsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-tears");
   public static Icon GrinTears => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinTears;
   private static Icon? FaceGrinTonguef;
   public static Icon FaceGrinTongue => FaceGrinTonguef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-tongue");
   public static Icon GrinTongue => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinTongue;
   private static Icon? FaceGrinTongueSquintf;
   public static Icon FaceGrinTongueSquint => FaceGrinTongueSquintf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-tongue-squint");
   public static Icon GrinTongueSquint => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinTongueSquint;
   private static Icon? FaceGrinTongueWinkf;
   public static Icon FaceGrinTongueWink => FaceGrinTongueWinkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-tongue-wink");
   public static Icon GrinTongueWink => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinTongueWink;
   private static Icon? FaceGrinWidef;
   public static Icon FaceGrinWide => FaceGrinWidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-wide");
   public static Icon GrinAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinWide;
   private static Icon? FaceGrinWinkf;
   public static Icon FaceGrinWink => FaceGrinWinkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-grin-wink");
   public static Icon GrinWink => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceGrinWink;
   private static Icon? FaceHandOverMouthf;
   public static Icon FaceHandOverMouth => FaceHandOverMouthf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-hand-over-mouth");
   private static Icon? FaceHandPeekingf;
   public static Icon FaceHandPeeking => FaceHandPeekingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-hand-peeking");
   private static Icon? FaceHandYawnf;
   public static Icon FaceHandYawn => FaceHandYawnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-hand-yawn");
   private static Icon? FaceHeadBandagef;
   public static Icon FaceHeadBandage => FaceHeadBandagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-head-bandage");
   private static Icon? FaceHoldingBackTearsf;
   public static Icon FaceHoldingBackTears => FaceHoldingBackTearsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-holding-back-tears");
   private static Icon? FaceHushedf;
   public static Icon FaceHushed => FaceHushedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-hushed");
   private static Icon? FaceIciclesf;
   public static Icon FaceIcicles => FaceIciclesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-icicles");
   private static Icon? FaceKissf;
   public static Icon FaceKiss => FaceKissf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-kiss");
   public static Icon Kiss => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceKiss;
   private static Icon? FaceKissBeamf;
   public static Icon FaceKissBeam => FaceKissBeamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-kiss-beam");
   public static Icon KissBeam => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceKissBeam;
   private static Icon? FaceKissClosedEyesf;
   public static Icon FaceKissClosedEyes => FaceKissClosedEyesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-kiss-closed-eyes");
   private static Icon? FaceKissWinkHeartf;
   public static Icon FaceKissWinkHeart => FaceKissWinkHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-kiss-wink-heart");
   public static Icon KissWinkHeart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceKissWinkHeart;
   private static Icon? FaceLaughf;
   public static Icon FaceLaugh => FaceLaughf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-laugh");
   public static Icon Laugh => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceLaugh;
   private static Icon? FaceLaughBeamf;
   public static Icon FaceLaughBeam => FaceLaughBeamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-laugh-beam");
   public static Icon LaughBeam => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceLaughBeam;
   private static Icon? FaceLaughSquintf;
   public static Icon FaceLaughSquint => FaceLaughSquintf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-laugh-squint");
   public static Icon LaughSquint => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceLaughSquint;
   private static Icon? FaceLaughWinkf;
   public static Icon FaceLaughWink => FaceLaughWinkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-laugh-wink");
   public static Icon LaughWink => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceLaughWink;
   private static Icon? FaceLyingf;
   public static Icon FaceLying => FaceLyingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-lying");
   private static Icon? FaceMaskf;
   public static Icon FaceMask => FaceMaskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-mask");
   private static Icon? FaceMehf;
   public static Icon FaceMeh => FaceMehf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-meh");
   public static Icon Meh => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceMeh;
   private static Icon? FaceMehBlankf;
   public static Icon FaceMehBlank => FaceMehBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-meh-blank");
   public static Icon MehBlank => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceMehBlank;
   private static Icon? FaceMeltingf;
   public static Icon FaceMelting => FaceMeltingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-melting");
   private static Icon? FaceMonoclef;
   public static Icon FaceMonocle => FaceMonoclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-monocle");
   private static Icon? FaceNauseatedf;
   public static Icon FaceNauseated => FaceNauseatedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-nauseated");
   private static Icon? FaceNoseSteamf;
   public static Icon FaceNoseSteam => FaceNoseSteamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-nose-steam");
   private static Icon? FacePartyf;
   public static Icon FaceParty => FacePartyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-party");
   private static Icon? FacePensivef;
   public static Icon FacePensive => FacePensivef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-pensive");
   private static Icon? FacePerseveringf;
   public static Icon FacePersevering => FacePerseveringf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-persevering");
   private static Icon? FacePleadingf;
   public static Icon FacePleading => FacePleadingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-pleading");
   private static Icon? FacePoutingf;
   public static Icon FacePouting => FacePoutingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-pouting");
   private static Icon? FaceRaisedEyebrowf;
   public static Icon FaceRaisedEyebrow => FaceRaisedEyebrowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-raised-eyebrow");
   private static Icon? FaceRelievedf;
   public static Icon FaceRelieved => FaceRelievedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-relieved");
   private static Icon? FaceRollingEyesf;
   public static Icon FaceRollingEyes => FaceRollingEyesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-rolling-eyes");
   public static Icon MehRollingEyes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceRollingEyes;
   private static Icon? FaceSadCryf;
   public static Icon FaceSadCry => FaceSadCryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-sad-cry");
   public static Icon SadCry => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceSadCry;
   private static Icon? FaceSadSweatf;
   public static Icon FaceSadSweat => FaceSadSweatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-sad-sweat");
   private static Icon? FaceSadTearf;
   public static Icon FaceSadTear => FaceSadTearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-sad-tear");
   public static Icon SadTear => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceSadTear;
   private static Icon? FaceSalutingf;
   public static Icon FaceSaluting => FaceSalutingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-saluting");
   private static Icon? FaceScreamf;
   public static Icon FaceScream => FaceScreamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-scream");
   private static Icon? FaceShushf;
   public static Icon FaceShush => FaceShushf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-shush");
   private static Icon? FaceSleepingf;
   public static Icon FaceSleeping => FaceSleepingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-sleeping");
   private static Icon? FaceSleepyf;
   public static Icon FaceSleepy => FaceSleepyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-sleepy");
   private static Icon? FaceSmilef;
   public static Icon FaceSmile => FaceSmilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile");
   public static Icon Smile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceSmile;
   private static Icon? FaceSmileBeamf;
   public static Icon FaceSmileBeam => FaceSmileBeamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-beam");
   public static Icon SmileBeam => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceSmileBeam;
   private static Icon? FaceSmileHalof;
   public static Icon FaceSmileHalo => FaceSmileHalof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-halo");
   private static Icon? FaceSmileHeartsf;
   public static Icon FaceSmileHearts => FaceSmileHeartsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-hearts");
   private static Icon? FaceSmileHornsf;
   public static Icon FaceSmileHorns => FaceSmileHornsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-horns");
   private static Icon? FaceSmilePlusf;
   public static Icon FaceSmilePlus => FaceSmilePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-plus");
   public static Icon SmilePlus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceSmilePlus;
   private static Icon? FaceSmileRelaxedf;
   public static Icon FaceSmileRelaxed => FaceSmileRelaxedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-relaxed");
   private static Icon? FaceSmileTearf;
   public static Icon FaceSmileTear => FaceSmileTearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-tear");
   private static Icon? FaceSmileTonguef;
   public static Icon FaceSmileTongue => FaceSmileTonguef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-tongue");
   private static Icon? FaceSmileUpsideDownf;
   public static Icon FaceSmileUpsideDown => FaceSmileUpsideDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-upside-down");
   private static Icon? FaceSmileWinkf;
   public static Icon FaceSmileWink => FaceSmileWinkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smile-wink");
   public static Icon SmileWink => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceSmileWink;
   private static Icon? FaceSmilingHandsf;
   public static Icon FaceSmilingHands => FaceSmilingHandsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smiling-hands");
   private static Icon? FaceSmirkingf;
   public static Icon FaceSmirking => FaceSmirkingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-smirking");
   private static Icon? FaceSpiralEyesf;
   public static Icon FaceSpiralEyes => FaceSpiralEyesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-spiral-eyes");
   private static Icon? FaceSunglassesf;
   public static Icon FaceSunglasses => FaceSunglassesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-sunglasses");
   private static Icon? FaceSurprisef;
   public static Icon FaceSurprise => FaceSurprisef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-surprise");
   public static Icon Surprise => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceSurprise;
   private static Icon? FaceSwearf;
   public static Icon FaceSwear => FaceSwearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-swear");
   private static Icon? FaceThermometerf;
   public static Icon FaceThermometer => FaceThermometerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-thermometer");
   private static Icon? FaceThinkingf;
   public static Icon FaceThinking => FaceThinkingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-thinking");
   private static Icon? FaceTiredf;
   public static Icon FaceTired => FaceTiredf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-tired");
   public static Icon Tired => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FaceTired;
   private static Icon? FaceTissuef;
   public static Icon FaceTissue => FaceTissuef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-tissue");
   private static Icon? FaceTongueMoneyf;
   public static Icon FaceTongueMoney => FaceTongueMoneyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-tongue-money");
   private static Icon? FaceTongueSweatf;
   public static Icon FaceTongueSweat => FaceTongueSweatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-tongue-sweat");
   private static Icon? FaceUnamusedf;
   public static Icon FaceUnamused => FaceUnamusedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-unamused");
   private static Icon? FaceViewfinderf;
   public static Icon FaceViewfinder => FaceViewfinderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-viewfinder");
   private static Icon? FaceVomitf;
   public static Icon FaceVomit => FaceVomitf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-vomit");
   private static Icon? FaceWearyf;
   public static Icon FaceWeary => FaceWearyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-weary");
   private static Icon? FaceWoozyf;
   public static Icon FaceWoozy => FaceWoozyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-woozy");
   private static Icon? FaceWorriedf;
   public static Icon FaceWorried => FaceWorriedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-worried");
   private static Icon? FaceZanyf;
   public static Icon FaceZany => FaceZanyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-zany");
   private static Icon? FaceZipperf;
   public static Icon FaceZipper => FaceZipperf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "face-zipper");
   private static Icon? Falafelf;
   public static Icon Falafel => Falafelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "falafel");
   private static Icon? Familyf;
   public static Icon Family => Familyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "family");
   private static Icon? FamilyDressf;
   public static Icon FamilyDress => FamilyDressf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "family-dress");
   private static Icon? FamilyPantsf;
   public static Icon FamilyPants => FamilyPantsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "family-pants");
   private static Icon? Fanf;
   public static Icon Fan => Fanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fan");
   private static Icon? FanTablef;
   public static Icon FanTable => FanTablef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fan-table");
   private static Icon? Farmf;
   public static Icon Farm => Farmf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "farm");
   public static Icon BarnSilo => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Farm;
   private static Icon? Faucetf;
   public static Icon Faucet => Faucetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "faucet");
   private static Icon? FaucetDripf;
   public static Icon FaucetDrip => FaucetDripf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "faucet-drip");
   private static Icon? Faxf;
   public static Icon Fax => Faxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fax");
   private static Icon? Featherf;
   public static Icon Feather => Featherf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "feather");
   private static Icon? FeatherPointedf;
   public static Icon FeatherPointed => FeatherPointedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "feather-pointed");
   public static Icon FeatherAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FeatherPointed;
   private static Icon? Fencef;
   public static Icon Fence => Fencef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fence");
   private static Icon? FerrisWheelf;
   public static Icon FerrisWheel => FerrisWheelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ferris-wheel");
   private static Icon? Ferryf;
   public static Icon Ferry => Ferryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ferry");
   private static Icon? FieldHockeyStickBallf;
   public static Icon FieldHockeyStickBall => FieldHockeyStickBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "field-hockey-stick-ball");
   public static Icon FieldHockey => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FieldHockeyStickBall;
   private static Icon? Filef;
   public static Icon File => Filef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file");
   private static Icon? FileArrowDownf;
   public static Icon FileArrowDown => FileArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-arrow-down");
   public static Icon FileDownload => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileArrowDown;
   private static Icon? FileArrowUpf;
   public static Icon FileArrowUp => FileArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-arrow-up");
   public static Icon FileUpload => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileArrowUp;
   private static Icon? FileAudiof;
   public static Icon FileAudio => FileAudiof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-audio");
   private static Icon? FileBinaryf;
   public static Icon FileBinary => FileBinaryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-binary");
   private static Icon? FileCertificatef;
   public static Icon FileCertificate => FileCertificatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-certificate");
   public static Icon FileAward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileCertificate;
   private static Icon? FileChartColumnf;
   public static Icon FileChartColumn => FileChartColumnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-chart-column");
   public static Icon FileChartLine => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileChartColumn;
   private static Icon? FileChartPief;
   public static Icon FileChartPie => FileChartPief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-chart-pie");
   private static Icon? FileCheckf;
   public static Icon FileCheck => FileCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-check");
   private static Icon? FileCircleCheckf;
   public static Icon FileCircleCheck => FileCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-circle-check");
   private static Icon? FileCircleExclamationf;
   public static Icon FileCircleExclamation => FileCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-circle-exclamation");
   private static Icon? FileCircleInfof;
   public static Icon FileCircleInfo => FileCircleInfof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-circle-info");
   private static Icon? FileCircleMinusf;
   public static Icon FileCircleMinus => FileCircleMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-circle-minus");
   private static Icon? FileCirclePlusf;
   public static Icon FileCirclePlus => FileCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-circle-plus");
   private static Icon? FileCircleQuestionf;
   public static Icon FileCircleQuestion => FileCircleQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-circle-question");
   private static Icon? FileCircleXmarkf;
   public static Icon FileCircleXmark => FileCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-circle-xmark");
   private static Icon? FileCodef;
   public static Icon FileCode => FileCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-code");
   private static Icon? FileContractf;
   public static Icon FileContract => FileContractf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-contract");
   private static Icon? FileCsvf;
   public static Icon FileCsv => FileCsvf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-csv");
   private static Icon? FileDashedLinef;
   public static Icon FileDashedLine => FileDashedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-dashed-line");
   public static Icon PageBreak => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileDashedLine;
   private static Icon? FileDocf;
   public static Icon FileDoc => FileDocf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-doc");
   private static Icon? FileEpsf;
   public static Icon FileEps => FileEpsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-eps");
   private static Icon? FileExcelf;
   public static Icon FileExcel => FileExcelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-excel");
   private static Icon? FileExclamationf;
   public static Icon FileExclamation => FileExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-exclamation");
   private static Icon? FileExportf;
   public static Icon FileExport => FileExportf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-export");
   public static Icon ArrowRightFromFile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileExport;
   private static Icon? FileGiff;
   public static Icon FileGif => FileGiff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-gif");
   private static Icon? FileHeartf;
   public static Icon FileHeart => FileHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-heart");
   private static Icon? FileImagef;
   public static Icon FileImage => FileImagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-image");
   private static Icon? FileImportf;
   public static Icon FileImport => FileImportf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-import");
   public static Icon ArrowRightToFile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileImport;
   private static Icon? FileInvoicef;
   public static Icon FileInvoice => FileInvoicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-invoice");
   private static Icon? FileInvoiceDollarf;
   public static Icon FileInvoiceDollar => FileInvoiceDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-invoice-dollar");
   private static Icon? FileJpgf;
   public static Icon FileJpg => FileJpgf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-jpg");
   private static Icon? FileLinesf;
   public static Icon FileLines => FileLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-lines");
   public static Icon FileAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileLines;
   public static Icon FileText => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileLines;
   private static Icon? FileLockf;
   public static Icon FileLock => FileLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-lock");
   private static Icon? FileMagnifyingGlassf;
   public static Icon FileMagnifyingGlass => FileMagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-magnifying-glass");
   public static Icon FileSearch => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileMagnifyingGlass;
   private static Icon? FileMedicalf;
   public static Icon FileMedical => FileMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-medical");
   private static Icon? FileMinusf;
   public static Icon FileMinus => FileMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-minus");
   private static Icon? FileMovf;
   public static Icon FileMov => FileMovf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-mov");
   private static Icon? FileMp3f;
   public static Icon FileMp3 => FileMp3f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-mp3");
   private static Icon? FileMp4f;
   public static Icon FileMp4 => FileMp4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-mp4");
   private static Icon? FileMusicf;
   public static Icon FileMusic => FileMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-music");
   private static Icon? FilePdff;
   public static Icon FilePdf => FilePdff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-pdf");
   private static Icon? FilePenf;
   public static Icon FilePen => FilePenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-pen");
   public static Icon FileEdit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FilePen;
   private static Icon? FilePlusf;
   public static Icon FilePlus => FilePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-plus");
   private static Icon? FilePlusMinusf;
   public static Icon FilePlusMinus => FilePlusMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-plus-minus");
   private static Icon? FilePngf;
   public static Icon FilePng => FilePngf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-png");
   private static Icon? FilePowerpointf;
   public static Icon FilePowerpoint => FilePowerpointf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-powerpoint");
   private static Icon? FilePptf;
   public static Icon FilePpt => FilePptf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-ppt");
   private static Icon? FilePrescriptionf;
   public static Icon FilePrescription => FilePrescriptionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-prescription");
   private static Icon? FileShieldf;
   public static Icon FileShield => FileShieldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-shield");
   private static Icon? FileSignaturef;
   public static Icon FileSignature => FileSignaturef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-signature");
   private static Icon? FileSlashf;
   public static Icon FileSlash => FileSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-slash");
   private static Icon? FileSpreadsheetf;
   public static Icon FileSpreadsheet => FileSpreadsheetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-spreadsheet");
   private static Icon? FileSvgf;
   public static Icon FileSvg => FileSvgf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-svg");
   private static Icon? FileUserf;
   public static Icon FileUser => FileUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-user");
   private static Icon? FileVectorf;
   public static Icon FileVector => FileVectorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-vector");
   private static Icon? FileVideof;
   public static Icon FileVideo => FileVideof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-video");
   private static Icon? FileWaveformf;
   public static Icon FileWaveform => FileWaveformf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-waveform");
   public static Icon FileMedicalAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileWaveform;
   private static Icon? FileWordf;
   public static Icon FileWord => FileWordf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-word");
   private static Icon? FileXlsf;
   public static Icon FileXls => FileXlsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-xls");
   private static Icon? FileXmarkf;
   public static Icon FileXmark => FileXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-xmark");
   public static Icon FileTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileXmark;
   private static Icon? FileXmlf;
   public static Icon FileXml => FileXmlf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-xml");
   private static Icon? FileZipf;
   public static Icon FileZip => FileZipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-zip");
   private static Icon? FileZipperf;
   public static Icon FileZipper => FileZipperf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "file-zipper");
   public static Icon FileArchive => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FileZipper;
   private static Icon? Filesf;
   public static Icon Files => Filesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "files");
   private static Icon? FilesMedicalf;
   public static Icon FilesMedical => FilesMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "files-medical");
   private static Icon? Fillf;
   public static Icon Fill => Fillf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fill");
   private static Icon? FillDripf;
   public static Icon FillDrip => FillDripf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fill-drip");
   private static Icon? Filmf;
   public static Icon Film => Filmf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "film");
   private static Icon? FilmCanisterf;
   public static Icon FilmCanister => FilmCanisterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "film-canister");
   public static Icon FilmCannister => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FilmCanister;
   private static Icon? FilmSimplef;
   public static Icon FilmSimple => FilmSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "film-simple");
   public static Icon FilmAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FilmSimple;
   private static Icon? FilmSlashf;
   public static Icon FilmSlash => FilmSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "film-slash");
   private static Icon? Filmsf;
   public static Icon Films => Filmsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "films");
   private static Icon? Filterf;
   public static Icon Filter => Filterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "filter");
   private static Icon? FilterCircleDollarf;
   public static Icon FilterCircleDollar => FilterCircleDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "filter-circle-dollar");
   public static Icon FunnelDollar => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FilterCircleDollar;
   private static Icon? FilterCircleXmarkf;
   public static Icon FilterCircleXmark => FilterCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "filter-circle-xmark");
   private static Icon? FilterListf;
   public static Icon FilterList => FilterListf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "filter-list");
   private static Icon? FilterSlashf;
   public static Icon FilterSlash => FilterSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "filter-slash");
   private static Icon? Filtersf;
   public static Icon Filters => Filtersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "filters");
   private static Icon? Fingerprintf;
   public static Icon Fingerprint => Fingerprintf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fingerprint");
   private static Icon? Firef;
   public static Icon Fire => Firef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fire");
   private static Icon? FireBurnerf;
   public static Icon FireBurner => FireBurnerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fire-burner");
   private static Icon? FireExtinguisherf;
   public static Icon FireExtinguisher => FireExtinguisherf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fire-extinguisher");
   private static Icon? FireFlamef;
   public static Icon FireFlame => FireFlamef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fire-flame");
   public static Icon Flame => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FireFlame;
   private static Icon? FireFlameCurvedf;
   public static Icon FireFlameCurved => FireFlameCurvedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fire-flame-curved");
   public static Icon FireAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FireFlameCurved;
   private static Icon? FireFlameSimplef;
   public static Icon FireFlameSimple => FireFlameSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fire-flame-simple");
   public static Icon Burn => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FireFlameSimple;
   private static Icon? FireHydrantf;
   public static Icon FireHydrant => FireHydrantf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fire-hydrant");
   private static Icon? FireSmokef;
   public static Icon FireSmoke => FireSmokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fire-smoke");
   private static Icon? Fireplacef;
   public static Icon Fireplace => Fireplacef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fireplace");
   private static Icon? Fishf;
   public static Icon Fish => Fishf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fish");
   private static Icon? FishBonesf;
   public static Icon FishBones => FishBonesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fish-bones");
   private static Icon? FishCookedf;
   public static Icon FishCooked => FishCookedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fish-cooked");
   private static Icon? FishFinsf;
   public static Icon FishFins => FishFinsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fish-fins");
   private static Icon? FishingRodf;
   public static Icon FishingRod => FishingRodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fishing-rod");
   private static Icon? Flagf;
   public static Icon Flag => Flagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flag");
   private static Icon? FlagCheckeredf;
   public static Icon FlagCheckered => FlagCheckeredf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flag-checkered");
   private static Icon? FlagPennantf;
   public static Icon FlagPennant => FlagPennantf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flag-pennant");
   public static Icon Pennant => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FlagPennant;
   private static Icon? FlagSwallowtailf;
   public static Icon FlagSwallowtail => FlagSwallowtailf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flag-swallowtail");
   public static Icon FlagAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FlagSwallowtail;
   private static Icon? FlagUsaf;
   public static Icon FlagUsa => FlagUsaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flag-usa");
   private static Icon? Flashlightf;
   public static Icon Flashlight => Flashlightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flashlight");
   private static Icon? Flaskf;
   public static Icon Flask => Flaskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flask");
   private static Icon? FlaskGearf;
   public static Icon FlaskGear => FlaskGearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flask-gear");
   private static Icon? FlaskRoundPoisonf;
   public static Icon FlaskRoundPoison => FlaskRoundPoisonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flask-round-poison");
   public static Icon FlaskPoison => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FlaskRoundPoison;
   private static Icon? FlaskRoundPotionf;
   public static Icon FlaskRoundPotion => FlaskRoundPotionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flask-round-potion");
   public static Icon FlaskPotion => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FlaskRoundPotion;
   private static Icon? FlaskVialf;
   public static Icon FlaskVial => FlaskVialf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flask-vial");
   private static Icon? Flatbreadf;
   public static Icon Flatbread => Flatbreadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flatbread");
   private static Icon? FlatbreadStuffedf;
   public static Icon FlatbreadStuffed => FlatbreadStuffedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flatbread-stuffed");
   private static Icon? FloppyDiskf;
   public static Icon FloppyDisk => FloppyDiskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "floppy-disk");
   public static Icon Save => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FloppyDisk;
   private static Icon? FloppyDiskCircleArrowRightf;
   public static Icon FloppyDiskCircleArrowRight => FloppyDiskCircleArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "floppy-disk-circle-arrow-right");
   public static Icon SaveCircleArrowRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FloppyDiskCircleArrowRight;
   private static Icon? FloppyDiskCircleXmarkf;
   public static Icon FloppyDiskCircleXmark => FloppyDiskCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "floppy-disk-circle-xmark");
   public static Icon FloppyDiskTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FloppyDiskCircleXmark;
   public static Icon SaveCircleXmark => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FloppyDiskCircleXmark;
   public static Icon SaveTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FloppyDiskCircleXmark;
   private static Icon? FloppyDiskPenf;
   public static Icon FloppyDiskPen => FloppyDiskPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "floppy-disk-pen");
   private static Icon? FloppyDisksf;
   public static Icon FloppyDisks => FloppyDisksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "floppy-disks");
   private static Icon? FlorinSignf;
   public static Icon FlorinSign => FlorinSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "florin-sign");
   private static Icon? Flowerf;
   public static Icon Flower => Flowerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flower");
   private static Icon? FlowerDaffodilf;
   public static Icon FlowerDaffodil => FlowerDaffodilf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flower-daffodil");
   private static Icon? FlowerTulipf;
   public static Icon FlowerTulip => FlowerTulipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flower-tulip");
   private static Icon? Flutef;
   public static Icon Flute => Flutef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flute");
   private static Icon? FluxCapacitorf;
   public static Icon FluxCapacitor => FluxCapacitorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flux-capacitor");
   private static Icon? FlyingDiscf;
   public static Icon FlyingDisc => FlyingDiscf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "flying-disc");
   private static Icon? Folderf;
   public static Icon Folder => Folderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder");
   public static Icon FolderBlank => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Folder;
   private static Icon? FolderArrowDownf;
   public static Icon FolderArrowDown => FolderArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-arrow-down");
   public static Icon FolderDownload => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FolderArrowDown;
   private static Icon? FolderArrowUpf;
   public static Icon FolderArrowUp => FolderArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-arrow-up");
   public static Icon FolderUpload => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FolderArrowUp;
   private static Icon? FolderBookmarkf;
   public static Icon FolderBookmark => FolderBookmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-bookmark");
   private static Icon? FolderCheckf;
   public static Icon FolderCheck => FolderCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-check");
   private static Icon? FolderClosedf;
   public static Icon FolderClosed => FolderClosedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-closed");
   private static Icon? FolderGearf;
   public static Icon FolderGear => FolderGearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-gear");
   public static Icon FolderCog => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FolderGear;
   private static Icon? FolderGridf;
   public static Icon FolderGrid => FolderGridf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-grid");
   private static Icon? FolderHeartf;
   public static Icon FolderHeart => FolderHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-heart");
   private static Icon? FolderImagef;
   public static Icon FolderImage => FolderImagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-image");
   private static Icon? FolderMagnifyingGlassf;
   public static Icon FolderMagnifyingGlass => FolderMagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-magnifying-glass");
   public static Icon FolderSearch => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FolderMagnifyingGlass;
   private static Icon? FolderMedicalf;
   public static Icon FolderMedical => FolderMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-medical");
   private static Icon? FolderMinusf;
   public static Icon FolderMinus => FolderMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-minus");
   private static Icon? FolderMusicf;
   public static Icon FolderMusic => FolderMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-music");
   private static Icon? FolderOpenf;
   public static Icon FolderOpen => FolderOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-open");
   private static Icon? FolderPlusf;
   public static Icon FolderPlus => FolderPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-plus");
   private static Icon? FolderTreef;
   public static Icon FolderTree => FolderTreef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-tree");
   private static Icon? FolderUserf;
   public static Icon FolderUser => FolderUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-user");
   private static Icon? FolderXmarkf;
   public static Icon FolderXmark => FolderXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folder-xmark");
   public static Icon FolderTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FolderXmark;
   private static Icon? Foldersf;
   public static Icon Folders => Foldersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "folders");
   private static Icon? FonduePotf;
   public static Icon FonduePot => FonduePotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fondue-pot");
   private static Icon? Fontf;
   public static Icon Font => Fontf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "font");
   private static Icon? FontAwesomef;
   public static Icon FontAwesome => FontAwesomef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "font-awesome");
   public static Icon FontAwesomeFlag => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FontAwesome;
   public static Icon FontAwesomeLogoFull => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.FontAwesome;
   private static Icon? FontCasef;
   public static Icon FontCase => FontCasef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "font-case");
   private static Icon? Footballf;
   public static Icon Football => Footballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "football");
   public static Icon FootballBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Football;
   private static Icon? FootballHelmetf;
   public static Icon FootballHelmet => FootballHelmetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "football-helmet");
   private static Icon? Forkf;
   public static Icon Fork => Forkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fork");
   public static Icon UtensilFork => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Fork;
   private static Icon? ForkKnifef;
   public static Icon ForkKnife => ForkKnifef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fork-knife");
   public static Icon UtensilsAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ForkKnife;
   private static Icon? Forkliftf;
   public static Icon Forklift => Forkliftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "forklift");
   private static Icon? Fortf;
   public static Icon Fort => Fortf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "fort");
   private static Icon? Forwardf;
   public static Icon Forward => Forwardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "forward");
   private static Icon? ForwardFastf;
   public static Icon ForwardFast => ForwardFastf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "forward-fast");
   public static Icon FastForward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ForwardFast;
   private static Icon? ForwardStepf;
   public static Icon ForwardStep => ForwardStepf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "forward-step");
   public static Icon StepForward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ForwardStep;
   private static Icon? Framef;
   public static Icon Frame => Framef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "frame");
   private static Icon? FrancSignf;
   public static Icon FrancSign => FrancSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "franc-sign");
   private static Icon? FrenchFriesf;
   public static Icon FrenchFries => FrenchFriesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "french-fries");
   private static Icon? Frogf;
   public static Icon Frog => Frogf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "frog");
   private static Icon? Functionf;
   public static Icon Function => Functionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "function");
   private static Icon? Futbolf;
   public static Icon Futbol => Futbolf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "futbol");
   public static Icon FutbolBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Futbol;
   public static Icon SoccerBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Futbol;
   private static Icon? Gf;
   public static Icon G => Gf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "g");
   private static Icon? Galaxyf;
   public static Icon Galaxy => Galaxyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "galaxy");
   private static Icon? GalleryThumbnailsf;
   public static Icon GalleryThumbnails => GalleryThumbnailsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gallery-thumbnails");
   private static Icon? GameBoardf;
   public static Icon GameBoard => GameBoardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "game-board");
   private static Icon? GameBoardSimplef;
   public static Icon GameBoardSimple => GameBoardSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "game-board-simple");
   public static Icon GameBoardAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GameBoardSimple;
   private static Icon? GameConsoleHandheldf;
   public static Icon GameConsoleHandheld => GameConsoleHandheldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "game-console-handheld");
   private static Icon? GameConsoleHandheldCrankf;
   public static Icon GameConsoleHandheldCrank => GameConsoleHandheldCrankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "game-console-handheld-crank");
   private static Icon? Gamepadf;
   public static Icon Gamepad => Gamepadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gamepad");
   private static Icon? GamepadModernf;
   public static Icon GamepadModern => GamepadModernf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gamepad-modern");
   public static Icon GamepadAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GamepadModern;
   private static Icon? Garagef;
   public static Icon Garage => Garagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "garage");
   private static Icon? GarageCarf;
   public static Icon GarageCar => GarageCarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "garage-car");
   private static Icon? GarageOpenf;
   public static Icon GarageOpen => GarageOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "garage-open");
   private static Icon? Garlicf;
   public static Icon Garlic => Garlicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "garlic");
   private static Icon? GasPumpf;
   public static Icon GasPump => GasPumpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gas-pump");
   private static Icon? GasPumpSlashf;
   public static Icon GasPumpSlash => GasPumpSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gas-pump-slash");
   private static Icon? Gaugef;
   public static Icon Gauge => Gaugef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge");
   public static Icon Dashboard => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Gauge;
   public static Icon GaugeMed => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Gauge;
   public static Icon TachometerAltAverage => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Gauge;
   private static Icon? GaugeCircleBoltf;
   public static Icon GaugeCircleBolt => GaugeCircleBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-circle-bolt");
   private static Icon? GaugeCircleMinusf;
   public static Icon GaugeCircleMinus => GaugeCircleMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-circle-minus");
   private static Icon? GaugeCirclePlusf;
   public static Icon GaugeCirclePlus => GaugeCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-circle-plus");
   private static Icon? GaugeHighf;
   public static Icon GaugeHigh => GaugeHighf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-high");
   public static Icon TachometerAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeHigh;
   public static Icon TachometerAltFast => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeHigh;
   private static Icon? GaugeLowf;
   public static Icon GaugeLow => GaugeLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-low");
   public static Icon TachometerAltSlow => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeLow;
   private static Icon? GaugeMaxf;
   public static Icon GaugeMax => GaugeMaxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-max");
   public static Icon TachometerAltFastest => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeMax;
   private static Icon? GaugeMinf;
   public static Icon GaugeMin => GaugeMinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-min");
   public static Icon TachometerAltSlowest => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeMin;
   private static Icon? GaugeSimplef;
   public static Icon GaugeSimple => GaugeSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-simple");
   public static Icon GaugeSimpleMed => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeSimple;
   public static Icon TachometerAverage => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeSimple;
   private static Icon? GaugeSimpleHighf;
   public static Icon GaugeSimpleHigh => GaugeSimpleHighf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-simple-high");
   public static Icon Tachometer => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeSimpleHigh;
   public static Icon TachometerFast => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeSimpleHigh;
   private static Icon? GaugeSimpleLowf;
   public static Icon GaugeSimpleLow => GaugeSimpleLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-simple-low");
   public static Icon TachometerSlow => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeSimpleLow;
   private static Icon? GaugeSimpleMaxf;
   public static Icon GaugeSimpleMax => GaugeSimpleMaxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-simple-max");
   public static Icon TachometerFastest => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeSimpleMax;
   private static Icon? GaugeSimpleMinf;
   public static Icon GaugeSimpleMin => GaugeSimpleMinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gauge-simple-min");
   public static Icon TachometerSlowest => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GaugeSimpleMin;
   private static Icon? Gavelf;
   public static Icon Gavel => Gavelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gavel");
   public static Icon Legal => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Gavel;
   private static Icon? Gearf;
   public static Icon Gear => Gearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gear");
   public static Icon Cog => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Gear;
   private static Icon? GearCodef;
   public static Icon GearCode => GearCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gear-code");
   private static Icon? GearComplexf;
   public static Icon GearComplex => GearComplexf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gear-complex");
   private static Icon? GearComplexCodef;
   public static Icon GearComplexCode => GearComplexCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gear-complex-code");
   private static Icon? Gearsf;
   public static Icon Gears => Gearsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gears");
   public static Icon Cogs => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Gears;
   private static Icon? Gemf;
   public static Icon Gem => Gemf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gem");
   private static Icon? Genderlessf;
   public static Icon Genderless => Genderlessf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "genderless");
   private static Icon? Ghostf;
   public static Icon Ghost => Ghostf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ghost");
   private static Icon? Giff;
   public static Icon Gif => Giff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gif");
   private static Icon? Giftf;
   public static Icon Gift => Giftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gift");
   private static Icon? GiftCardf;
   public static Icon GiftCard => GiftCardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gift-card");
   private static Icon? Giftsf;
   public static Icon Gifts => Giftsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gifts");
   private static Icon? GingerbreadManf;
   public static Icon GingerbreadMan => GingerbreadManf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gingerbread-man");
   private static Icon? Glassf;
   public static Icon Glass => Glassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "glass");
   private static Icon? GlassCitrusf;
   public static Icon GlassCitrus => GlassCitrusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "glass-citrus");
   private static Icon? GlassEmptyf;
   public static Icon GlassEmpty => GlassEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "glass-empty");
   private static Icon? GlassHalff;
   public static Icon GlassHalf => GlassHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "glass-half");
   public static Icon GlassHalfEmpty => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GlassHalf;
   public static Icon GlassHalfFull => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GlassHalf;
   private static Icon? GlassWaterf;
   public static Icon GlassWater => GlassWaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "glass-water");
   private static Icon? GlassWaterDropletf;
   public static Icon GlassWaterDroplet => GlassWaterDropletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "glass-water-droplet");
   private static Icon? Glassesf;
   public static Icon Glasses => Glassesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "glasses");
   private static Icon? GlassesRoundf;
   public static Icon GlassesRound => GlassesRoundf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "glasses-round");
   public static Icon GlassesAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GlassesRound;
   private static Icon? Globef;
   public static Icon Globe => Globef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "globe");
   private static Icon? GlobePointerf;
   public static Icon GlobePointer => GlobePointerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "globe-pointer");
   private static Icon? GlobeSnowf;
   public static Icon GlobeSnow => GlobeSnowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "globe-snow");
   private static Icon? GlobeStandf;
   public static Icon GlobeStand => GlobeStandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "globe-stand");
   private static Icon? GoalNetf;
   public static Icon GoalNet => GoalNetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "goal-net");
   private static Icon? GolfBallTeef;
   public static Icon GolfBallTee => GolfBallTeef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "golf-ball-tee");
   public static Icon GolfBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GolfBallTee;
   private static Icon? GolfClubf;
   public static Icon GolfClub => GolfClubf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "golf-club");
   private static Icon? GolfFlagHolef;
   public static Icon GolfFlagHole => GolfFlagHolef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "golf-flag-hole");
   private static Icon? Gopuramf;
   public static Icon Gopuram => Gopuramf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gopuram");
   private static Icon? GraduationCapf;
   public static Icon GraduationCap => GraduationCapf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "graduation-cap");
   public static Icon MortarBoard => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.GraduationCap;
   private static Icon? Gramophonef;
   public static Icon Gramophone => Gramophonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gramophone");
   private static Icon? Grapesf;
   public static Icon Grapes => Grapesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grapes");
   private static Icon? Gratef;
   public static Icon Grate => Gratef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grate");
   private static Icon? GrateDropletf;
   public static Icon GrateDroplet => GrateDropletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grate-droplet");
   private static Icon? GreaterThanf;
   public static Icon GreaterThan => GreaterThanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "greater-than");
   private static Icon? GreaterThanEqualf;
   public static Icon GreaterThanEqual => GreaterThanEqualf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "greater-than-equal");
   private static Icon? Gridf;
   public static Icon Grid => Gridf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid");
   public static Icon Grid3 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Grid;
   private static Icon? Grid2f;
   public static Icon Grid2 => Grid2f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-2");
   private static Icon? Grid2Plusf;
   public static Icon Grid2Plus => Grid2Plusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-2-plus");
   private static Icon? Grid4f;
   public static Icon Grid4 => Grid4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-4");
   private static Icon? Grid5f;
   public static Icon Grid5 => Grid5f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-5");
   private static Icon? GridDividersf;
   public static Icon GridDividers => GridDividersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-dividers");
   private static Icon? GridHorizontalf;
   public static Icon GridHorizontal => GridHorizontalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-horizontal");
   private static Icon? GridRoundf;
   public static Icon GridRound => GridRoundf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-round");
   private static Icon? GridRound2f;
   public static Icon GridRound2 => GridRound2f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-round-2");
   private static Icon? GridRound2Plusf;
   public static Icon GridRound2Plus => GridRound2Plusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-round-2-plus");
   private static Icon? GridRound4f;
   public static Icon GridRound4 => GridRound4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-round-4");
   private static Icon? GridRound5f;
   public static Icon GridRound5 => GridRound5f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grid-round-5");
   private static Icon? Grillf;
   public static Icon Grill => Grillf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grill");
   private static Icon? GrillFiref;
   public static Icon GrillFire => GrillFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grill-fire");
   private static Icon? GrillHotf;
   public static Icon GrillHot => GrillHotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grill-hot");
   private static Icon? Gripf;
   public static Icon Grip => Gripf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grip");
   public static Icon GripHorizontal => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Grip;
   private static Icon? GripDotsf;
   public static Icon GripDots => GripDotsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grip-dots");
   private static Icon? GripDotsVerticalf;
   public static Icon GripDotsVertical => GripDotsVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grip-dots-vertical");
   private static Icon? GripLinesf;
   public static Icon GripLines => GripLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grip-lines");
   private static Icon? GripLinesVerticalf;
   public static Icon GripLinesVertical => GripLinesVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grip-lines-vertical");
   private static Icon? GripVerticalf;
   public static Icon GripVertical => GripVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "grip-vertical");
   private static Icon? GroupArrowsRotatef;
   public static Icon GroupArrowsRotate => GroupArrowsRotatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "group-arrows-rotate");
   private static Icon? GuaraniSignf;
   public static Icon GuaraniSign => GuaraniSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "guarani-sign");
   private static Icon? Guitarf;
   public static Icon Guitar => Guitarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "guitar");
   private static Icon? GuitarElectricf;
   public static Icon GuitarElectric => GuitarElectricf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "guitar-electric");
   private static Icon? Guitarsf;
   public static Icon Guitars => Guitarsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "guitars");
   private static Icon? Gunf;
   public static Icon Gun => Gunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gun");
   private static Icon? GunSlashf;
   public static Icon GunSlash => GunSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gun-slash");
   private static Icon? GunSquirtf;
   public static Icon GunSquirt => GunSquirtf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "gun-squirt");
   private static Icon? Hf;
   public static Icon H => Hf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "h");
   private static Icon? H1f;
   public static Icon H1 => H1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "h1");
   private static Icon? H2f;
   public static Icon H2 => H2f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "h2");
   private static Icon? H3f;
   public static Icon H3 => H3f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "h3");
   private static Icon? H4f;
   public static Icon H4 => H4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "h4");
   private static Icon? H5f;
   public static Icon H5 => H5f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "h5");
   private static Icon? H6f;
   public static Icon H6 => H6f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "h6");
   private static Icon? Hammerf;
   public static Icon Hammer => Hammerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hammer");
   private static Icon? HammerBrushf;
   public static Icon HammerBrush => HammerBrushf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hammer-brush");
   private static Icon? HammerCrashf;
   public static Icon HammerCrash => HammerCrashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hammer-crash");
   private static Icon? HammerWarf;
   public static Icon HammerWar => HammerWarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hammer-war");
   private static Icon? Hamsaf;
   public static Icon Hamsa => Hamsaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hamsa");
   private static Icon? Handf;
   public static Icon Hand => Handf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand");
   public static Icon HandPaper => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Hand;
   private static Icon? HandBackFistf;
   public static Icon HandBackFist => HandBackFistf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-back-fist");
   public static Icon HandRock => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandBackFist;
   private static Icon? HandBackPointDownf;
   public static Icon HandBackPointDown => HandBackPointDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-back-point-down");
   private static Icon? HandBackPointLeftf;
   public static Icon HandBackPointLeft => HandBackPointLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-back-point-left");
   private static Icon? HandBackPointRibbonf;
   public static Icon HandBackPointRibbon => HandBackPointRibbonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-back-point-ribbon");
   private static Icon? HandBackPointRightf;
   public static Icon HandBackPointRight => HandBackPointRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-back-point-right");
   private static Icon? HandBackPointUpf;
   public static Icon HandBackPointUp => HandBackPointUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-back-point-up");
   private static Icon? HandDotsf;
   public static Icon HandDots => HandDotsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-dots");
   public static Icon Allergies => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandDots;
   private static Icon? HandFingersCrossedf;
   public static Icon HandFingersCrossed => HandFingersCrossedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-fingers-crossed");
   private static Icon? HandFistf;
   public static Icon HandFist => HandFistf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-fist");
   public static Icon FistRaised => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandFist;
   private static Icon? HandHeartf;
   public static Icon HandHeart => HandHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-heart");
   private static Icon? HandHoldingf;
   public static Icon HandHolding => HandHoldingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding");
   private static Icon? HandHoldingBoxf;
   public static Icon HandHoldingBox => HandHoldingBoxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-box");
   private static Icon? HandHoldingCircleDollarf;
   public static Icon HandHoldingCircleDollar => HandHoldingCircleDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-circle-dollar");
   private static Icon? HandHoldingDollarf;
   public static Icon HandHoldingDollar => HandHoldingDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-dollar");
   public static Icon HandHoldingUsd => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandHoldingDollar;
   private static Icon? HandHoldingDropletf;
   public static Icon HandHoldingDroplet => HandHoldingDropletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-droplet");
   public static Icon HandHoldingWater => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandHoldingDroplet;
   private static Icon? HandHoldingHandf;
   public static Icon HandHoldingHand => HandHoldingHandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-hand");
   private static Icon? HandHoldingHeartf;
   public static Icon HandHoldingHeart => HandHoldingHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-heart");
   private static Icon? HandHoldingMagicf;
   public static Icon HandHoldingMagic => HandHoldingMagicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-magic");
   private static Icon? HandHoldingMedicalf;
   public static Icon HandHoldingMedical => HandHoldingMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-medical");
   private static Icon? HandHoldingSeedlingf;
   public static Icon HandHoldingSeedling => HandHoldingSeedlingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-seedling");
   private static Icon? HandHoldingSkullf;
   public static Icon HandHoldingSkull => HandHoldingSkullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-holding-skull");
   private static Icon? HandHornsf;
   public static Icon HandHorns => HandHornsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-horns");
   private static Icon? HandLizardf;
   public static Icon HandLizard => HandLizardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-lizard");
   private static Icon? HandLovef;
   public static Icon HandLove => HandLovef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-love");
   private static Icon? HandMiddleFingerf;
   public static Icon HandMiddleFinger => HandMiddleFingerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-middle-finger");
   private static Icon? HandPeacef;
   public static Icon HandPeace => HandPeacef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-peace");
   private static Icon? HandPointDownf;
   public static Icon HandPointDown => HandPointDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-point-down");
   private static Icon? HandPointLeftf;
   public static Icon HandPointLeft => HandPointLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-point-left");
   private static Icon? HandPointRibbonf;
   public static Icon HandPointRibbon => HandPointRibbonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-point-ribbon");
   private static Icon? HandPointRightf;
   public static Icon HandPointRight => HandPointRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-point-right");
   private static Icon? HandPointUpf;
   public static Icon HandPointUp => HandPointUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-point-up");
   private static Icon? HandPointerf;
   public static Icon HandPointer => HandPointerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-pointer");
   private static Icon? HandScissorsf;
   public static Icon HandScissors => HandScissorsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-scissors");
   private static Icon? HandSparklesf;
   public static Icon HandSparkles => HandSparklesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-sparkles");
   private static Icon? HandSpockf;
   public static Icon HandSpock => HandSpockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-spock");
   private static Icon? HandWavef;
   public static Icon HandWave => HandWavef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hand-wave");
   private static Icon? Handcuffsf;
   public static Icon Handcuffs => Handcuffsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "handcuffs");
   private static Icon? Handsf;
   public static Icon Hands => Handsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands");
   public static Icon SignLanguage => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Hands;
   public static Icon Signing => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Hands;
   private static Icon? HandsAslInterpretingf;
   public static Icon HandsAslInterpreting => HandsAslInterpretingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-asl-interpreting");
   public static Icon AmericanSignLanguageInterpreting => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandsAslInterpreting;
   public static Icon AslInterpreting => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandsAslInterpreting;
   public static Icon HandsAmericanSignLanguageInterpreting => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandsAslInterpreting;
   private static Icon? HandsBoundf;
   public static Icon HandsBound => HandsBoundf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-bound");
   private static Icon? HandsBubblesf;
   public static Icon HandsBubbles => HandsBubblesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-bubbles");
   public static Icon HandsWash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandsBubbles;
   private static Icon? HandsClappingf;
   public static Icon HandsClapping => HandsClappingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-clapping");
   private static Icon? HandsHoldingf;
   public static Icon HandsHolding => HandsHoldingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-holding");
   private static Icon? HandsHoldingChildf;
   public static Icon HandsHoldingChild => HandsHoldingChildf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-holding-child");
   private static Icon? HandsHoldingCirclef;
   public static Icon HandsHoldingCircle => HandsHoldingCirclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-holding-circle");
   private static Icon? HandsHoldingDiamondf;
   public static Icon HandsHoldingDiamond => HandsHoldingDiamondf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-holding-diamond");
   public static Icon HandReceiving => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandsHoldingDiamond;
   private static Icon? HandsHoldingDollarf;
   public static Icon HandsHoldingDollar => HandsHoldingDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-holding-dollar");
   public static Icon HandsUsd => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandsHoldingDollar;
   private static Icon? HandsHoldingHeartf;
   public static Icon HandsHoldingHeart => HandsHoldingHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-holding-heart");
   public static Icon HandsHeart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandsHoldingHeart;
   private static Icon? HandsPrayingf;
   public static Icon HandsPraying => HandsPrayingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hands-praying");
   public static Icon PrayingHands => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandsPraying;
   private static Icon? Handshakef;
   public static Icon Handshake => Handshakef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "handshake");
   private static Icon? HandshakeAnglef;
   public static Icon HandshakeAngle => HandshakeAnglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "handshake-angle");
   public static Icon HandsHelping => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandshakeAngle;
   private static Icon? HandshakeSimplef;
   public static Icon HandshakeSimple => HandshakeSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "handshake-simple");
   public static Icon HandshakeAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandshakeSimple;
   private static Icon? HandshakeSimpleSlashf;
   public static Icon HandshakeSimpleSlash => HandshakeSimpleSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "handshake-simple-slash");
   public static Icon HandshakeAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HandshakeSimpleSlash;
   private static Icon? HandshakeSlashf;
   public static Icon HandshakeSlash => HandshakeSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "handshake-slash");
   private static Icon? Hanukiahf;
   public static Icon Hanukiah => Hanukiahf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hanukiah");
   private static Icon? HardDrivef;
   public static Icon HardDrive => HardDrivef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hard-drive");
   public static Icon Hdd => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HardDrive;
   private static Icon? Hashtagf;
   public static Icon Hashtag => Hashtagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hashtag");
   private static Icon? HashtagLockf;
   public static Icon HashtagLock => HashtagLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hashtag-lock");
   private static Icon? HatBeachf;
   public static Icon HatBeach => HatBeachf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hat-beach");
   private static Icon? HatCheff;
   public static Icon HatChef => HatCheff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hat-chef");
   private static Icon? HatCowboyf;
   public static Icon HatCowboy => HatCowboyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hat-cowboy");
   private static Icon? HatCowboySidef;
   public static Icon HatCowboySide => HatCowboySidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hat-cowboy-side");
   private static Icon? HatSantaf;
   public static Icon HatSanta => HatSantaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hat-santa");
   private static Icon? HatWinterf;
   public static Icon HatWinter => HatWinterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hat-winter");
   private static Icon? HatWitchf;
   public static Icon HatWitch => HatWitchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hat-witch");
   private static Icon? HatWizardf;
   public static Icon HatWizard => HatWizardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hat-wizard");
   private static Icon? HeadSidef;
   public static Icon HeadSide => HeadSidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side");
   private static Icon? HeadSideBrainf;
   public static Icon HeadSideBrain => HeadSideBrainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-brain");
   private static Icon? HeadSideCoughf;
   public static Icon HeadSideCough => HeadSideCoughf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-cough");
   private static Icon? HeadSideCoughSlashf;
   public static Icon HeadSideCoughSlash => HeadSideCoughSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-cough-slash");
   private static Icon? HeadSideGearf;
   public static Icon HeadSideGear => HeadSideGearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-gear");
   private static Icon? HeadSideGogglesf;
   public static Icon HeadSideGoggles => HeadSideGogglesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-goggles");
   public static Icon HeadVr => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HeadSideGoggles;
   private static Icon? HeadSideHeadphonesf;
   public static Icon HeadSideHeadphones => HeadSideHeadphonesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-headphones");
   private static Icon? HeadSideHeartf;
   public static Icon HeadSideHeart => HeadSideHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-heart");
   private static Icon? HeadSideMaskf;
   public static Icon HeadSideMask => HeadSideMaskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-mask");
   private static Icon? HeadSideMedicalf;
   public static Icon HeadSideMedical => HeadSideMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-medical");
   private static Icon? HeadSideVirusf;
   public static Icon HeadSideVirus => HeadSideVirusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "head-side-virus");
   private static Icon? Headingf;
   public static Icon Heading => Headingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heading");
   public static Icon Header => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Heading;
   private static Icon? Headphonesf;
   public static Icon Headphones => Headphonesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "headphones");
   private static Icon? HeadphonesSimplef;
   public static Icon HeadphonesSimple => HeadphonesSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "headphones-simple");
   public static Icon HeadphonesAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HeadphonesSimple;
   private static Icon? Headsetf;
   public static Icon Headset => Headsetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "headset");
   private static Icon? Heartf;
   public static Icon Heart => Heartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart");
   private static Icon? HeartCircleBoltf;
   public static Icon HeartCircleBolt => HeartCircleBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-circle-bolt");
   private static Icon? HeartCircleCheckf;
   public static Icon HeartCircleCheck => HeartCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-circle-check");
   private static Icon? HeartCircleExclamationf;
   public static Icon HeartCircleExclamation => HeartCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-circle-exclamation");
   private static Icon? HeartCircleMinusf;
   public static Icon HeartCircleMinus => HeartCircleMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-circle-minus");
   private static Icon? HeartCirclePlusf;
   public static Icon HeartCirclePlus => HeartCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-circle-plus");
   private static Icon? HeartCircleXmarkf;
   public static Icon HeartCircleXmark => HeartCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-circle-xmark");
   private static Icon? HeartCrackf;
   public static Icon HeartCrack => HeartCrackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-crack");
   public static Icon HeartBroken => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HeartCrack;
   private static Icon? HeartHalff;
   public static Icon HeartHalf => HeartHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-half");
   private static Icon? HeartHalfStrokef;
   public static Icon HeartHalfStroke => HeartHalfStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-half-stroke");
   public static Icon HeartHalfAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HeartHalfStroke;
   private static Icon? HeartPulsef;
   public static Icon HeartPulse => HeartPulsef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heart-pulse");
   public static Icon Heartbeat => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HeartPulse;
   private static Icon? Heatf;
   public static Icon Heat => Heatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "heat");
   private static Icon? Helicopterf;
   public static Icon Helicopter => Helicopterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "helicopter");
   private static Icon? HelicopterSymbolf;
   public static Icon HelicopterSymbol => HelicopterSymbolf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "helicopter-symbol");
   private static Icon? HelmetBattlef;
   public static Icon HelmetBattle => HelmetBattlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "helmet-battle");
   private static Icon? HelmetSafetyf;
   public static Icon HelmetSafety => HelmetSafetyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "helmet-safety");
   public static Icon HardHat => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HelmetSafety;
   public static Icon HatHard => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HelmetSafety;
   private static Icon? HelmetUnf;
   public static Icon HelmetUn => HelmetUnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "helmet-un");
   private static Icon? Hexagonf;
   public static Icon Hexagon => Hexagonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon");
   private static Icon? HexagonCheckf;
   public static Icon HexagonCheck => HexagonCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-check");
   private static Icon? HexagonDividef;
   public static Icon HexagonDivide => HexagonDividef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-divide");
   private static Icon? HexagonExclamationf;
   public static Icon HexagonExclamation => HexagonExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-exclamation");
   private static Icon? HexagonImagef;
   public static Icon HexagonImage => HexagonImagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-image");
   private static Icon? HexagonMinusf;
   public static Icon HexagonMinus => HexagonMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-minus");
   public static Icon MinusHexagon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HexagonMinus;
   private static Icon? HexagonPlusf;
   public static Icon HexagonPlus => HexagonPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-plus");
   public static Icon PlusHexagon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HexagonPlus;
   private static Icon? HexagonVerticalNftf;
   public static Icon HexagonVerticalNft => HexagonVerticalNftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-vertical-nft");
   private static Icon? HexagonVerticalNftSlantedf;
   public static Icon HexagonVerticalNftSlanted => HexagonVerticalNftSlantedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-vertical-nft-slanted");
   private static Icon? HexagonXmarkf;
   public static Icon HexagonXmark => HexagonXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hexagon-xmark");
   public static Icon TimesHexagon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HexagonXmark;
   public static Icon XmarkHexagon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HexagonXmark;
   private static Icon? HighDefinitionf;
   public static Icon HighDefinition => HighDefinitionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "high-definition");
   public static Icon RectangleHd => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HighDefinition;
   private static Icon? Highlighterf;
   public static Icon Highlighter => Highlighterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "highlighter");
   private static Icon? HighlighterLinef;
   public static Icon HighlighterLine => HighlighterLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "highlighter-line");
   private static Icon? HillAvalanchef;
   public static Icon HillAvalanche => HillAvalanchef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hill-avalanche");
   private static Icon? HillRockslidef;
   public static Icon HillRockslide => HillRockslidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hill-rockslide");
   private static Icon? Hippof;
   public static Icon Hippo => Hippof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hippo");
   private static Icon? HockeyMaskf;
   public static Icon HockeyMask => HockeyMaskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hockey-mask");
   private static Icon? HockeyPuckf;
   public static Icon HockeyPuck => HockeyPuckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hockey-puck");
   private static Icon? HockeyStickPuckf;
   public static Icon HockeyStickPuck => HockeyStickPuckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hockey-stick-puck");
   private static Icon? HockeySticksf;
   public static Icon HockeySticks => HockeySticksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hockey-sticks");
   private static Icon? HollyBerryf;
   public static Icon HollyBerry => HollyBerryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "holly-berry");
   private static Icon? HoneyPotf;
   public static Icon HoneyPot => HoneyPotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "honey-pot");
   private static Icon? HoodCloakf;
   public static Icon HoodCloak => HoodCloakf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hood-cloak");
   private static Icon? HorizontalRulef;
   public static Icon HorizontalRule => HorizontalRulef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "horizontal-rule");
   private static Icon? Horsef;
   public static Icon Horse => Horsef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "horse");
   private static Icon? HorseHeadf;
   public static Icon HorseHead => HorseHeadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "horse-head");
   private static Icon? HorseSaddlef;
   public static Icon HorseSaddle => HorseSaddlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "horse-saddle");
   private static Icon? Hosef;
   public static Icon Hose => Hosef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hose");
   private static Icon? HoseReelf;
   public static Icon HoseReel => HoseReelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hose-reel");
   private static Icon? Hospitalf;
   public static Icon Hospital => Hospitalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hospital");
   public static Icon HospitalAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Hospital;
   public static Icon HospitalWide => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Hospital;
   private static Icon? HospitalUserf;
   public static Icon HospitalUser => HospitalUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hospital-user");
   private static Icon? Hospitalsf;
   public static Icon Hospitals => Hospitalsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hospitals");
   private static Icon? HotTubPersonf;
   public static Icon HotTubPerson => HotTubPersonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hot-tub-person");
   public static Icon HotTub => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HotTubPerson;
   private static Icon? Hotdogf;
   public static Icon Hotdog => Hotdogf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hotdog");
   private static Icon? Hotelf;
   public static Icon Hotel => Hotelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hotel");
   private static Icon? Hourglassf;
   public static Icon Hourglass => Hourglassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hourglass");
   public static Icon HourglassEmpty => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Hourglass;
   private static Icon? HourglassClockf;
   public static Icon HourglassClock => HourglassClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hourglass-clock");
   private static Icon? HourglassEndf;
   public static Icon HourglassEnd => HourglassEndf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hourglass-end");
   public static Icon Hourglass3 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HourglassEnd;
   private static Icon? HourglassHalff;
   public static Icon HourglassHalf => HourglassHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hourglass-half");
   public static Icon Hourglass2 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HourglassHalf;
   private static Icon? HourglassStartf;
   public static Icon HourglassStart => HourglassStartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hourglass-start");
   public static Icon Hourglass1 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HourglassStart;
   private static Icon? Housef;
   public static Icon House => Housef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house");
   public static Icon Home => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.House;
   public static Icon HomeAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.House;
   public static Icon HomeLgAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.House;
   private static Icon? HouseBlankf;
   public static Icon HouseBlank => HouseBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-blank");
   public static Icon HomeBlank => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HouseBlank;
   private static Icon? HouseBuildingf;
   public static Icon HouseBuilding => HouseBuildingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-building");
   private static Icon? HouseChimneyf;
   public static Icon HouseChimney => HouseChimneyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-chimney");
   public static Icon HomeLg => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HouseChimney;
   private static Icon? HouseChimneyBlankf;
   public static Icon HouseChimneyBlank => HouseChimneyBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-chimney-blank");
   private static Icon? HouseChimneyCrackf;
   public static Icon HouseChimneyCrack => HouseChimneyCrackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-chimney-crack");
   public static Icon HouseDamage => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HouseChimneyCrack;
   private static Icon? HouseChimneyHeartf;
   public static Icon HouseChimneyHeart => HouseChimneyHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-chimney-heart");
   private static Icon? HouseChimneyMedicalf;
   public static Icon HouseChimneyMedical => HouseChimneyMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-chimney-medical");
   public static Icon ClinicMedical => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HouseChimneyMedical;
   private static Icon? HouseChimneyUserf;
   public static Icon HouseChimneyUser => HouseChimneyUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-chimney-user");
   private static Icon? HouseChimneyWindowf;
   public static Icon HouseChimneyWindow => HouseChimneyWindowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-chimney-window");
   private static Icon? HouseCircleCheckf;
   public static Icon HouseCircleCheck => HouseCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-circle-check");
   private static Icon? HouseCircleExclamationf;
   public static Icon HouseCircleExclamation => HouseCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-circle-exclamation");
   private static Icon? HouseCircleXmarkf;
   public static Icon HouseCircleXmark => HouseCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-circle-xmark");
   private static Icon? HouseCrackf;
   public static Icon HouseCrack => HouseCrackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-crack");
   private static Icon? HouseDayf;
   public static Icon HouseDay => HouseDayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-day");
   private static Icon? HouseFiref;
   public static Icon HouseFire => HouseFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-fire");
   private static Icon? HouseFlagf;
   public static Icon HouseFlag => HouseFlagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-flag");
   private static Icon? HouseFloodWaterf;
   public static Icon HouseFloodWater => HouseFloodWaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-flood-water");
   private static Icon? HouseFloodWaterCircleArrowRightf;
   public static Icon HouseFloodWaterCircleArrowRight => HouseFloodWaterCircleArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-flood-water-circle-arrow-right");
   private static Icon? HouseHeartf;
   public static Icon HouseHeart => HouseHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-heart");
   public static Icon HomeHeart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HouseHeart;
   private static Icon? HouseLaptopf;
   public static Icon HouseLaptop => HouseLaptopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-laptop");
   public static Icon LaptopHouse => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HouseLaptop;
   private static Icon? HouseLockf;
   public static Icon HouseLock => HouseLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-lock");
   private static Icon? HouseMedicalf;
   public static Icon HouseMedical => HouseMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-medical");
   private static Icon? HouseMedicalCircleCheckf;
   public static Icon HouseMedicalCircleCheck => HouseMedicalCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-medical-circle-check");
   private static Icon? HouseMedicalCircleExclamationf;
   public static Icon HouseMedicalCircleExclamation => HouseMedicalCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-medical-circle-exclamation");
   private static Icon? HouseMedicalCircleXmarkf;
   public static Icon HouseMedicalCircleXmark => HouseMedicalCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-medical-circle-xmark");
   private static Icon? HouseMedicalFlagf;
   public static Icon HouseMedicalFlag => HouseMedicalFlagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-medical-flag");
   private static Icon? HouseNightf;
   public static Icon HouseNight => HouseNightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-night");
   private static Icon? HousePersonLeavef;
   public static Icon HousePersonLeave => HousePersonLeavef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-person-leave");
   public static Icon HouseLeave => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HousePersonLeave;
   public static Icon HousePersonDepart => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HousePersonLeave;
   private static Icon? HousePersonReturnf;
   public static Icon HousePersonReturn => HousePersonReturnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-person-return");
   public static Icon HousePersonArrive => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HousePersonReturn;
   public static Icon HouseReturn => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HousePersonReturn;
   private static Icon? HouseSignalf;
   public static Icon HouseSignal => HouseSignalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-signal");
   private static Icon? HouseTreef;
   public static Icon HouseTree => HouseTreef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-tree");
   private static Icon? HouseTsunamif;
   public static Icon HouseTsunami => HouseTsunamif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-tsunami");
   private static Icon? HouseTurretf;
   public static Icon HouseTurret => HouseTurretf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-turret");
   private static Icon? HouseUserf;
   public static Icon HouseUser => HouseUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-user");
   public static Icon HomeUser => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HouseUser;
   private static Icon? HouseWaterf;
   public static Icon HouseWater => HouseWaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-water");
   public static Icon HouseFlood => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HouseWater;
   private static Icon? HouseWindowf;
   public static Icon HouseWindow => HouseWindowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "house-window");
   private static Icon? HryvniaSignf;
   public static Icon HryvniaSign => HryvniaSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hryvnia-sign");
   public static Icon Hryvnia => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HryvniaSign;
   private static Icon? HundredPointsf;
   public static Icon HundredPoints => HundredPointsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hundred-points");
   public static Icon _100 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.HundredPoints;
   private static Icon? Hurricanef;
   public static Icon Hurricane => Hurricanef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hurricane");
   private static Icon? Hyphenf;
   public static Icon Hyphen => Hyphenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "hyphen");
   private static Icon? If;
   public static Icon I => If ??= new Icon(IconFamily.Sharp, IconStyle.Light, "i");
   private static Icon? ICursorf;
   public static Icon ICursor => ICursorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "i-cursor");
   private static Icon? IceCreamf;
   public static Icon IceCream => IceCreamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ice-cream");
   private static Icon? IceSkatef;
   public static Icon IceSkate => IceSkatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ice-skate");
   private static Icon? Iciclesf;
   public static Icon Icicles => Iciclesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "icicles");
   private static Icon? Iconsf;
   public static Icon Icons => Iconsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "icons");
   public static Icon HeartMusicCameraBolt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Icons;
   private static Icon? IdBadgef;
   public static Icon IdBadge => IdBadgef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "id-badge");
   private static Icon? IdCardf;
   public static Icon IdCard => IdCardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "id-card");
   public static Icon DriversLicense => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.IdCard;
   private static Icon? IdCardClipf;
   public static Icon IdCardClip => IdCardClipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "id-card-clip");
   public static Icon IdCardAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.IdCardClip;
   private static Icon? Igloof;
   public static Icon Igloo => Igloof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "igloo");
   private static Icon? Imagef;
   public static Icon Image => Imagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "image");
   private static Icon? ImageLandscapef;
   public static Icon ImageLandscape => ImageLandscapef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "image-landscape");
   public static Icon Landscape => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ImageLandscape;
   private static Icon? ImagePolaroidf;
   public static Icon ImagePolaroid => ImagePolaroidf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "image-polaroid");
   private static Icon? ImagePolaroidUserf;
   public static Icon ImagePolaroidUser => ImagePolaroidUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "image-polaroid-user");
   private static Icon? ImagePortraitf;
   public static Icon ImagePortrait => ImagePortraitf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "image-portrait");
   public static Icon Portrait => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ImagePortrait;
   private static Icon? ImageSlashf;
   public static Icon ImageSlash => ImageSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "image-slash");
   private static Icon? ImageUserf;
   public static Icon ImageUser => ImageUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "image-user");
   private static Icon? Imagesf;
   public static Icon Images => Imagesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "images");
   private static Icon? ImagesUserf;
   public static Icon ImagesUser => ImagesUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "images-user");
   private static Icon? Inboxf;
   public static Icon Inbox => Inboxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "inbox");
   private static Icon? InboxFullf;
   public static Icon InboxFull => InboxFullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "inbox-full");
   private static Icon? InboxInf;
   public static Icon InboxIn => InboxInf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "inbox-in");
   public static Icon InboxArrowDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.InboxIn;
   private static Icon? InboxOutf;
   public static Icon InboxOut => InboxOutf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "inbox-out");
   public static Icon InboxArrowUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.InboxOut;
   private static Icon? Inboxesf;
   public static Icon Inboxes => Inboxesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "inboxes");
   private static Icon? Indentf;
   public static Icon Indent => Indentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "indent");
   private static Icon? IndianRupeeSignf;
   public static Icon IndianRupeeSign => IndianRupeeSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "indian-rupee-sign");
   public static Icon IndianRupee => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.IndianRupeeSign;
   public static Icon Inr => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.IndianRupeeSign;
   private static Icon? Industryf;
   public static Icon Industry => Industryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "industry");
   private static Icon? IndustryWindowsf;
   public static Icon IndustryWindows => IndustryWindowsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "industry-windows");
   public static Icon IndustryAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.IndustryWindows;
   private static Icon? Infinityf;
   public static Icon Infinity => Infinityf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "infinity");
   private static Icon? Infof;
   public static Icon Info => Infof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "info");
   private static Icon? Inhalerf;
   public static Icon Inhaler => Inhalerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "inhaler");
   private static Icon? InputNumericf;
   public static Icon InputNumeric => InputNumericf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "input-numeric");
   private static Icon? InputPipef;
   public static Icon InputPipe => InputPipef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "input-pipe");
   private static Icon? InputTextf;
   public static Icon InputText => InputTextf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "input-text");
   private static Icon? Integralf;
   public static Icon Integral => Integralf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "integral");
   private static Icon? Interrobangf;
   public static Icon Interrobang => Interrobangf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "interrobang");
   private static Icon? Intersectionf;
   public static Icon Intersection => Intersectionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "intersection");
   private static Icon? IslandTropicalf;
   public static Icon IslandTropical => IslandTropicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "island-tropical");
   public static Icon IslandTreePalm => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.IslandTropical;
   private static Icon? Italicf;
   public static Icon Italic => Italicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "italic");
   private static Icon? Jf;
   public static Icon J => Jf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "j");
   private static Icon? JackOLanternf;
   public static Icon JackOLantern => JackOLanternf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jack-o-lantern");
   private static Icon? Jarf;
   public static Icon Jar => Jarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jar");
   private static Icon? JarWheatf;
   public static Icon JarWheat => JarWheatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jar-wheat");
   private static Icon? Jedif;
   public static Icon Jedi => Jedif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jedi");
   private static Icon? JetFighterf;
   public static Icon JetFighter => JetFighterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jet-fighter");
   public static Icon FighterJet => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.JetFighter;
   private static Icon? JetFighterUpf;
   public static Icon JetFighterUp => JetFighterUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jet-fighter-up");
   private static Icon? Jointf;
   public static Icon Joint => Jointf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "joint");
   private static Icon? Joystickf;
   public static Icon Joystick => Joystickf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "joystick");
   private static Icon? Jugf;
   public static Icon Jug => Jugf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jug");
   private static Icon? JugBottlef;
   public static Icon JugBottle => JugBottlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jug-bottle");
   private static Icon? JugDetergentf;
   public static Icon JugDetergent => JugDetergentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "jug-detergent");
   private static Icon? Kf;
   public static Icon K => Kf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "k");
   private static Icon? Kaabaf;
   public static Icon Kaaba => Kaabaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kaaba");
   private static Icon? Kazoof;
   public static Icon Kazoo => Kazoof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kazoo");
   private static Icon? Kerningf;
   public static Icon Kerning => Kerningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kerning");
   private static Icon? Keyf;
   public static Icon Key => Keyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "key");
   private static Icon? KeySkeletonf;
   public static Icon KeySkeleton => KeySkeletonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "key-skeleton");
   private static Icon? KeySkeletonLeftRightf;
   public static Icon KeySkeletonLeftRight => KeySkeletonLeftRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "key-skeleton-left-right");
   private static Icon? Keyboardf;
   public static Icon Keyboard => Keyboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "keyboard");
   private static Icon? KeyboardBrightnessf;
   public static Icon KeyboardBrightness => KeyboardBrightnessf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "keyboard-brightness");
   private static Icon? KeyboardBrightnessLowf;
   public static Icon KeyboardBrightnessLow => KeyboardBrightnessLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "keyboard-brightness-low");
   private static Icon? KeyboardDownf;
   public static Icon KeyboardDown => KeyboardDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "keyboard-down");
   private static Icon? KeyboardLeftf;
   public static Icon KeyboardLeft => KeyboardLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "keyboard-left");
   private static Icon? Keynotef;
   public static Icon Keynote => Keynotef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "keynote");
   private static Icon? Khandaf;
   public static Icon Khanda => Khandaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "khanda");
   private static Icon? Kidneysf;
   public static Icon Kidneys => Kidneysf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kidneys");
   private static Icon? KipSignf;
   public static Icon KipSign => KipSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kip-sign");
   private static Icon? KitMedicalf;
   public static Icon KitMedical => KitMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kit-medical");
   public static Icon FirstAid => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.KitMedical;
   private static Icon? KitchenSetf;
   public static Icon KitchenSet => KitchenSetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kitchen-set");
   private static Icon? Kitef;
   public static Icon Kite => Kitef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kite");
   private static Icon? KiwiBirdf;
   public static Icon KiwiBird => KiwiBirdf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kiwi-bird");
   private static Icon? KiwiFruitf;
   public static Icon KiwiFruit => KiwiFruitf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "kiwi-fruit");
   private static Icon? Knifef;
   public static Icon Knife => Knifef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "knife");
   public static Icon UtensilKnife => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Knife;
   private static Icon? KnifeKitchenf;
   public static Icon KnifeKitchen => KnifeKitchenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "knife-kitchen");
   private static Icon? Lf;
   public static Icon L => Lf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "l");
   private static Icon? LacrosseStickf;
   public static Icon LacrosseStick => LacrosseStickf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lacrosse-stick");
   private static Icon? LacrosseStickBallf;
   public static Icon LacrosseStickBall => LacrosseStickBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lacrosse-stick-ball");
   private static Icon? Lambdaf;
   public static Icon Lambda => Lambdaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lambda");
   private static Icon? Lampf;
   public static Icon Lamp => Lampf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lamp");
   private static Icon? LampDeskf;
   public static Icon LampDesk => LampDeskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lamp-desk");
   private static Icon? LampFloorf;
   public static Icon LampFloor => LampFloorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lamp-floor");
   private static Icon? LampStreetf;
   public static Icon LampStreet => LampStreetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lamp-street");
   private static Icon? LandMineOnf;
   public static Icon LandMineOn => LandMineOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "land-mine-on");
   private static Icon? Landmarkf;
   public static Icon Landmark => Landmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "landmark");
   private static Icon? LandmarkDomef;
   public static Icon LandmarkDome => LandmarkDomef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "landmark-dome");
   public static Icon LandmarkAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LandmarkDome;
   private static Icon? LandmarkFlagf;
   public static Icon LandmarkFlag => LandmarkFlagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "landmark-flag");
   private static Icon? LandmarkMagnifyingGlassf;
   public static Icon LandmarkMagnifyingGlass => LandmarkMagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "landmark-magnifying-glass");
   private static Icon? Languagef;
   public static Icon Language => Languagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "language");
   private static Icon? Laptopf;
   public static Icon Laptop => Laptopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "laptop");
   private static Icon? LaptopArrowDownf;
   public static Icon LaptopArrowDown => LaptopArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "laptop-arrow-down");
   private static Icon? LaptopBinaryf;
   public static Icon LaptopBinary => LaptopBinaryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "laptop-binary");
   private static Icon? LaptopCodef;
   public static Icon LaptopCode => LaptopCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "laptop-code");
   private static Icon? LaptopFilef;
   public static Icon LaptopFile => LaptopFilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "laptop-file");
   private static Icon? LaptopMedicalf;
   public static Icon LaptopMedical => LaptopMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "laptop-medical");
   private static Icon? LaptopMobilef;
   public static Icon LaptopMobile => LaptopMobilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "laptop-mobile");
   public static Icon PhoneLaptop => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LaptopMobile;
   private static Icon? LaptopSlashf;
   public static Icon LaptopSlash => LaptopSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "laptop-slash");
   private static Icon? LariSignf;
   public static Icon LariSign => LariSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lari-sign");
   private static Icon? Lassof;
   public static Icon Lasso => Lassof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lasso");
   private static Icon? LassoSparklesf;
   public static Icon LassoSparkles => LassoSparklesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lasso-sparkles");
   private static Icon? LayerGroupf;
   public static Icon LayerGroup => LayerGroupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "layer-group");
   private static Icon? LayerMinusf;
   public static Icon LayerMinus => LayerMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "layer-minus");
   public static Icon LayerGroupMinus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LayerMinus;
   private static Icon? LayerPlusf;
   public static Icon LayerPlus => LayerPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "layer-plus");
   public static Icon LayerGroupPlus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LayerPlus;
   private static Icon? Leaff;
   public static Icon Leaf => Leaff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "leaf");
   private static Icon? LeafHeartf;
   public static Icon LeafHeart => LeafHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "leaf-heart");
   private static Icon? LeafMaplef;
   public static Icon LeafMaple => LeafMaplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "leaf-maple");
   private static Icon? LeafOakf;
   public static Icon LeafOak => LeafOakf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "leaf-oak");
   private static Icon? LeafyGreenf;
   public static Icon LeafyGreen => LeafyGreenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "leafy-green");
   private static Icon? Leftf;
   public static Icon Left => Leftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "left");
   public static Icon ArrowAltLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Left;
   private static Icon? LeftFromLinef;
   public static Icon LeftFromLine => LeftFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "left-from-line");
   public static Icon ArrowAltFromRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LeftFromLine;
   private static Icon? LeftLongf;
   public static Icon LeftLong => LeftLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "left-long");
   public static Icon LongArrowAltLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LeftLong;
   private static Icon? LeftLongToLinef;
   public static Icon LeftLongToLine => LeftLongToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "left-long-to-line");
   private static Icon? LeftRightf;
   public static Icon LeftRight => LeftRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "left-right");
   public static Icon ArrowsAltH => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LeftRight;
   private static Icon? LeftToLinef;
   public static Icon LeftToLine => LeftToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "left-to-line");
   public static Icon ArrowAltToLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LeftToLine;
   private static Icon? Lemonf;
   public static Icon Lemon => Lemonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lemon");
   private static Icon? LessThanf;
   public static Icon LessThan => LessThanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "less-than");
   private static Icon? LessThanEqualf;
   public static Icon LessThanEqual => LessThanEqualf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "less-than-equal");
   private static Icon? LifeRingf;
   public static Icon LifeRing => LifeRingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "life-ring");
   private static Icon? LightCeilingf;
   public static Icon LightCeiling => LightCeilingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "light-ceiling");
   private static Icon? LightEmergencyf;
   public static Icon LightEmergency => LightEmergencyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "light-emergency");
   private static Icon? LightEmergencyOnf;
   public static Icon LightEmergencyOn => LightEmergencyOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "light-emergency-on");
   private static Icon? LightSwitchf;
   public static Icon LightSwitch => LightSwitchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "light-switch");
   private static Icon? LightSwitchOfff;
   public static Icon LightSwitchOff => LightSwitchOfff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "light-switch-off");
   private static Icon? LightSwitchOnf;
   public static Icon LightSwitchOn => LightSwitchOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "light-switch-on");
   private static Icon? Lightbulbf;
   public static Icon Lightbulb => Lightbulbf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb");
   private static Icon? LightbulbCflf;
   public static Icon LightbulbCfl => LightbulbCflf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb-cfl");
   private static Icon? LightbulbCflOnf;
   public static Icon LightbulbCflOn => LightbulbCflOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb-cfl-on");
   private static Icon? LightbulbDollarf;
   public static Icon LightbulbDollar => LightbulbDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb-dollar");
   private static Icon? LightbulbExclamationf;
   public static Icon LightbulbExclamation => LightbulbExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb-exclamation");
   private static Icon? LightbulbExclamationOnf;
   public static Icon LightbulbExclamationOn => LightbulbExclamationOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb-exclamation-on");
   private static Icon? LightbulbGearf;
   public static Icon LightbulbGear => LightbulbGearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb-gear");
   private static Icon? LightbulbOnf;
   public static Icon LightbulbOn => LightbulbOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb-on");
   private static Icon? LightbulbSlashf;
   public static Icon LightbulbSlash => LightbulbSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lightbulb-slash");
   private static Icon? Lighthousef;
   public static Icon Lighthouse => Lighthousef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lighthouse");
   private static Icon? LightsHolidayf;
   public static Icon LightsHoliday => LightsHolidayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lights-holiday");
   private static Icon? LineColumnsf;
   public static Icon LineColumns => LineColumnsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "line-columns");
   private static Icon? LineHeightf;
   public static Icon LineHeight => LineHeightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "line-height");
   private static Icon? LinesLeaningf;
   public static Icon LinesLeaning => LinesLeaningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lines-leaning");
   private static Icon? Linkf;
   public static Icon Link => Linkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "link");
   public static Icon Chain => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Link;
   private static Icon? LinkHorizontalf;
   public static Icon LinkHorizontal => LinkHorizontalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "link-horizontal");
   public static Icon ChainHorizontal => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LinkHorizontal;
   private static Icon? LinkHorizontalSlashf;
   public static Icon LinkHorizontalSlash => LinkHorizontalSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "link-horizontal-slash");
   public static Icon ChainHorizontalSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LinkHorizontalSlash;
   private static Icon? LinkSimplef;
   public static Icon LinkSimple => LinkSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "link-simple");
   private static Icon? LinkSimpleSlashf;
   public static Icon LinkSimpleSlash => LinkSimpleSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "link-simple-slash");
   private static Icon? LinkSlashf;
   public static Icon LinkSlash => LinkSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "link-slash");
   public static Icon ChainBroken => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LinkSlash;
   public static Icon ChainSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LinkSlash;
   public static Icon Unlink => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LinkSlash;
   private static Icon? Lipsf;
   public static Icon Lips => Lipsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lips");
   private static Icon? LiraSignf;
   public static Icon LiraSign => LiraSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lira-sign");
   private static Icon? Listf;
   public static Icon List => Listf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list");
   public static Icon ListSquares => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.List;
   private static Icon? ListCheckf;
   public static Icon ListCheck => ListCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list-check");
   public static Icon Tasks => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ListCheck;
   private static Icon? ListDropdownf;
   public static Icon ListDropdown => ListDropdownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list-dropdown");
   private static Icon? ListMusicf;
   public static Icon ListMusic => ListMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list-music");
   private static Icon? ListOlf;
   public static Icon ListOl => ListOlf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list-ol");
   public static Icon List12 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ListOl;
   public static Icon ListNumeric => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ListOl;
   private static Icon? ListRadiof;
   public static Icon ListRadio => ListRadiof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list-radio");
   private static Icon? ListTimelinef;
   public static Icon ListTimeline => ListTimelinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list-timeline");
   private static Icon? ListTreef;
   public static Icon ListTree => ListTreef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list-tree");
   private static Icon? ListUlf;
   public static Icon ListUl => ListUlf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "list-ul");
   public static Icon ListDots => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ListUl;
   private static Icon? LitecoinSignf;
   public static Icon LitecoinSign => LitecoinSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "litecoin-sign");
   private static Icon? Loaderf;
   public static Icon Loader => Loaderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "loader");
   private static Icon? Lobsterf;
   public static Icon Lobster => Lobsterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lobster");
   private static Icon? LocationArrowf;
   public static Icon LocationArrow => LocationArrowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-arrow");
   private static Icon? LocationArrowUpf;
   public static Icon LocationArrowUp => LocationArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-arrow-up");
   private static Icon? LocationCheckf;
   public static Icon LocationCheck => LocationCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-check");
   public static Icon MapMarkerCheck => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationCheck;
   private static Icon? LocationCrosshairsf;
   public static Icon LocationCrosshairs => LocationCrosshairsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-crosshairs");
   public static Icon Location => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationCrosshairs;
   private static Icon? LocationCrosshairsSlashf;
   public static Icon LocationCrosshairsSlash => LocationCrosshairsSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-crosshairs-slash");
   public static Icon LocationSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationCrosshairsSlash;
   private static Icon? LocationDotf;
   public static Icon LocationDot => LocationDotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-dot");
   public static Icon MapMarkerAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationDot;
   private static Icon? LocationDotSlashf;
   public static Icon LocationDotSlash => LocationDotSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-dot-slash");
   public static Icon MapMarkerAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationDotSlash;
   private static Icon? LocationExclamationf;
   public static Icon LocationExclamation => LocationExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-exclamation");
   public static Icon MapMarkerExclamation => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationExclamation;
   private static Icon? LocationMinusf;
   public static Icon LocationMinus => LocationMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-minus");
   public static Icon MapMarkerMinus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationMinus;
   private static Icon? LocationPenf;
   public static Icon LocationPen => LocationPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-pen");
   public static Icon MapMarkerEdit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationPen;
   private static Icon? LocationPinf;
   public static Icon LocationPin => LocationPinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-pin");
   public static Icon MapMarker => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationPin;
   private static Icon? LocationPinLockf;
   public static Icon LocationPinLock => LocationPinLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-pin-lock");
   private static Icon? LocationPinSlashf;
   public static Icon LocationPinSlash => LocationPinSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-pin-slash");
   public static Icon MapMarkerSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationPinSlash;
   private static Icon? LocationPlusf;
   public static Icon LocationPlus => LocationPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-plus");
   public static Icon MapMarkerPlus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationPlus;
   private static Icon? LocationQuestionf;
   public static Icon LocationQuestion => LocationQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-question");
   public static Icon MapMarkerQuestion => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationQuestion;
   private static Icon? LocationSmilef;
   public static Icon LocationSmile => LocationSmilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-smile");
   public static Icon MapMarkerSmile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationSmile;
   private static Icon? LocationXmarkf;
   public static Icon LocationXmark => LocationXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "location-xmark");
   public static Icon MapMarkerTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationXmark;
   public static Icon MapMarkerXmark => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LocationXmark;
   private static Icon? Lockf;
   public static Icon Lock => Lockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lock");
   private static Icon? LockAf;
   public static Icon LockA => LockAf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lock-a");
   private static Icon? LockHashtagf;
   public static Icon LockHashtag => LockHashtagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lock-hashtag");
   private static Icon? LockKeyholef;
   public static Icon LockKeyhole => LockKeyholef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lock-keyhole");
   public static Icon LockAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LockKeyhole;
   private static Icon? LockKeyholeOpenf;
   public static Icon LockKeyholeOpen => LockKeyholeOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lock-keyhole-open");
   public static Icon LockOpenAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LockKeyholeOpen;
   private static Icon? LockOpenf;
   public static Icon LockOpen => LockOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lock-open");
   private static Icon? Locustf;
   public static Icon Locust => Locustf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "locust");
   private static Icon? Lollipopf;
   public static Icon Lollipop => Lollipopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lollipop");
   public static Icon Lollypop => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Lollipop;
   private static Icon? Loveseatf;
   public static Icon Loveseat => Loveseatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "loveseat");
   public static Icon CouchSmall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Loveseat;
   private static Icon? LuchadorMaskf;
   public static Icon LuchadorMask => LuchadorMaskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "luchador-mask");
   public static Icon Luchador => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LuchadorMask;
   public static Icon MaskLuchador => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.LuchadorMask;
   private static Icon? Lungsf;
   public static Icon Lungs => Lungsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lungs");
   private static Icon? LungsVirusf;
   public static Icon LungsVirus => LungsVirusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "lungs-virus");
   private static Icon? Mf;
   public static Icon M => Mf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "m");
   private static Icon? Macef;
   public static Icon Mace => Macef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mace");
   private static Icon? Magnetf;
   public static Icon Magnet => Magnetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnet");
   private static Icon? MagnifyingGlassf;
   public static Icon MagnifyingGlass => MagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass");
   public static Icon Search => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MagnifyingGlass;
   private static Icon? MagnifyingGlassArrowRightf;
   public static Icon MagnifyingGlassArrowRight => MagnifyingGlassArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-arrow-right");
   private static Icon? MagnifyingGlassArrowsRotatef;
   public static Icon MagnifyingGlassArrowsRotate => MagnifyingGlassArrowsRotatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-arrows-rotate");
   private static Icon? MagnifyingGlassChartf;
   public static Icon MagnifyingGlassChart => MagnifyingGlassChartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-chart");
   private static Icon? MagnifyingGlassDollarf;
   public static Icon MagnifyingGlassDollar => MagnifyingGlassDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-dollar");
   public static Icon SearchDollar => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MagnifyingGlassDollar;
   private static Icon? MagnifyingGlassLocationf;
   public static Icon MagnifyingGlassLocation => MagnifyingGlassLocationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-location");
   public static Icon SearchLocation => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MagnifyingGlassLocation;
   private static Icon? MagnifyingGlassMinusf;
   public static Icon MagnifyingGlassMinus => MagnifyingGlassMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-minus");
   public static Icon SearchMinus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MagnifyingGlassMinus;
   private static Icon? MagnifyingGlassMusicf;
   public static Icon MagnifyingGlassMusic => MagnifyingGlassMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-music");
   private static Icon? MagnifyingGlassPlayf;
   public static Icon MagnifyingGlassPlay => MagnifyingGlassPlayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-play");
   private static Icon? MagnifyingGlassPlusf;
   public static Icon MagnifyingGlassPlus => MagnifyingGlassPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-plus");
   public static Icon SearchPlus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MagnifyingGlassPlus;
   private static Icon? MagnifyingGlassWaveformf;
   public static Icon MagnifyingGlassWaveform => MagnifyingGlassWaveformf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "magnifying-glass-waveform");
   private static Icon? Mailboxf;
   public static Icon Mailbox => Mailboxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mailbox");
   private static Icon? MailboxFlagUpf;
   public static Icon MailboxFlagUp => MailboxFlagUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mailbox-flag-up");
   private static Icon? ManatSignf;
   public static Icon ManatSign => ManatSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "manat-sign");
   private static Icon? Mandolinf;
   public static Icon Mandolin => Mandolinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mandolin");
   private static Icon? Mangof;
   public static Icon Mango => Mangof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mango");
   private static Icon? Manholef;
   public static Icon Manhole => Manholef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "manhole");
   private static Icon? Mapf;
   public static Icon Map => Mapf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "map");
   private static Icon? MapLocationf;
   public static Icon MapLocation => MapLocationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "map-location");
   public static Icon MapMarked => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MapLocation;
   private static Icon? MapLocationDotf;
   public static Icon MapLocationDot => MapLocationDotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "map-location-dot");
   public static Icon MapMarkedAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MapLocationDot;
   private static Icon? MapPinf;
   public static Icon MapPin => MapPinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "map-pin");
   private static Icon? Markerf;
   public static Icon Marker => Markerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "marker");
   private static Icon? Marsf;
   public static Icon Mars => Marsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mars");
   private static Icon? MarsAndVenusf;
   public static Icon MarsAndVenus => MarsAndVenusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mars-and-venus");
   private static Icon? MarsAndVenusBurstf;
   public static Icon MarsAndVenusBurst => MarsAndVenusBurstf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mars-and-venus-burst");
   private static Icon? MarsDoublef;
   public static Icon MarsDouble => MarsDoublef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mars-double");
   private static Icon? MarsStrokef;
   public static Icon MarsStroke => MarsStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mars-stroke");
   private static Icon? MarsStrokeRightf;
   public static Icon MarsStrokeRight => MarsStrokeRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mars-stroke-right");
   public static Icon MarsStrokeH => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MarsStrokeRight;
   private static Icon? MarsStrokeUpf;
   public static Icon MarsStrokeUp => MarsStrokeUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mars-stroke-up");
   public static Icon MarsStrokeV => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MarsStrokeUp;
   private static Icon? MartiniGlassf;
   public static Icon MartiniGlass => MartiniGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "martini-glass");
   public static Icon GlassMartiniAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MartiniGlass;
   private static Icon? MartiniGlassCitrusf;
   public static Icon MartiniGlassCitrus => MartiniGlassCitrusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "martini-glass-citrus");
   public static Icon Cocktail => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MartiniGlassCitrus;
   private static Icon? MartiniGlassEmptyf;
   public static Icon MartiniGlassEmpty => MartiniGlassEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "martini-glass-empty");
   public static Icon GlassMartini => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MartiniGlassEmpty;
   private static Icon? Maskf;
   public static Icon Mask => Maskf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mask");
   private static Icon? MaskFacef;
   public static Icon MaskFace => MaskFacef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mask-face");
   private static Icon? MaskSnorkelf;
   public static Icon MaskSnorkel => MaskSnorkelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mask-snorkel");
   private static Icon? MaskVentilatorf;
   public static Icon MaskVentilator => MaskVentilatorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mask-ventilator");
   private static Icon? MasksTheaterf;
   public static Icon MasksTheater => MasksTheaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "masks-theater");
   public static Icon TheaterMasks => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MasksTheater;
   private static Icon? MattressPillowf;
   public static Icon MattressPillow => MattressPillowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mattress-pillow");
   private static Icon? Maximizef;
   public static Icon Maximize => Maximizef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "maximize");
   public static Icon ExpandArrowsAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Maximize;
   private static Icon? Meatf;
   public static Icon Meat => Meatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "meat");
   private static Icon? Medalf;
   public static Icon Medal => Medalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "medal");
   private static Icon? Megaphonef;
   public static Icon Megaphone => Megaphonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "megaphone");
   private static Icon? Melonf;
   public static Icon Melon => Melonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "melon");
   private static Icon? MelonSlicef;
   public static Icon MelonSlice => MelonSlicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "melon-slice");
   private static Icon? Memof;
   public static Icon Memo => Memof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "memo");
   private static Icon? MemoCircleCheckf;
   public static Icon MemoCircleCheck => MemoCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "memo-circle-check");
   private static Icon? MemoCircleInfof;
   public static Icon MemoCircleInfo => MemoCircleInfof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "memo-circle-info");
   private static Icon? MemoPadf;
   public static Icon MemoPad => MemoPadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "memo-pad");
   private static Icon? Memoryf;
   public static Icon Memory => Memoryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "memory");
   private static Icon? Menorahf;
   public static Icon Menorah => Menorahf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "menorah");
   private static Icon? Mercuryf;
   public static Icon Mercury => Mercuryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mercury");
   private static Icon? Mergef;
   public static Icon Merge => Mergef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "merge");
   private static Icon? Messagef;
   public static Icon Message => Messagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message");
   public static Icon CommentAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Message;
   private static Icon? MessageArrowDownf;
   public static Icon MessageArrowDown => MessageArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-arrow-down");
   public static Icon CommentAltArrowDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageArrowDown;
   private static Icon? MessageArrowUpf;
   public static Icon MessageArrowUp => MessageArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-arrow-up");
   public static Icon CommentAltArrowUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageArrowUp;
   private static Icon? MessageArrowUpRightf;
   public static Icon MessageArrowUpRight => MessageArrowUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-arrow-up-right");
   private static Icon? MessageBotf;
   public static Icon MessageBot => MessageBotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-bot");
   private static Icon? MessageCaptionsf;
   public static Icon MessageCaptions => MessageCaptionsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-captions");
   public static Icon CommentAltCaptions => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageCaptions;
   private static Icon? MessageCheckf;
   public static Icon MessageCheck => MessageCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-check");
   public static Icon CommentAltCheck => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageCheck;
   private static Icon? MessageCodef;
   public static Icon MessageCode => MessageCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-code");
   private static Icon? MessageDollarf;
   public static Icon MessageDollar => MessageDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-dollar");
   public static Icon CommentAltDollar => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageDollar;
   private static Icon? MessageDotsf;
   public static Icon MessageDots => MessageDotsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-dots");
   public static Icon CommentAltDots => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageDots;
   public static Icon Messaging => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageDots;
   private static Icon? MessageExclamationf;
   public static Icon MessageExclamation => MessageExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-exclamation");
   public static Icon CommentAltExclamation => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageExclamation;
   private static Icon? MessageHeartf;
   public static Icon MessageHeart => MessageHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-heart");
   private static Icon? MessageImagef;
   public static Icon MessageImage => MessageImagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-image");
   public static Icon CommentAltImage => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageImage;
   private static Icon? MessageLinesf;
   public static Icon MessageLines => MessageLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-lines");
   public static Icon CommentAltLines => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageLines;
   private static Icon? MessageMedicalf;
   public static Icon MessageMedical => MessageMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-medical");
   public static Icon CommentAltMedical => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageMedical;
   private static Icon? MessageMiddlef;
   public static Icon MessageMiddle => MessageMiddlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-middle");
   public static Icon CommentMiddleAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageMiddle;
   private static Icon? MessageMiddleTopf;
   public static Icon MessageMiddleTop => MessageMiddleTopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-middle-top");
   public static Icon CommentMiddleTopAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageMiddleTop;
   private static Icon? MessageMinusf;
   public static Icon MessageMinus => MessageMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-minus");
   public static Icon CommentAltMinus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageMinus;
   private static Icon? MessageMusicf;
   public static Icon MessageMusic => MessageMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-music");
   public static Icon CommentAltMusic => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageMusic;
   private static Icon? MessagePenf;
   public static Icon MessagePen => MessagePenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-pen");
   public static Icon CommentAltEdit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessagePen;
   public static Icon MessageEdit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessagePen;
   private static Icon? MessagePlusf;
   public static Icon MessagePlus => MessagePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-plus");
   public static Icon CommentAltPlus => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessagePlus;
   private static Icon? MessageQuestionf;
   public static Icon MessageQuestion => MessageQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-question");
   private static Icon? MessageQuotef;
   public static Icon MessageQuote => MessageQuotef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-quote");
   public static Icon CommentAltQuote => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageQuote;
   private static Icon? MessageSlashf;
   public static Icon MessageSlash => MessageSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-slash");
   public static Icon CommentAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageSlash;
   private static Icon? MessageSmilef;
   public static Icon MessageSmile => MessageSmilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-smile");
   public static Icon CommentAltSmile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageSmile;
   private static Icon? MessageSmsf;
   public static Icon MessageSms => MessageSmsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-sms");
   private static Icon? MessageTextf;
   public static Icon MessageText => MessageTextf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-text");
   public static Icon CommentAltText => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageText;
   private static Icon? MessageXmarkf;
   public static Icon MessageXmark => MessageXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "message-xmark");
   public static Icon CommentAltTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageXmark;
   public static Icon MessageTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessageXmark;
   private static Icon? Messagesf;
   public static Icon Messages => Messagesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "messages");
   public static Icon CommentsAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Messages;
   private static Icon? MessagesDollarf;
   public static Icon MessagesDollar => MessagesDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "messages-dollar");
   public static Icon CommentsAltDollar => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MessagesDollar;
   private static Icon? MessagesQuestionf;
   public static Icon MessagesQuestion => MessagesQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "messages-question");
   private static Icon? Meteorf;
   public static Icon Meteor => Meteorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "meteor");
   private static Icon? Meterf;
   public static Icon Meter => Meterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "meter");
   private static Icon? MeterBoltf;
   public static Icon MeterBolt => MeterBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "meter-bolt");
   private static Icon? MeterDropletf;
   public static Icon MeterDroplet => MeterDropletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "meter-droplet");
   private static Icon? MeterFiref;
   public static Icon MeterFire => MeterFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "meter-fire");
   private static Icon? Microchipf;
   public static Icon Microchip => Microchipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microchip");
   private static Icon? MicrochipAif;
   public static Icon MicrochipAi => MicrochipAif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microchip-ai");
   private static Icon? Microphonef;
   public static Icon Microphone => Microphonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microphone");
   private static Icon? MicrophoneLinesf;
   public static Icon MicrophoneLines => MicrophoneLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microphone-lines");
   public static Icon MicrophoneAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MicrophoneLines;
   private static Icon? MicrophoneLinesSlashf;
   public static Icon MicrophoneLinesSlash => MicrophoneLinesSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microphone-lines-slash");
   public static Icon MicrophoneAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MicrophoneLinesSlash;
   private static Icon? MicrophoneSlashf;
   public static Icon MicrophoneSlash => MicrophoneSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microphone-slash");
   private static Icon? MicrophoneStandf;
   public static Icon MicrophoneStand => MicrophoneStandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microphone-stand");
   private static Icon? Microscopef;
   public static Icon Microscope => Microscopef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microscope");
   private static Icon? Microwavef;
   public static Icon Microwave => Microwavef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "microwave");
   private static Icon? MillSignf;
   public static Icon MillSign => MillSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mill-sign");
   private static Icon? Minimizef;
   public static Icon Minimize => Minimizef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "minimize");
   public static Icon CompressArrowsAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Minimize;
   private static Icon? Minusf;
   public static Icon Minus => Minusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "minus");
   public static Icon Subtract => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Minus;
   private static Icon? Mistletoef;
   public static Icon Mistletoe => Mistletoef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mistletoe");
   private static Icon? Mittenf;
   public static Icon Mitten => Mittenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mitten");
   private static Icon? Mobilef;
   public static Icon Mobile => Mobilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mobile");
   public static Icon MobileAndroid => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Mobile;
   public static Icon MobilePhone => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Mobile;
   private static Icon? MobileButtonf;
   public static Icon MobileButton => MobileButtonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mobile-button");
   private static Icon? MobileNotchf;
   public static Icon MobileNotch => MobileNotchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mobile-notch");
   public static Icon MobileIphone => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MobileNotch;
   private static Icon? MobileRetrof;
   public static Icon MobileRetro => MobileRetrof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mobile-retro");
   private static Icon? MobileScreenf;
   public static Icon MobileScreen => MobileScreenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mobile-screen");
   public static Icon MobileAndroidAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MobileScreen;
   private static Icon? MobileScreenButtonf;
   public static Icon MobileScreenButton => MobileScreenButtonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mobile-screen-button");
   public static Icon MobileAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MobileScreenButton;
   private static Icon? MobileSignalf;
   public static Icon MobileSignal => MobileSignalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mobile-signal");
   private static Icon? MobileSignalOutf;
   public static Icon MobileSignalOut => MobileSignalOutf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mobile-signal-out");
   private static Icon? MoneyBillf;
   public static Icon MoneyBill => MoneyBillf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill");
   private static Icon? MoneyBill1f;
   public static Icon MoneyBill1 => MoneyBill1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill-1");
   public static Icon MoneyBillAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MoneyBill1;
   private static Icon? MoneyBill1Wavef;
   public static Icon MoneyBill1Wave => MoneyBill1Wavef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill-1-wave");
   public static Icon MoneyBillWaveAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MoneyBill1Wave;
   private static Icon? MoneyBillSimplef;
   public static Icon MoneyBillSimple => MoneyBillSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill-simple");
   private static Icon? MoneyBillSimpleWavef;
   public static Icon MoneyBillSimpleWave => MoneyBillSimpleWavef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill-simple-wave");
   private static Icon? MoneyBillTransferf;
   public static Icon MoneyBillTransfer => MoneyBillTransferf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill-transfer");
   private static Icon? MoneyBillTrendUpf;
   public static Icon MoneyBillTrendUp => MoneyBillTrendUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill-trend-up");
   private static Icon? MoneyBillWavef;
   public static Icon MoneyBillWave => MoneyBillWavef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill-wave");
   private static Icon? MoneyBillWheatf;
   public static Icon MoneyBillWheat => MoneyBillWheatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bill-wheat");
   private static Icon? MoneyBillsf;
   public static Icon MoneyBills => MoneyBillsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bills");
   private static Icon? MoneyBillsSimplef;
   public static Icon MoneyBillsSimple => MoneyBillsSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-bills-simple");
   public static Icon MoneyBillsAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MoneyBillsSimple;
   private static Icon? MoneyCheckf;
   public static Icon MoneyCheck => MoneyCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-check");
   private static Icon? MoneyCheckDollarf;
   public static Icon MoneyCheckDollar => MoneyCheckDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-check-dollar");
   public static Icon MoneyCheckAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MoneyCheckDollar;
   private static Icon? MoneyCheckDollarPenf;
   public static Icon MoneyCheckDollarPen => MoneyCheckDollarPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-check-dollar-pen");
   public static Icon MoneyCheckEditAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MoneyCheckDollarPen;
   private static Icon? MoneyCheckPenf;
   public static Icon MoneyCheckPen => MoneyCheckPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-check-pen");
   public static Icon MoneyCheckEdit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MoneyCheckPen;
   private static Icon? MoneyFromBracketf;
   public static Icon MoneyFromBracket => MoneyFromBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-from-bracket");
   private static Icon? MoneySimpleFromBracketf;
   public static Icon MoneySimpleFromBracket => MoneySimpleFromBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "money-simple-from-bracket");
   private static Icon? MonitorWaveformf;
   public static Icon MonitorWaveform => MonitorWaveformf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "monitor-waveform");
   public static Icon MonitorHeartRate => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MonitorWaveform;
   private static Icon? Monkeyf;
   public static Icon Monkey => Monkeyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "monkey");
   private static Icon? Monumentf;
   public static Icon Monument => Monumentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "monument");
   private static Icon? Moonf;
   public static Icon Moon => Moonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "moon");
   private static Icon? MoonCloudf;
   public static Icon MoonCloud => MoonCloudf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "moon-cloud");
   private static Icon? MoonOverSunf;
   public static Icon MoonOverSun => MoonOverSunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "moon-over-sun");
   public static Icon EclipseAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MoonOverSun;
   private static Icon? MoonStarsf;
   public static Icon MoonStars => MoonStarsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "moon-stars");
   private static Icon? Mopedf;
   public static Icon Moped => Mopedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "moped");
   private static Icon? MortarPestlef;
   public static Icon MortarPestle => MortarPestlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mortar-pestle");
   private static Icon? Mosquef;
   public static Icon Mosque => Mosquef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mosque");
   private static Icon? Mosquitof;
   public static Icon Mosquito => Mosquitof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mosquito");
   private static Icon? MosquitoNetf;
   public static Icon MosquitoNet => MosquitoNetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mosquito-net");
   private static Icon? Motorcyclef;
   public static Icon Motorcycle => Motorcyclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "motorcycle");
   private static Icon? Moundf;
   public static Icon Mound => Moundf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mound");
   private static Icon? Mountainf;
   public static Icon Mountain => Mountainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mountain");
   private static Icon? MountainCityf;
   public static Icon MountainCity => MountainCityf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mountain-city");
   private static Icon? MountainSunf;
   public static Icon MountainSun => MountainSunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mountain-sun");
   private static Icon? Mountainsf;
   public static Icon Mountains => Mountainsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mountains");
   private static Icon? MouseFieldf;
   public static Icon MouseField => MouseFieldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mouse-field");
   private static Icon? Mp3Playerf;
   public static Icon Mp3Player => Mp3Playerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mp3-player");
   private static Icon? Mugf;
   public static Icon Mug => Mugf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mug");
   private static Icon? MugHotf;
   public static Icon MugHot => MugHotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mug-hot");
   private static Icon? MugMarshmallowsf;
   public static Icon MugMarshmallows => MugMarshmallowsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mug-marshmallows");
   private static Icon? MugSaucerf;
   public static Icon MugSaucer => MugSaucerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mug-saucer");
   public static Icon Coffee => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MugSaucer;
   private static Icon? MugTeaf;
   public static Icon MugTea => MugTeaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mug-tea");
   private static Icon? MugTeaSaucerf;
   public static Icon MugTeaSaucer => MugTeaSaucerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mug-tea-saucer");
   private static Icon? Mushroomf;
   public static Icon Mushroom => Mushroomf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mushroom");
   private static Icon? Musicf;
   public static Icon Music => Musicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "music");
   private static Icon? MusicMagnifyingGlassf;
   public static Icon MusicMagnifyingGlass => MusicMagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "music-magnifying-glass");
   private static Icon? MusicNotef;
   public static Icon MusicNote => MusicNotef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "music-note");
   public static Icon MusicAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MusicNote;
   private static Icon? MusicNoteSlashf;
   public static Icon MusicNoteSlash => MusicNoteSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "music-note-slash");
   public static Icon MusicAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.MusicNoteSlash;
   private static Icon? MusicSlashf;
   public static Icon MusicSlash => MusicSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "music-slash");
   private static Icon? Mustachef;
   public static Icon Mustache => Mustachef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "mustache");
   private static Icon? Nf;
   public static Icon N => Nf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "n");
   private static Icon? NairaSignf;
   public static Icon NairaSign => NairaSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "naira-sign");
   private static Icon? Narwhalf;
   public static Icon Narwhal => Narwhalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "narwhal");
   private static Icon? NestingDollsf;
   public static Icon NestingDolls => NestingDollsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nesting-dolls");
   private static Icon? NetworkWiredf;
   public static Icon NetworkWired => NetworkWiredf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "network-wired");
   private static Icon? Neuterf;
   public static Icon Neuter => Neuterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "neuter");
   private static Icon? Newspaperf;
   public static Icon Newspaper => Newspaperf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "newspaper");
   private static Icon? Nfcf;
   public static Icon Nfc => Nfcf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nfc");
   private static Icon? NfcLockf;
   public static Icon NfcLock => NfcLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nfc-lock");
   private static Icon? NfcMagnifyingGlassf;
   public static Icon NfcMagnifyingGlass => NfcMagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nfc-magnifying-glass");
   private static Icon? NfcPenf;
   public static Icon NfcPen => NfcPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nfc-pen");
   private static Icon? NfcSignalf;
   public static Icon NfcSignal => NfcSignalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nfc-signal");
   private static Icon? NfcSlashf;
   public static Icon NfcSlash => NfcSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nfc-slash");
   private static Icon? NfcSymbolf;
   public static Icon NfcSymbol => NfcSymbolf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nfc-symbol");
   private static Icon? NfcTrashf;
   public static Icon NfcTrash => NfcTrashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nfc-trash");
   private static Icon? Nosef;
   public static Icon Nose => Nosef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "nose");
   private static Icon? NotEqualf;
   public static Icon NotEqual => NotEqualf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "not-equal");
   private static Icon? Notdeff;
   public static Icon Notdef => Notdeff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "notdef");
   private static Icon? Notef;
   public static Icon Note => Notef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "note");
   private static Icon? NoteMedicalf;
   public static Icon NoteMedical => NoteMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "note-medical");
   private static Icon? NoteStickyf;
   public static Icon NoteSticky => NoteStickyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "note-sticky");
   public static Icon StickyNote => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.NoteSticky;
   private static Icon? Notebookf;
   public static Icon Notebook => Notebookf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "notebook");
   private static Icon? Notesf;
   public static Icon Notes => Notesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "notes");
   private static Icon? NotesMedicalf;
   public static Icon NotesMedical => NotesMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "notes-medical");
   private static Icon? Of;
   public static Icon O => Of ??= new Icon(IconFamily.Sharp, IconStyle.Light, "o");
   private static Icon? ObjectExcludef;
   public static Icon ObjectExclude => ObjectExcludef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "object-exclude");
   private static Icon? ObjectGroupf;
   public static Icon ObjectGroup => ObjectGroupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "object-group");
   private static Icon? ObjectIntersectf;
   public static Icon ObjectIntersect => ObjectIntersectf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "object-intersect");
   private static Icon? ObjectSubtractf;
   public static Icon ObjectSubtract => ObjectSubtractf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "object-subtract");
   private static Icon? ObjectUngroupf;
   public static Icon ObjectUngroup => ObjectUngroupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "object-ungroup");
   private static Icon? ObjectUnionf;
   public static Icon ObjectUnion => ObjectUnionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "object-union");
   private static Icon? ObjectsAlignBottomf;
   public static Icon ObjectsAlignBottom => ObjectsAlignBottomf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "objects-align-bottom");
   private static Icon? ObjectsAlignCenterHorizontalf;
   public static Icon ObjectsAlignCenterHorizontal => ObjectsAlignCenterHorizontalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "objects-align-center-horizontal");
   private static Icon? ObjectsAlignCenterVerticalf;
   public static Icon ObjectsAlignCenterVertical => ObjectsAlignCenterVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "objects-align-center-vertical");
   private static Icon? ObjectsAlignLeftf;
   public static Icon ObjectsAlignLeft => ObjectsAlignLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "objects-align-left");
   private static Icon? ObjectsAlignRightf;
   public static Icon ObjectsAlignRight => ObjectsAlignRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "objects-align-right");
   private static Icon? ObjectsAlignTopf;
   public static Icon ObjectsAlignTop => ObjectsAlignTopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "objects-align-top");
   private static Icon? ObjectsColumnf;
   public static Icon ObjectsColumn => ObjectsColumnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "objects-column");
   private static Icon? Octagonf;
   public static Icon Octagon => Octagonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "octagon");
   private static Icon? OctagonCheckf;
   public static Icon OctagonCheck => OctagonCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "octagon-check");
   private static Icon? OctagonDividef;
   public static Icon OctagonDivide => OctagonDividef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "octagon-divide");
   private static Icon? OctagonExclamationf;
   public static Icon OctagonExclamation => OctagonExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "octagon-exclamation");
   private static Icon? OctagonMinusf;
   public static Icon OctagonMinus => OctagonMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "octagon-minus");
   public static Icon MinusOctagon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.OctagonMinus;
   private static Icon? OctagonPlusf;
   public static Icon OctagonPlus => OctagonPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "octagon-plus");
   public static Icon PlusOctagon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.OctagonPlus;
   private static Icon? OctagonXmarkf;
   public static Icon OctagonXmark => OctagonXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "octagon-xmark");
   public static Icon TimesOctagon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.OctagonXmark;
   public static Icon XmarkOctagon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.OctagonXmark;
   private static Icon? OilCanf;
   public static Icon OilCan => OilCanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "oil-can");
   private static Icon? OilCanDripf;
   public static Icon OilCanDrip => OilCanDripf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "oil-can-drip");
   private static Icon? OilTemperaturef;
   public static Icon OilTemperature => OilTemperaturef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "oil-temperature");
   public static Icon OilTemp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.OilTemperature;
   private static Icon? OilWellf;
   public static Icon OilWell => OilWellf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "oil-well");
   private static Icon? Olivef;
   public static Icon Olive => Olivef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "olive");
   private static Icon? OliveBranchf;
   public static Icon OliveBranch => OliveBranchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "olive-branch");
   private static Icon? Omf;
   public static Icon Om => Omf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "om");
   private static Icon? Omegaf;
   public static Icon Omega => Omegaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "omega");
   private static Icon? Onionf;
   public static Icon Onion => Onionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "onion");
   private static Icon? Optionf;
   public static Icon Option => Optionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "option");
   private static Icon? Ornamentf;
   public static Icon Ornament => Ornamentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ornament");
   private static Icon? Otterf;
   public static Icon Otter => Otterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "otter");
   private static Icon? Outdentf;
   public static Icon Outdent => Outdentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "outdent");
   public static Icon Dedent => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Outdent;
   private static Icon? Outletf;
   public static Icon Outlet => Outletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "outlet");
   private static Icon? Ovenf;
   public static Icon Oven => Ovenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "oven");
   private static Icon? Overlinef;
   public static Icon Overline => Overlinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "overline");
   private static Icon? Pf;
   public static Icon P => Pf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "p");
   private static Icon? Pagef;
   public static Icon Page => Pagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "page");
   private static Icon? PageCaretDownf;
   public static Icon PageCaretDown => PageCaretDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "page-caret-down");
   public static Icon FileCaretDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PageCaretDown;
   private static Icon? PageCaretUpf;
   public static Icon PageCaretUp => PageCaretUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "page-caret-up");
   public static Icon FileCaretUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PageCaretUp;
   private static Icon? Pagerf;
   public static Icon Pager => Pagerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pager");
   private static Icon? PaintRollerf;
   public static Icon PaintRoller => PaintRollerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paint-roller");
   private static Icon? Paintbrushf;
   public static Icon Paintbrush => Paintbrushf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paintbrush");
   public static Icon PaintBrush => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Paintbrush;
   private static Icon? PaintbrushFinef;
   public static Icon PaintbrushFine => PaintbrushFinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paintbrush-fine");
   public static Icon PaintBrushAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PaintbrushFine;
   public static Icon PaintBrushFine => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PaintbrushFine;
   public static Icon PaintbrushAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PaintbrushFine;
   private static Icon? PaintbrushPencilf;
   public static Icon PaintbrushPencil => PaintbrushPencilf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paintbrush-pencil");
   private static Icon? Palettef;
   public static Icon Palette => Palettef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "palette");
   private static Icon? Palletf;
   public static Icon Pallet => Palletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pallet");
   private static Icon? PalletBoxf;
   public static Icon PalletBox => PalletBoxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pallet-box");
   private static Icon? PalletBoxesf;
   public static Icon PalletBoxes => PalletBoxesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pallet-boxes");
   public static Icon PaletteBoxes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PalletBoxes;
   public static Icon PalletAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PalletBoxes;
   private static Icon? PanFoodf;
   public static Icon PanFood => PanFoodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pan-food");
   private static Icon? PanFryingf;
   public static Icon PanFrying => PanFryingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pan-frying");
   private static Icon? Pancakesf;
   public static Icon Pancakes => Pancakesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pancakes");
   private static Icon? PanelEwsf;
   public static Icon PanelEws => PanelEwsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "panel-ews");
   private static Icon? PanelFiref;
   public static Icon PanelFire => PanelFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "panel-fire");
   private static Icon? Panoramaf;
   public static Icon Panorama => Panoramaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "panorama");
   private static Icon? PaperPlanef;
   public static Icon PaperPlane => PaperPlanef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paper-plane");
   private static Icon? PaperPlaneTopf;
   public static Icon PaperPlaneTop => PaperPlaneTopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paper-plane-top");
   public static Icon PaperPlaneAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PaperPlaneTop;
   public static Icon Send => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PaperPlaneTop;
   private static Icon? Paperclipf;
   public static Icon Paperclip => Paperclipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paperclip");
   private static Icon? PaperclipVerticalf;
   public static Icon PaperclipVertical => PaperclipVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paperclip-vertical");
   private static Icon? ParachuteBoxf;
   public static Icon ParachuteBox => ParachuteBoxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "parachute-box");
   private static Icon? Paragraphf;
   public static Icon Paragraph => Paragraphf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paragraph");
   private static Icon? ParagraphLeftf;
   public static Icon ParagraphLeft => ParagraphLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paragraph-left");
   public static Icon ParagraphRtl => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ParagraphLeft;
   private static Icon? PartyBellf;
   public static Icon PartyBell => PartyBellf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "party-bell");
   private static Icon? PartyHornf;
   public static Icon PartyHorn => PartyHornf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "party-horn");
   private static Icon? Passportf;
   public static Icon Passport => Passportf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "passport");
   private static Icon? Pastef;
   public static Icon Paste => Pastef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paste");
   public static Icon FileClipboard => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Paste;
   private static Icon? Pausef;
   public static Icon Pause => Pausef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pause");
   private static Icon? Pawf;
   public static Icon Paw => Pawf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paw");
   private static Icon? PawClawsf;
   public static Icon PawClaws => PawClawsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paw-claws");
   private static Icon? PawSimplef;
   public static Icon PawSimple => PawSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "paw-simple");
   public static Icon PawAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PawSimple;
   private static Icon? Peacef;
   public static Icon Peace => Peacef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "peace");
   private static Icon? Peachf;
   public static Icon Peach => Peachf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "peach");
   private static Icon? Peanutf;
   public static Icon Peanut => Peanutf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "peanut");
   private static Icon? Peanutsf;
   public static Icon Peanuts => Peanutsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "peanuts");
   private static Icon? Peapodf;
   public static Icon Peapod => Peapodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "peapod");
   private static Icon? Pearf;
   public static Icon Pear => Pearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pear");
   private static Icon? Pedestalf;
   public static Icon Pedestal => Pedestalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pedestal");
   private static Icon? Pegasusf;
   public static Icon Pegasus => Pegasusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pegasus");
   private static Icon? Penf;
   public static Icon Pen => Penf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen");
   private static Icon? PenCirclef;
   public static Icon PenCircle => PenCirclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-circle");
   private static Icon? PenClipf;
   public static Icon PenClip => PenClipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-clip");
   public static Icon PenAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PenClip;
   private static Icon? PenClipSlashf;
   public static Icon PenClipSlash => PenClipSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-clip-slash");
   public static Icon PenAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PenClipSlash;
   private static Icon? PenFancyf;
   public static Icon PenFancy => PenFancyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-fancy");
   private static Icon? PenFancySlashf;
   public static Icon PenFancySlash => PenFancySlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-fancy-slash");
   private static Icon? PenFieldf;
   public static Icon PenField => PenFieldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-field");
   private static Icon? PenLinef;
   public static Icon PenLine => PenLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-line");
   private static Icon? PenNibf;
   public static Icon PenNib => PenNibf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-nib");
   private static Icon? PenNibSlashf;
   public static Icon PenNibSlash => PenNibSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-nib-slash");
   private static Icon? PenPaintbrushf;
   public static Icon PenPaintbrush => PenPaintbrushf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-paintbrush");
   public static Icon PencilPaintbrush => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PenPaintbrush;
   private static Icon? PenRulerf;
   public static Icon PenRuler => PenRulerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-ruler");
   public static Icon PencilRuler => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PenRuler;
   private static Icon? PenSlashf;
   public static Icon PenSlash => PenSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-slash");
   private static Icon? PenSwirlf;
   public static Icon PenSwirl => PenSwirlf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-swirl");
   private static Icon? PenToSquaref;
   public static Icon PenToSquare => PenToSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pen-to-square");
   public static Icon Edit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PenToSquare;
   private static Icon? Pencilf;
   public static Icon Pencil => Pencilf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pencil");
   public static Icon PencilAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Pencil;
   private static Icon? PencilMechanicalf;
   public static Icon PencilMechanical => PencilMechanicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pencil-mechanical");
   private static Icon? PencilSlashf;
   public static Icon PencilSlash => PencilSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pencil-slash");
   private static Icon? Peoplef;
   public static Icon People => Peoplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people");
   private static Icon? PeopleArrowsf;
   public static Icon PeopleArrows => PeopleArrowsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-arrows");
   public static Icon PeopleArrowsLeftRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PeopleArrows;
   private static Icon? PeopleCarryBoxf;
   public static Icon PeopleCarryBox => PeopleCarryBoxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-carry-box");
   public static Icon PeopleCarry => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PeopleCarryBox;
   private static Icon? PeopleDressf;
   public static Icon PeopleDress => PeopleDressf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-dress");
   private static Icon? PeopleDressSimplef;
   public static Icon PeopleDressSimple => PeopleDressSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-dress-simple");
   private static Icon? PeopleGroupf;
   public static Icon PeopleGroup => PeopleGroupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-group");
   private static Icon? PeopleLinef;
   public static Icon PeopleLine => PeopleLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-line");
   private static Icon? PeoplePantsf;
   public static Icon PeoplePants => PeoplePantsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-pants");
   private static Icon? PeoplePantsSimplef;
   public static Icon PeoplePantsSimple => PeoplePantsSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-pants-simple");
   private static Icon? PeoplePullingf;
   public static Icon PeoplePulling => PeoplePullingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-pulling");
   private static Icon? PeopleRobberyf;
   public static Icon PeopleRobbery => PeopleRobberyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-robbery");
   private static Icon? PeopleRooff;
   public static Icon PeopleRoof => PeopleRooff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-roof");
   private static Icon? PeopleSimplef;
   public static Icon PeopleSimple => PeopleSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "people-simple");
   private static Icon? Pepperf;
   public static Icon Pepper => Pepperf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pepper");
   private static Icon? PepperHotf;
   public static Icon PepperHot => PepperHotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pepper-hot");
   private static Icon? Percentf;
   public static Icon Percent => Percentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "percent");
   public static Icon Percentage => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Percent;
   private static Icon? Periodf;
   public static Icon Period => Periodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "period");
   private static Icon? Personf;
   public static Icon Person => Personf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person");
   public static Icon Male => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Person;
   private static Icon? PersonArrowDownToLinef;
   public static Icon PersonArrowDownToLine => PersonArrowDownToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-arrow-down-to-line");
   private static Icon? PersonArrowUpFromLinef;
   public static Icon PersonArrowUpFromLine => PersonArrowUpFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-arrow-up-from-line");
   private static Icon? PersonBikingf;
   public static Icon PersonBiking => PersonBikingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-biking");
   public static Icon Biking => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonBiking;
   private static Icon? PersonBikingMountainf;
   public static Icon PersonBikingMountain => PersonBikingMountainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-biking-mountain");
   public static Icon BikingMountain => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonBikingMountain;
   private static Icon? PersonBoothf;
   public static Icon PersonBooth => PersonBoothf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-booth");
   private static Icon? PersonBreastfeedingf;
   public static Icon PersonBreastfeeding => PersonBreastfeedingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-breastfeeding");
   private static Icon? PersonBurstf;
   public static Icon PersonBurst => PersonBurstf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-burst");
   private static Icon? PersonCanef;
   public static Icon PersonCane => PersonCanef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-cane");
   private static Icon? PersonCarryBoxf;
   public static Icon PersonCarryBox => PersonCarryBoxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-carry-box");
   public static Icon PersonCarry => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonCarryBox;
   private static Icon? PersonChalkboardf;
   public static Icon PersonChalkboard => PersonChalkboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-chalkboard");
   private static Icon? PersonCircleCheckf;
   public static Icon PersonCircleCheck => PersonCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-circle-check");
   private static Icon? PersonCircleExclamationf;
   public static Icon PersonCircleExclamation => PersonCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-circle-exclamation");
   private static Icon? PersonCircleMinusf;
   public static Icon PersonCircleMinus => PersonCircleMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-circle-minus");
   private static Icon? PersonCirclePlusf;
   public static Icon PersonCirclePlus => PersonCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-circle-plus");
   private static Icon? PersonCircleQuestionf;
   public static Icon PersonCircleQuestion => PersonCircleQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-circle-question");
   private static Icon? PersonCircleXmarkf;
   public static Icon PersonCircleXmark => PersonCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-circle-xmark");
   private static Icon? PersonDiggingf;
   public static Icon PersonDigging => PersonDiggingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-digging");
   public static Icon Digging => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonDigging;
   private static Icon? PersonDollyf;
   public static Icon PersonDolly => PersonDollyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-dolly");
   private static Icon? PersonDollyEmptyf;
   public static Icon PersonDollyEmpty => PersonDollyEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-dolly-empty");
   private static Icon? PersonDotsFromLinef;
   public static Icon PersonDotsFromLine => PersonDotsFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-dots-from-line");
   public static Icon Diagnoses => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonDotsFromLine;
   private static Icon? PersonDressf;
   public static Icon PersonDress => PersonDressf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-dress");
   public static Icon Female => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonDress;
   private static Icon? PersonDressBurstf;
   public static Icon PersonDressBurst => PersonDressBurstf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-dress-burst");
   private static Icon? PersonDressFairyf;
   public static Icon PersonDressFairy => PersonDressFairyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-dress-fairy");
   private static Icon? PersonDressSimplef;
   public static Icon PersonDressSimple => PersonDressSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-dress-simple");
   private static Icon? PersonDrowningf;
   public static Icon PersonDrowning => PersonDrowningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-drowning");
   private static Icon? PersonFairyf;
   public static Icon PersonFairy => PersonFairyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-fairy");
   private static Icon? PersonFallingf;
   public static Icon PersonFalling => PersonFallingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-falling");
   private static Icon? PersonFallingBurstf;
   public static Icon PersonFallingBurst => PersonFallingBurstf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-falling-burst");
   private static Icon? PersonFromPortalf;
   public static Icon PersonFromPortal => PersonFromPortalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-from-portal");
   public static Icon PortalExit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonFromPortal;
   private static Icon? PersonHalfDressf;
   public static Icon PersonHalfDress => PersonHalfDressf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-half-dress");
   private static Icon? PersonHarassingf;
   public static Icon PersonHarassing => PersonHarassingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-harassing");
   private static Icon? PersonHikingf;
   public static Icon PersonHiking => PersonHikingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-hiking");
   public static Icon Hiking => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonHiking;
   private static Icon? PersonMilitaryPointingf;
   public static Icon PersonMilitaryPointing => PersonMilitaryPointingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-military-pointing");
   private static Icon? PersonMilitaryRiflef;
   public static Icon PersonMilitaryRifle => PersonMilitaryRiflef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-military-rifle");
   private static Icon? PersonMilitaryToPersonf;
   public static Icon PersonMilitaryToPerson => PersonMilitaryToPersonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-military-to-person");
   private static Icon? PersonPinballf;
   public static Icon PersonPinball => PersonPinballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-pinball");
   private static Icon? PersonPrayingf;
   public static Icon PersonPraying => PersonPrayingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-praying");
   public static Icon Pray => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonPraying;
   private static Icon? PersonPregnantf;
   public static Icon PersonPregnant => PersonPregnantf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-pregnant");
   private static Icon? PersonRaysf;
   public static Icon PersonRays => PersonRaysf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-rays");
   private static Icon? PersonRiflef;
   public static Icon PersonRifle => PersonRiflef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-rifle");
   private static Icon? PersonRunningf;
   public static Icon PersonRunning => PersonRunningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-running");
   public static Icon Running => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonRunning;
   private static Icon? PersonRunningFastf;
   public static Icon PersonRunningFast => PersonRunningFastf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-running-fast");
   private static Icon? PersonSeatf;
   public static Icon PersonSeat => PersonSeatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-seat");
   private static Icon? PersonSeatReclinedf;
   public static Icon PersonSeatReclined => PersonSeatReclinedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-seat-reclined");
   private static Icon? PersonShelterf;
   public static Icon PersonShelter => PersonShelterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-shelter");
   private static Icon? PersonSignf;
   public static Icon PersonSign => PersonSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-sign");
   private static Icon? PersonSimplef;
   public static Icon PersonSimple => PersonSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-simple");
   private static Icon? PersonSkatingf;
   public static Icon PersonSkating => PersonSkatingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-skating");
   public static Icon Skating => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSkating;
   private static Icon? PersonSkiJumpingf;
   public static Icon PersonSkiJumping => PersonSkiJumpingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-ski-jumping");
   public static Icon SkiJump => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSkiJumping;
   private static Icon? PersonSkiLiftf;
   public static Icon PersonSkiLift => PersonSkiLiftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-ski-lift");
   public static Icon SkiLift => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSkiLift;
   private static Icon? PersonSkiingf;
   public static Icon PersonSkiing => PersonSkiingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-skiing");
   public static Icon Skiing => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSkiing;
   private static Icon? PersonSkiingNordicf;
   public static Icon PersonSkiingNordic => PersonSkiingNordicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-skiing-nordic");
   public static Icon SkiingNordic => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSkiingNordic;
   private static Icon? PersonSleddingf;
   public static Icon PersonSledding => PersonSleddingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-sledding");
   public static Icon Sledding => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSledding;
   private static Icon? PersonSnowboardingf;
   public static Icon PersonSnowboarding => PersonSnowboardingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-snowboarding");
   public static Icon Snowboarding => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSnowboarding;
   private static Icon? PersonSnowmobilingf;
   public static Icon PersonSnowmobiling => PersonSnowmobilingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-snowmobiling");
   public static Icon Snowmobile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSnowmobiling;
   private static Icon? PersonSwimmingf;
   public static Icon PersonSwimming => PersonSwimmingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-swimming");
   public static Icon Swimmer => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonSwimming;
   private static Icon? PersonThroughWindowf;
   public static Icon PersonThroughWindow => PersonThroughWindowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-through-window");
   private static Icon? PersonToDoorf;
   public static Icon PersonToDoor => PersonToDoorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-to-door");
   private static Icon? PersonToPortalf;
   public static Icon PersonToPortal => PersonToPortalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-to-portal");
   public static Icon PortalEnter => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonToPortal;
   private static Icon? PersonWalkingf;
   public static Icon PersonWalking => PersonWalkingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-walking");
   public static Icon Walking => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonWalking;
   private static Icon? PersonWalkingArrowLoopLeftf;
   public static Icon PersonWalkingArrowLoopLeft => PersonWalkingArrowLoopLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-walking-arrow-loop-left");
   private static Icon? PersonWalkingArrowRightf;
   public static Icon PersonWalkingArrowRight => PersonWalkingArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-walking-arrow-right");
   private static Icon? PersonWalkingDashedLineArrowRightf;
   public static Icon PersonWalkingDashedLineArrowRight => PersonWalkingDashedLineArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-walking-dashed-line-arrow-right");
   private static Icon? PersonWalkingLuggagef;
   public static Icon PersonWalkingLuggage => PersonWalkingLuggagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-walking-luggage");
   private static Icon? PersonWalkingWithCanef;
   public static Icon PersonWalkingWithCane => PersonWalkingWithCanef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "person-walking-with-cane");
   public static Icon Blind => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PersonWalkingWithCane;
   private static Icon? PesetaSignf;
   public static Icon PesetaSign => PesetaSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "peseta-sign");
   private static Icon? PesoSignf;
   public static Icon PesoSign => PesoSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "peso-sign");
   private static Icon? Phonef;
   public static Icon Phone => Phonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone");
   private static Icon? PhoneArrowDownLeftf;
   public static Icon PhoneArrowDownLeft => PhoneArrowDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-arrow-down-left");
   public static Icon PhoneArrowDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PhoneArrowDownLeft;
   public static Icon PhoneIncoming => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PhoneArrowDownLeft;
   private static Icon? PhoneArrowRightf;
   public static Icon PhoneArrowRight => PhoneArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-arrow-right");
   private static Icon? PhoneArrowUpRightf;
   public static Icon PhoneArrowUpRight => PhoneArrowUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-arrow-up-right");
   public static Icon PhoneArrowUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PhoneArrowUpRight;
   public static Icon PhoneOutgoing => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PhoneArrowUpRight;
   private static Icon? PhoneFlipf;
   public static Icon PhoneFlip => PhoneFlipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-flip");
   public static Icon PhoneAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PhoneFlip;
   private static Icon? PhoneHangupf;
   public static Icon PhoneHangup => PhoneHangupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-hangup");
   private static Icon? PhoneIntercomf;
   public static Icon PhoneIntercom => PhoneIntercomf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-intercom");
   private static Icon? PhoneMissedf;
   public static Icon PhoneMissed => PhoneMissedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-missed");
   private static Icon? PhoneOfficef;
   public static Icon PhoneOffice => PhoneOfficef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-office");
   private static Icon? PhonePlusf;
   public static Icon PhonePlus => PhonePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-plus");
   private static Icon? PhoneRotaryf;
   public static Icon PhoneRotary => PhoneRotaryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-rotary");
   private static Icon? PhoneSlashf;
   public static Icon PhoneSlash => PhoneSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-slash");
   private static Icon? PhoneVolumef;
   public static Icon PhoneVolume => PhoneVolumef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-volume");
   public static Icon VolumeControlPhone => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PhoneVolume;
   private static Icon? PhoneXmarkf;
   public static Icon PhoneXmark => PhoneXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "phone-xmark");
   private static Icon? PhotoFilmf;
   public static Icon PhotoFilm => PhotoFilmf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "photo-film");
   public static Icon PhotoVideo => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PhotoFilm;
   private static Icon? PhotoFilmMusicf;
   public static Icon PhotoFilmMusic => PhotoFilmMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "photo-film-music");
   private static Icon? Pif;
   public static Icon Pi => Pif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pi");
   private static Icon? Pianof;
   public static Icon Piano => Pianof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "piano");
   private static Icon? PianoKeyboardf;
   public static Icon PianoKeyboard => PianoKeyboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "piano-keyboard");
   private static Icon? Pickaxef;
   public static Icon Pickaxe => Pickaxef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pickaxe");
   private static Icon? Pickleballf;
   public static Icon Pickleball => Pickleballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pickleball");
   private static Icon? Pief;
   public static Icon Pie => Pief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pie");
   private static Icon? Pigf;
   public static Icon Pig => Pigf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pig");
   private static Icon? PiggyBankf;
   public static Icon PiggyBank => PiggyBankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "piggy-bank");
   private static Icon? Pillsf;
   public static Icon Pills => Pillsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pills");
   private static Icon? Pinataf;
   public static Icon Pinata => Pinataf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pinata");
   private static Icon? Pinballf;
   public static Icon Pinball => Pinballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pinball");
   private static Icon? Pineapplef;
   public static Icon Pineapple => Pineapplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pineapple");
   private static Icon? Pipef;
   public static Icon Pipe => Pipef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pipe");
   private static Icon? PipeCircleCheckf;
   public static Icon PipeCircleCheck => PipeCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pipe-circle-check");
   private static Icon? PipeCollarf;
   public static Icon PipeCollar => PipeCollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pipe-collar");
   private static Icon? PipeSectionf;
   public static Icon PipeSection => PipeSectionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pipe-section");
   private static Icon? PipeSmokingf;
   public static Icon PipeSmoking => PipeSmokingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pipe-smoking");
   private static Icon? PipeValvef;
   public static Icon PipeValve => PipeValvef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pipe-valve");
   private static Icon? Pizzaf;
   public static Icon Pizza => Pizzaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pizza");
   private static Icon? PizzaSlicef;
   public static Icon PizzaSlice => PizzaSlicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pizza-slice");
   private static Icon? PlaceOfWorshipf;
   public static Icon PlaceOfWorship => PlaceOfWorshipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "place-of-worship");
   private static Icon? Planef;
   public static Icon Plane => Planef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane");
   private static Icon? PlaneArrivalf;
   public static Icon PlaneArrival => PlaneArrivalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-arrival");
   private static Icon? PlaneCircleCheckf;
   public static Icon PlaneCircleCheck => PlaneCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-circle-check");
   private static Icon? PlaneCircleExclamationf;
   public static Icon PlaneCircleExclamation => PlaneCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-circle-exclamation");
   private static Icon? PlaneCircleXmarkf;
   public static Icon PlaneCircleXmark => PlaneCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-circle-xmark");
   private static Icon? PlaneDeparturef;
   public static Icon PlaneDeparture => PlaneDeparturef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-departure");
   private static Icon? PlaneEnginesf;
   public static Icon PlaneEngines => PlaneEnginesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-engines");
   public static Icon PlaneAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PlaneEngines;
   private static Icon? PlaneLockf;
   public static Icon PlaneLock => PlaneLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-lock");
   private static Icon? PlanePropf;
   public static Icon PlaneProp => PlanePropf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-prop");
   private static Icon? PlaneSlashf;
   public static Icon PlaneSlash => PlaneSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-slash");
   private static Icon? PlaneTailf;
   public static Icon PlaneTail => PlaneTailf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-tail");
   private static Icon? PlaneUpf;
   public static Icon PlaneUp => PlaneUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-up");
   private static Icon? PlaneUpSlashf;
   public static Icon PlaneUpSlash => PlaneUpSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plane-up-slash");
   private static Icon? PlanetMoonf;
   public static Icon PlanetMoon => PlanetMoonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "planet-moon");
   private static Icon? PlanetRingedf;
   public static Icon PlanetRinged => PlanetRingedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "planet-ringed");
   private static Icon? PlantWiltf;
   public static Icon PlantWilt => PlantWiltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plant-wilt");
   private static Icon? PlateUtensilsf;
   public static Icon PlateUtensils => PlateUtensilsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plate-utensils");
   private static Icon? PlateWheatf;
   public static Icon PlateWheat => PlateWheatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plate-wheat");
   private static Icon? Playf;
   public static Icon Play => Playf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "play");
   private static Icon? PlayPausef;
   public static Icon PlayPause => PlayPausef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "play-pause");
   private static Icon? Plugf;
   public static Icon Plug => Plugf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plug");
   private static Icon? PlugCircleBoltf;
   public static Icon PlugCircleBolt => PlugCircleBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plug-circle-bolt");
   private static Icon? PlugCircleCheckf;
   public static Icon PlugCircleCheck => PlugCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plug-circle-check");
   private static Icon? PlugCircleExclamationf;
   public static Icon PlugCircleExclamation => PlugCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plug-circle-exclamation");
   private static Icon? PlugCircleMinusf;
   public static Icon PlugCircleMinus => PlugCircleMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plug-circle-minus");
   private static Icon? PlugCirclePlusf;
   public static Icon PlugCirclePlus => PlugCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plug-circle-plus");
   private static Icon? PlugCircleXmarkf;
   public static Icon PlugCircleXmark => PlugCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plug-circle-xmark");
   private static Icon? Plusf;
   public static Icon Plus => Plusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plus");
   public static Icon Add => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Plus;
   private static Icon? PlusLargef;
   public static Icon PlusLarge => PlusLargef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plus-large");
   private static Icon? PlusMinusf;
   public static Icon PlusMinus => PlusMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "plus-minus");
   private static Icon? Podcastf;
   public static Icon Podcast => Podcastf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "podcast");
   private static Icon? Podiumf;
   public static Icon Podium => Podiumf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "podium");
   private static Icon? PodiumStarf;
   public static Icon PodiumStar => PodiumStarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "podium-star");
   private static Icon? PoliceBoxf;
   public static Icon PoliceBox => PoliceBoxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "police-box");
   private static Icon? PollPeoplef;
   public static Icon PollPeople => PollPeoplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "poll-people");
   private static Icon? Pompebledf;
   public static Icon Pompebled => Pompebledf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pompebled");
   private static Icon? Poof;
   public static Icon Poo => Poof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "poo");
   private static Icon? PooStormf;
   public static Icon PooStorm => PooStormf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "poo-storm");
   public static Icon PooBolt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PooStorm;
   private static Icon? Pool8Ballf;
   public static Icon Pool8Ball => Pool8Ballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pool-8-ball");
   private static Icon? Poopf;
   public static Icon Poop => Poopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "poop");
   private static Icon? Popcornf;
   public static Icon Popcorn => Popcornf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "popcorn");
   private static Icon? Popsiclef;
   public static Icon Popsicle => Popsiclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "popsicle");
   private static Icon? PotFoodf;
   public static Icon PotFood => PotFoodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pot-food");
   private static Icon? Potatof;
   public static Icon Potato => Potatof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "potato");
   private static Icon? PowerOfff;
   public static Icon PowerOff => PowerOfff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "power-off");
   private static Icon? Prescriptionf;
   public static Icon Prescription => Prescriptionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "prescription");
   private static Icon? PrescriptionBottlef;
   public static Icon PrescriptionBottle => PrescriptionBottlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "prescription-bottle");
   private static Icon? PrescriptionBottleMedicalf;
   public static Icon PrescriptionBottleMedical => PrescriptionBottleMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "prescription-bottle-medical");
   public static Icon PrescriptionBottleAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PrescriptionBottleMedical;
   private static Icon? PrescriptionBottlePillf;
   public static Icon PrescriptionBottlePill => PrescriptionBottlePillf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "prescription-bottle-pill");
   private static Icon? PresentationScreenf;
   public static Icon PresentationScreen => PresentationScreenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "presentation-screen");
   public static Icon Presentation => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PresentationScreen;
   private static Icon? Pretzelf;
   public static Icon Pretzel => Pretzelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pretzel");
   private static Icon? Printf;
   public static Icon Print => Printf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "print");
   private static Icon? PrintMagnifyingGlassf;
   public static Icon PrintMagnifyingGlass => PrintMagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "print-magnifying-glass");
   public static Icon PrintSearch => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PrintMagnifyingGlass;
   private static Icon? PrintSlashf;
   public static Icon PrintSlash => PrintSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "print-slash");
   private static Icon? Projectorf;
   public static Icon Projector => Projectorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "projector");
   private static Icon? Pumpf;
   public static Icon Pump => Pumpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pump");
   private static Icon? PumpMedicalf;
   public static Icon PumpMedical => PumpMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pump-medical");
   private static Icon? PumpSoapf;
   public static Icon PumpSoap => PumpSoapf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pump-soap");
   private static Icon? Pumpkinf;
   public static Icon Pumpkin => Pumpkinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "pumpkin");
   private static Icon? Puzzlef;
   public static Icon Puzzle => Puzzlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "puzzle");
   private static Icon? PuzzlePiecef;
   public static Icon PuzzlePiece => PuzzlePiecef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "puzzle-piece");
   private static Icon? PuzzlePieceSimplef;
   public static Icon PuzzlePieceSimple => PuzzlePieceSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "puzzle-piece-simple");
   public static Icon PuzzlePieceAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.PuzzlePieceSimple;
   private static Icon? Qf;
   public static Icon Q => Qf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "q");
   private static Icon? Qrcodef;
   public static Icon Qrcode => Qrcodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "qrcode");
   private static Icon? Questionf;
   public static Icon Question => Questionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "question");
   private static Icon? QuoteLeftf;
   public static Icon QuoteLeft => QuoteLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "quote-left");
   public static Icon QuoteLeftAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.QuoteLeft;
   private static Icon? QuoteRightf;
   public static Icon QuoteRight => QuoteRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "quote-right");
   public static Icon QuoteRightAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.QuoteRight;
   private static Icon? Quotesf;
   public static Icon Quotes => Quotesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "quotes");
   private static Icon? Rf;
   public static Icon R => Rf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "r");
   private static Icon? Rabbitf;
   public static Icon Rabbit => Rabbitf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rabbit");
   private static Icon? RabbitRunningf;
   public static Icon RabbitRunning => RabbitRunningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rabbit-running");
   public static Icon RabbitFast => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RabbitRunning;
   private static Icon? Raccoonf;
   public static Icon Raccoon => Raccoonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "raccoon");
   private static Icon? Racquetf;
   public static Icon Racquet => Racquetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "racquet");
   private static Icon? Radarf;
   public static Icon Radar => Radarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "radar");
   private static Icon? Radiationf;
   public static Icon Radiation => Radiationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "radiation");
   private static Icon? Radiof;
   public static Icon Radio => Radiof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "radio");
   private static Icon? RadioTunerf;
   public static Icon RadioTuner => RadioTunerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "radio-tuner");
   public static Icon RadioAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RadioTuner;
   private static Icon? Rainbowf;
   public static Icon Rainbow => Rainbowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rainbow");
   private static Icon? Raindropsf;
   public static Icon Raindrops => Raindropsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "raindrops");
   private static Icon? Ramf;
   public static Icon Ram => Ramf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ram");
   private static Icon? RampLoadingf;
   public static Icon RampLoading => RampLoadingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ramp-loading");
   private static Icon? RankingStarf;
   public static Icon RankingStar => RankingStarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ranking-star");
   private static Icon? Raygunf;
   public static Icon Raygun => Raygunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "raygun");
   private static Icon? Receiptf;
   public static Icon Receipt => Receiptf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "receipt");
   private static Icon? RecordVinylf;
   public static Icon RecordVinyl => RecordVinylf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "record-vinyl");
   private static Icon? Rectanglef;
   public static Icon Rectangle => Rectanglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle");
   public static Icon RectangleLandscape => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Rectangle;
   private static Icon? RectangleAdf;
   public static Icon RectangleAd => RectangleAdf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-ad");
   public static Icon Ad => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RectangleAd;
   private static Icon? RectangleBarcodef;
   public static Icon RectangleBarcode => RectangleBarcodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-barcode");
   public static Icon BarcodeAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RectangleBarcode;
   private static Icon? RectangleCodef;
   public static Icon RectangleCode => RectangleCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-code");
   private static Icon? RectangleHistoryf;
   public static Icon RectangleHistory => RectangleHistoryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-history");
   private static Icon? RectangleHistoryCirclePlusf;
   public static Icon RectangleHistoryCirclePlus => RectangleHistoryCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-history-circle-plus");
   private static Icon? RectangleHistoryCircleUserf;
   public static Icon RectangleHistoryCircleUser => RectangleHistoryCircleUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-history-circle-user");
   private static Icon? RectangleListf;
   public static Icon RectangleList => RectangleListf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-list");
   public static Icon ListAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RectangleList;
   private static Icon? RectangleProf;
   public static Icon RectanglePro => RectangleProf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-pro");
   public static Icon Pro => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RectanglePro;
   private static Icon? RectangleTerminalf;
   public static Icon RectangleTerminal => RectangleTerminalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-terminal");
   private static Icon? RectangleVerticalf;
   public static Icon RectangleVertical => RectangleVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-vertical");
   public static Icon RectanglePortrait => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RectangleVertical;
   private static Icon? RectangleVerticalHistoryf;
   public static Icon RectangleVerticalHistory => RectangleVerticalHistoryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-vertical-history");
   private static Icon? RectangleWidef;
   public static Icon RectangleWide => RectangleWidef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-wide");
   private static Icon? RectangleXmarkf;
   public static Icon RectangleXmark => RectangleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangle-xmark");
   public static Icon RectangleTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RectangleXmark;
   public static Icon TimesRectangle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RectangleXmark;
   public static Icon WindowClose => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RectangleXmark;
   private static Icon? RectanglesMixedf;
   public static Icon RectanglesMixed => RectanglesMixedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rectangles-mixed");
   private static Icon? Recyclef;
   public static Icon Recycle => Recyclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "recycle");
   private static Icon? Reelf;
   public static Icon Reel => Reelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "reel");
   private static Icon? ReflectHorizontalf;
   public static Icon ReflectHorizontal => ReflectHorizontalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "reflect-horizontal");
   private static Icon? ReflectVerticalf;
   public static Icon ReflectVertical => ReflectVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "reflect-vertical");
   private static Icon? Refrigeratorf;
   public static Icon Refrigerator => Refrigeratorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "refrigerator");
   private static Icon? Registeredf;
   public static Icon Registered => Registeredf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "registered");
   private static Icon? Repeatf;
   public static Icon Repeat => Repeatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "repeat");
   private static Icon? Repeat1f;
   public static Icon Repeat1 => Repeat1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "repeat-1");
   private static Icon? Replyf;
   public static Icon Reply => Replyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "reply");
   public static Icon MailReply => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Reply;
   private static Icon? ReplyAllf;
   public static Icon ReplyAll => ReplyAllf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "reply-all");
   public static Icon MailReplyAll => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ReplyAll;
   private static Icon? ReplyClockf;
   public static Icon ReplyClock => ReplyClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "reply-clock");
   public static Icon ReplyTime => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ReplyClock;
   private static Icon? Republicanf;
   public static Icon Republican => Republicanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "republican");
   private static Icon? Restroomf;
   public static Icon Restroom => Restroomf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "restroom");
   private static Icon? RestroomSimplef;
   public static Icon RestroomSimple => RestroomSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "restroom-simple");
   private static Icon? Retweetf;
   public static Icon Retweet => Retweetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "retweet");
   private static Icon? Rhombusf;
   public static Icon Rhombus => Rhombusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rhombus");
   private static Icon? Ribbonf;
   public static Icon Ribbon => Ribbonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ribbon");
   private static Icon? Rightf;
   public static Icon Right => Rightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right");
   public static Icon ArrowAltRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Right;
   private static Icon? RightFromBracketf;
   public static Icon RightFromBracket => RightFromBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right-from-bracket");
   public static Icon SignOutAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RightFromBracket;
   private static Icon? RightFromLinef;
   public static Icon RightFromLine => RightFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right-from-line");
   public static Icon ArrowAltFromLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RightFromLine;
   private static Icon? RightLeftf;
   public static Icon RightLeft => RightLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right-left");
   public static Icon ExchangeAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RightLeft;
   private static Icon? RightLeftLargef;
   public static Icon RightLeftLarge => RightLeftLargef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right-left-large");
   private static Icon? RightLongf;
   public static Icon RightLong => RightLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right-long");
   public static Icon LongArrowAltRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RightLong;
   private static Icon? RightLongToLinef;
   public static Icon RightLongToLine => RightLongToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right-long-to-line");
   private static Icon? RightToBracketf;
   public static Icon RightToBracket => RightToBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right-to-bracket");
   public static Icon SignInAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RightToBracket;
   private static Icon? RightToLinef;
   public static Icon RightToLine => RightToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "right-to-line");
   public static Icon ArrowAltToRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RightToLine;
   private static Icon? Ringf;
   public static Icon Ring => Ringf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ring");
   private static Icon? RingDiamondf;
   public static Icon RingDiamond => RingDiamondf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ring-diamond");
   private static Icon? RingsWeddingf;
   public static Icon RingsWedding => RingsWeddingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rings-wedding");
   private static Icon? Roadf;
   public static Icon Road => Roadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "road");
   private static Icon? RoadBarrierf;
   public static Icon RoadBarrier => RoadBarrierf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "road-barrier");
   private static Icon? RoadBridgef;
   public static Icon RoadBridge => RoadBridgef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "road-bridge");
   private static Icon? RoadCircleCheckf;
   public static Icon RoadCircleCheck => RoadCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "road-circle-check");
   private static Icon? RoadCircleExclamationf;
   public static Icon RoadCircleExclamation => RoadCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "road-circle-exclamation");
   private static Icon? RoadCircleXmarkf;
   public static Icon RoadCircleXmark => RoadCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "road-circle-xmark");
   private static Icon? RoadLockf;
   public static Icon RoadLock => RoadLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "road-lock");
   private static Icon? RoadSpikesf;
   public static Icon RoadSpikes => RoadSpikesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "road-spikes");
   private static Icon? Robotf;
   public static Icon Robot => Robotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "robot");
   private static Icon? RobotAstromechf;
   public static Icon RobotAstromech => RobotAstromechf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "robot-astromech");
   private static Icon? Rocketf;
   public static Icon Rocket => Rocketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rocket");
   private static Icon? RocketLaunchf;
   public static Icon RocketLaunch => RocketLaunchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rocket-launch");
   private static Icon? RollerCoasterf;
   public static Icon RollerCoaster => RollerCoasterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "roller-coaster");
   private static Icon? Rotatef;
   public static Icon Rotate => Rotatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rotate");
   public static Icon SyncAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Rotate;
   private static Icon? RotateExclamationf;
   public static Icon RotateExclamation => RotateExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rotate-exclamation");
   private static Icon? RotateLeftf;
   public static Icon RotateLeft => RotateLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rotate-left");
   public static Icon RotateBack => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RotateLeft;
   public static Icon RotateBackward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RotateLeft;
   public static Icon UndoAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RotateLeft;
   private static Icon? RotateReversef;
   public static Icon RotateReverse => RotateReversef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rotate-reverse");
   private static Icon? RotateRightf;
   public static Icon RotateRight => RotateRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rotate-right");
   public static Icon RedoAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RotateRight;
   public static Icon RotateForward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RotateRight;
   private static Icon? Routef;
   public static Icon Route => Routef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "route");
   private static Icon? RouteHighwayf;
   public static Icon RouteHighway => RouteHighwayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "route-highway");
   private static Icon? RouteInterstatef;
   public static Icon RouteInterstate => RouteInterstatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "route-interstate");
   private static Icon? Routerf;
   public static Icon Router => Routerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "router");
   private static Icon? Rssf;
   public static Icon Rss => Rssf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rss");
   public static Icon Feed => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Rss;
   private static Icon? RubleSignf;
   public static Icon RubleSign => RubleSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ruble-sign");
   public static Icon Rouble => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RubleSign;
   public static Icon Rub => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RubleSign;
   public static Icon Ruble => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RubleSign;
   private static Icon? Rugf;
   public static Icon Rug => Rugf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rug");
   private static Icon? RugbyBallf;
   public static Icon RugbyBall => RugbyBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rugby-ball");
   private static Icon? Rulerf;
   public static Icon Ruler => Rulerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ruler");
   private static Icon? RulerCombinedf;
   public static Icon RulerCombined => RulerCombinedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ruler-combined");
   private static Icon? RulerHorizontalf;
   public static Icon RulerHorizontal => RulerHorizontalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ruler-horizontal");
   private static Icon? RulerTrianglef;
   public static Icon RulerTriangle => RulerTrianglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ruler-triangle");
   private static Icon? RulerVerticalf;
   public static Icon RulerVertical => RulerVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ruler-vertical");
   private static Icon? RupeeSignf;
   public static Icon RupeeSign => RupeeSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rupee-sign");
   public static Icon Rupee => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.RupeeSign;
   private static Icon? RupiahSignf;
   public static Icon RupiahSign => RupiahSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rupiah-sign");
   private static Icon? Rvf;
   public static Icon Rv => Rvf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "rv");
   private static Icon? Sf;
   public static Icon S => Sf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "s");
   private static Icon? Sackf;
   public static Icon Sack => Sackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sack");
   private static Icon? SackDollarf;
   public static Icon SackDollar => SackDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sack-dollar");
   private static Icon? SackXmarkf;
   public static Icon SackXmark => SackXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sack-xmark");
   private static Icon? Sailboatf;
   public static Icon Sailboat => Sailboatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sailboat");
   private static Icon? Saladf;
   public static Icon Salad => Saladf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "salad");
   public static Icon BowlSalad => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Salad;
   private static Icon? SaltShakerf;
   public static Icon SaltShaker => SaltShakerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "salt-shaker");
   private static Icon? Sandwichf;
   public static Icon Sandwich => Sandwichf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sandwich");
   private static Icon? Satellitef;
   public static Icon Satellite => Satellitef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "satellite");
   private static Icon? SatelliteDishf;
   public static Icon SatelliteDish => SatelliteDishf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "satellite-dish");
   private static Icon? Sausagef;
   public static Icon Sausage => Sausagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sausage");
   private static Icon? Saxophonef;
   public static Icon Saxophone => Saxophonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "saxophone");
   private static Icon? SaxophoneFiref;
   public static Icon SaxophoneFire => SaxophoneFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "saxophone-fire");
   public static Icon SaxHot => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SaxophoneFire;
   private static Icon? ScaleBalancedf;
   public static Icon ScaleBalanced => ScaleBalancedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scale-balanced");
   public static Icon BalanceScale => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ScaleBalanced;
   private static Icon? ScaleUnbalancedf;
   public static Icon ScaleUnbalanced => ScaleUnbalancedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scale-unbalanced");
   public static Icon BalanceScaleLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ScaleUnbalanced;
   private static Icon? ScaleUnbalancedFlipf;
   public static Icon ScaleUnbalancedFlip => ScaleUnbalancedFlipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scale-unbalanced-flip");
   public static Icon BalanceScaleRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ScaleUnbalancedFlip;
   private static Icon? Scalpelf;
   public static Icon Scalpel => Scalpelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scalpel");
   private static Icon? ScalpelLineDashedf;
   public static Icon ScalpelLineDashed => ScalpelLineDashedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scalpel-line-dashed");
   public static Icon ScalpelPath => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ScalpelLineDashed;
   private static Icon? ScannerGunf;
   public static Icon ScannerGun => ScannerGunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scanner-gun");
   public static Icon Scanner => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ScannerGun;
   private static Icon? ScannerImagef;
   public static Icon ScannerImage => ScannerImagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scanner-image");
   private static Icon? ScannerKeyboardf;
   public static Icon ScannerKeyboard => ScannerKeyboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scanner-keyboard");
   private static Icon? ScannerTouchscreenf;
   public static Icon ScannerTouchscreen => ScannerTouchscreenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scanner-touchscreen");
   private static Icon? Scarecrowf;
   public static Icon Scarecrow => Scarecrowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scarecrow");
   private static Icon? Scarff;
   public static Icon Scarf => Scarff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scarf");
   private static Icon? Schoolf;
   public static Icon School => Schoolf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "school");
   private static Icon? SchoolCircleCheckf;
   public static Icon SchoolCircleCheck => SchoolCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "school-circle-check");
   private static Icon? SchoolCircleExclamationf;
   public static Icon SchoolCircleExclamation => SchoolCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "school-circle-exclamation");
   private static Icon? SchoolCircleXmarkf;
   public static Icon SchoolCircleXmark => SchoolCircleXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "school-circle-xmark");
   private static Icon? SchoolFlagf;
   public static Icon SchoolFlag => SchoolFlagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "school-flag");
   private static Icon? SchoolLockf;
   public static Icon SchoolLock => SchoolLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "school-lock");
   private static Icon? Scissorsf;
   public static Icon Scissors => Scissorsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scissors");
   public static Icon Cut => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Scissors;
   private static Icon? ScreenUsersf;
   public static Icon ScreenUsers => ScreenUsersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "screen-users");
   public static Icon UsersClass => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ScreenUsers;
   private static Icon? Screencastf;
   public static Icon Screencast => Screencastf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "screencast");
   private static Icon? Screwdriverf;
   public static Icon Screwdriver => Screwdriverf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "screwdriver");
   private static Icon? ScrewdriverWrenchf;
   public static Icon ScrewdriverWrench => ScrewdriverWrenchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "screwdriver-wrench");
   public static Icon Tools => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ScrewdriverWrench;
   private static Icon? Scribblef;
   public static Icon Scribble => Scribblef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scribble");
   private static Icon? Scrollf;
   public static Icon Scroll => Scrollf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scroll");
   private static Icon? ScrollOldf;
   public static Icon ScrollOld => ScrollOldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scroll-old");
   private static Icon? ScrollTorahf;
   public static Icon ScrollTorah => ScrollTorahf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scroll-torah");
   public static Icon Torah => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ScrollTorah;
   private static Icon? Scrubberf;
   public static Icon Scrubber => Scrubberf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scrubber");
   private static Icon? Scythef;
   public static Icon Scythe => Scythef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "scythe");
   private static Icon? SdCardf;
   public static Icon SdCard => SdCardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sd-card");
   private static Icon? SdCardsf;
   public static Icon SdCards => SdCardsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sd-cards");
   private static Icon? Sealf;
   public static Icon Seal => Sealf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "seal");
   private static Icon? SealExclamationf;
   public static Icon SealExclamation => SealExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "seal-exclamation");
   private static Icon? SealQuestionf;
   public static Icon SealQuestion => SealQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "seal-question");
   private static Icon? SeatAirlinef;
   public static Icon SeatAirline => SeatAirlinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "seat-airline");
   private static Icon? Sectionf;
   public static Icon Section => Sectionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "section");
   private static Icon? Seedlingf;
   public static Icon Seedling => Seedlingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "seedling");
   public static Icon Sprout => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Seedling;
   private static Icon? Semicolonf;
   public static Icon Semicolon => Semicolonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "semicolon");
   private static Icon? SendBackf;
   public static Icon SendBack => SendBackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "send-back");
   private static Icon? SendBackwardf;
   public static Icon SendBackward => SendBackwardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "send-backward");
   private static Icon? Sensorf;
   public static Icon Sensor => Sensorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sensor");
   private static Icon? SensorCloudf;
   public static Icon SensorCloud => SensorCloudf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sensor-cloud");
   public static Icon SensorSmoke => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SensorCloud;
   private static Icon? SensorFiref;
   public static Icon SensorFire => SensorFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sensor-fire");
   private static Icon? SensorOnf;
   public static Icon SensorOn => SensorOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sensor-on");
   private static Icon? SensorTriangleExclamationf;
   public static Icon SensorTriangleExclamation => SensorTriangleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sensor-triangle-exclamation");
   public static Icon SensorAlert => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SensorTriangleExclamation;
   private static Icon? Serverf;
   public static Icon Server => Serverf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "server");
   private static Icon? Shapesf;
   public static Icon Shapes => Shapesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shapes");
   public static Icon TriangleCircleSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Shapes;
   private static Icon? Sharef;
   public static Icon Share => Sharef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "share");
   public static Icon MailForward => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Share;
   private static Icon? ShareAllf;
   public static Icon ShareAll => ShareAllf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "share-all");
   private static Icon? ShareFromSquaref;
   public static Icon ShareFromSquare => ShareFromSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "share-from-square");
   public static Icon ShareSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShareFromSquare;
   private static Icon? ShareNodesf;
   public static Icon ShareNodes => ShareNodesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "share-nodes");
   public static Icon ShareAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShareNodes;
   private static Icon? Sheepf;
   public static Icon Sheep => Sheepf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sheep");
   private static Icon? SheetPlasticf;
   public static Icon SheetPlastic => SheetPlasticf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sheet-plastic");
   private static Icon? ShekelSignf;
   public static Icon ShekelSign => ShekelSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shekel-sign");
   public static Icon Ils => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShekelSign;
   public static Icon Shekel => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShekelSign;
   public static Icon Sheqel => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShekelSign;
   public static Icon SheqelSign => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShekelSign;
   private static Icon? Shelvesf;
   public static Icon Shelves => Shelvesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shelves");
   public static Icon Inventory => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Shelves;
   private static Icon? ShelvesEmptyf;
   public static Icon ShelvesEmpty => ShelvesEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shelves-empty");
   private static Icon? Shieldf;
   public static Icon Shield => Shieldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield");
   public static Icon ShieldBlank => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Shield;
   private static Icon? ShieldCatf;
   public static Icon ShieldCat => ShieldCatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-cat");
   private static Icon? ShieldCheckf;
   public static Icon ShieldCheck => ShieldCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-check");
   private static Icon? ShieldCrossf;
   public static Icon ShieldCross => ShieldCrossf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-cross");
   private static Icon? ShieldDogf;
   public static Icon ShieldDog => ShieldDogf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-dog");
   private static Icon? ShieldExclamationf;
   public static Icon ShieldExclamation => ShieldExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-exclamation");
   private static Icon? ShieldHalvedf;
   public static Icon ShieldHalved => ShieldHalvedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-halved");
   public static Icon ShieldAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShieldHalved;
   private static Icon? ShieldHeartf;
   public static Icon ShieldHeart => ShieldHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-heart");
   private static Icon? ShieldKeyholef;
   public static Icon ShieldKeyhole => ShieldKeyholef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-keyhole");
   private static Icon? ShieldMinusf;
   public static Icon ShieldMinus => ShieldMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-minus");
   private static Icon? ShieldPlusf;
   public static Icon ShieldPlus => ShieldPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-plus");
   private static Icon? ShieldQuarteredf;
   public static Icon ShieldQuartered => ShieldQuarteredf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-quartered");
   private static Icon? ShieldSlashf;
   public static Icon ShieldSlash => ShieldSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-slash");
   private static Icon? ShieldVirusf;
   public static Icon ShieldVirus => ShieldVirusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-virus");
   private static Icon? ShieldXmarkf;
   public static Icon ShieldXmark => ShieldXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shield-xmark");
   public static Icon ShieldTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShieldXmark;
   private static Icon? Shipf;
   public static Icon Ship => Shipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ship");
   private static Icon? Shirtf;
   public static Icon Shirt => Shirtf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shirt");
   public static Icon TShirt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Shirt;
   public static Icon Tshirt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Shirt;
   private static Icon? ShirtLongSleevef;
   public static Icon ShirtLongSleeve => ShirtLongSleevef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shirt-long-sleeve");
   private static Icon? ShirtRunningf;
   public static Icon ShirtRunning => ShirtRunningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shirt-running");
   private static Icon? ShirtTankTopf;
   public static Icon ShirtTankTop => ShirtTankTopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shirt-tank-top");
   private static Icon? ShishKebabf;
   public static Icon ShishKebab => ShishKebabf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shish-kebab");
   private static Icon? ShoePrintsf;
   public static Icon ShoePrints => ShoePrintsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shoe-prints");
   private static Icon? Shopf;
   public static Icon Shop => Shopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shop");
   public static Icon StoreAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Shop;
   private static Icon? ShopLockf;
   public static Icon ShopLock => ShopLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shop-lock");
   private static Icon? ShopSlashf;
   public static Icon ShopSlash => ShopSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shop-slash");
   public static Icon StoreAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShopSlash;
   private static Icon? Shovelf;
   public static Icon Shovel => Shovelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shovel");
   private static Icon? ShovelSnowf;
   public static Icon ShovelSnow => ShovelSnowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shovel-snow");
   private static Icon? Showerf;
   public static Icon Shower => Showerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shower");
   private static Icon? ShowerDownf;
   public static Icon ShowerDown => ShowerDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shower-down");
   public static Icon ShowerAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShowerDown;
   private static Icon? Shredderf;
   public static Icon Shredder => Shredderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shredder");
   private static Icon? Shrimpf;
   public static Icon Shrimp => Shrimpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shrimp");
   private static Icon? Shufflef;
   public static Icon Shuffle => Shufflef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shuffle");
   public static Icon Random => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Shuffle;
   private static Icon? Shuttersf;
   public static Icon Shutters => Shuttersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shutters");
   private static Icon? ShuttleSpacef;
   public static Icon ShuttleSpace => ShuttleSpacef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shuttle-space");
   public static Icon SpaceShuttle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ShuttleSpace;
   private static Icon? Shuttlecockf;
   public static Icon Shuttlecock => Shuttlecockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "shuttlecock");
   private static Icon? Sicklef;
   public static Icon Sickle => Sicklef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sickle");
   private static Icon? Sidebarf;
   public static Icon Sidebar => Sidebarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sidebar");
   private static Icon? SidebarFlipf;
   public static Icon SidebarFlip => SidebarFlipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sidebar-flip");
   private static Icon? Sigmaf;
   public static Icon Sigma => Sigmaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sigma");
   private static Icon? SignHangingf;
   public static Icon SignHanging => SignHangingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sign-hanging");
   public static Icon Sign => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignHanging;
   private static Icon? SignPostf;
   public static Icon SignPost => SignPostf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sign-post");
   private static Icon? SignPostsf;
   public static Icon SignPosts => SignPostsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sign-posts");
   private static Icon? SignPostsWrenchf;
   public static Icon SignPostsWrench => SignPostsWrenchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sign-posts-wrench");
   private static Icon? Signalf;
   public static Icon Signal => Signalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal");
   public static Icon Signal5 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Signal;
   public static Icon SignalPerfect => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Signal;
   private static Icon? SignalBarsf;
   public static Icon SignalBars => SignalBarsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-bars");
   public static Icon SignalAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalBars;
   public static Icon SignalAlt4 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalBars;
   public static Icon SignalBarsStrong => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalBars;
   private static Icon? SignalBarsFairf;
   public static Icon SignalBarsFair => SignalBarsFairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-bars-fair");
   public static Icon SignalAlt2 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalBarsFair;
   private static Icon? SignalBarsGoodf;
   public static Icon SignalBarsGood => SignalBarsGoodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-bars-good");
   public static Icon SignalAlt3 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalBarsGood;
   private static Icon? SignalBarsSlashf;
   public static Icon SignalBarsSlash => SignalBarsSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-bars-slash");
   public static Icon SignalAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalBarsSlash;
   private static Icon? SignalBarsWeakf;
   public static Icon SignalBarsWeak => SignalBarsWeakf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-bars-weak");
   public static Icon SignalAlt1 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalBarsWeak;
   private static Icon? SignalFairf;
   public static Icon SignalFair => SignalFairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-fair");
   public static Icon Signal2 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalFair;
   private static Icon? SignalGoodf;
   public static Icon SignalGood => SignalGoodf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-good");
   public static Icon Signal3 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalGood;
   private static Icon? SignalSlashf;
   public static Icon SignalSlash => SignalSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-slash");
   private static Icon? SignalStreamf;
   public static Icon SignalStream => SignalStreamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-stream");
   private static Icon? SignalStreamSlashf;
   public static Icon SignalStreamSlash => SignalStreamSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-stream-slash");
   private static Icon? SignalStrongf;
   public static Icon SignalStrong => SignalStrongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-strong");
   public static Icon Signal4 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalStrong;
   private static Icon? SignalWeakf;
   public static Icon SignalWeak => SignalWeakf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signal-weak");
   public static Icon Signal1 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignalWeak;
   private static Icon? Signaturef;
   public static Icon Signature => Signaturef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signature");
   private static Icon? SignatureLockf;
   public static Icon SignatureLock => SignatureLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signature-lock");
   private static Icon? SignatureSlashf;
   public static Icon SignatureSlash => SignatureSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signature-slash");
   private static Icon? SignsPostf;
   public static Icon SignsPost => SignsPostf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "signs-post");
   public static Icon MapSigns => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SignsPost;
   private static Icon? SimCardf;
   public static Icon SimCard => SimCardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sim-card");
   private static Icon? SimCardsf;
   public static Icon SimCards => SimCardsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sim-cards");
   private static Icon? Sinkf;
   public static Icon Sink => Sinkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sink");
   private static Icon? Sirenf;
   public static Icon Siren => Sirenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "siren");
   private static Icon? SirenOnf;
   public static Icon SirenOn => SirenOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "siren-on");
   private static Icon? Sitemapf;
   public static Icon Sitemap => Sitemapf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sitemap");
   private static Icon? Skeletonf;
   public static Icon Skeleton => Skeletonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "skeleton");
   private static Icon? SkeletonRibsf;
   public static Icon SkeletonRibs => SkeletonRibsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "skeleton-ribs");
   private static Icon? SkiBootf;
   public static Icon SkiBoot => SkiBootf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ski-boot");
   private static Icon? SkiBootSkif;
   public static Icon SkiBootSki => SkiBootSkif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ski-boot-ski");
   private static Icon? Skullf;
   public static Icon Skull => Skullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "skull");
   private static Icon? SkullCowf;
   public static Icon SkullCow => SkullCowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "skull-cow");
   private static Icon? SkullCrossbonesf;
   public static Icon SkullCrossbones => SkullCrossbonesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "skull-crossbones");
   private static Icon? Slashf;
   public static Icon Slash => Slashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "slash");
   private static Icon? SlashBackf;
   public static Icon SlashBack => SlashBackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "slash-back");
   private static Icon? SlashForwardf;
   public static Icon SlashForward => SlashForwardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "slash-forward");
   private static Icon? Sleighf;
   public static Icon Sleigh => Sleighf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sleigh");
   private static Icon? Sliderf;
   public static Icon Slider => Sliderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "slider");
   private static Icon? Slidersf;
   public static Icon Sliders => Slidersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sliders");
   public static Icon SlidersH => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Sliders;
   private static Icon? SlidersSimplef;
   public static Icon SlidersSimple => SlidersSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sliders-simple");
   private static Icon? SlidersUpf;
   public static Icon SlidersUp => SlidersUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sliders-up");
   public static Icon SlidersV => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SlidersUp;
   private static Icon? SlotMachinef;
   public static Icon SlotMachine => SlotMachinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "slot-machine");
   private static Icon? Smogf;
   public static Icon Smog => Smogf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "smog");
   private static Icon? Smokef;
   public static Icon Smoke => Smokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "smoke");
   private static Icon? Smokingf;
   public static Icon Smoking => Smokingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "smoking");
   private static Icon? Snakef;
   public static Icon Snake => Snakef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snake");
   private static Icon? Snoozef;
   public static Icon Snooze => Snoozef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snooze");
   public static Icon Zzz => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Snooze;
   private static Icon? SnowBlowingf;
   public static Icon SnowBlowing => SnowBlowingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snow-blowing");
   private static Icon? Snowflakef;
   public static Icon Snowflake => Snowflakef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snowflake");
   private static Icon? SnowflakeDropletsf;
   public static Icon SnowflakeDroplets => SnowflakeDropletsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snowflake-droplets");
   private static Icon? Snowflakesf;
   public static Icon Snowflakes => Snowflakesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snowflakes");
   private static Icon? Snowmanf;
   public static Icon Snowman => Snowmanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snowman");
   private static Icon? SnowmanHeadf;
   public static Icon SnowmanHead => SnowmanHeadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snowman-head");
   public static Icon FrostyHead => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SnowmanHead;
   private static Icon? Snowplowf;
   public static Icon Snowplow => Snowplowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "snowplow");
   private static Icon? Soapf;
   public static Icon Soap => Soapf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "soap");
   private static Icon? Socksf;
   public static Icon Socks => Socksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "socks");
   private static Icon? SoftServef;
   public static Icon SoftServe => SoftServef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "soft-serve");
   public static Icon Creemee => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SoftServe;
   private static Icon? SolarPanelf;
   public static Icon SolarPanel => SolarPanelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "solar-panel");
   private static Icon? SolarSystemf;
   public static Icon SolarSystem => SolarSystemf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "solar-system");
   private static Icon? Sortf;
   public static Icon Sort => Sortf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sort");
   public static Icon Unsorted => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Sort;
   private static Icon? SortDownf;
   public static Icon SortDown => SortDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sort-down");
   public static Icon SortDesc => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SortDown;
   private static Icon? SortUpf;
   public static Icon SortUp => SortUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sort-up");
   public static Icon SortAsc => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SortUp;
   private static Icon? Spaf;
   public static Icon Spa => Spaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spa");
   private static Icon? SpaceStationMoonf;
   public static Icon SpaceStationMoon => SpaceStationMoonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "space-station-moon");
   private static Icon? SpaceStationMoonConstructionf;
   public static Icon SpaceStationMoonConstruction => SpaceStationMoonConstructionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "space-station-moon-construction");
   public static Icon SpaceStationMoonAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SpaceStationMoonConstruction;
   private static Icon? Spadef;
   public static Icon Spade => Spadef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spade");
   private static Icon? SpaghettiMonsterFlyingf;
   public static Icon SpaghettiMonsterFlying => SpaghettiMonsterFlyingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spaghetti-monster-flying");
   public static Icon Pastafarianism => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SpaghettiMonsterFlying;
   private static Icon? Sparklef;
   public static Icon Sparkle => Sparklef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sparkle");
   private static Icon? Sparklesf;
   public static Icon Sparkles => Sparklesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sparkles");
   private static Icon? Speakerf;
   public static Icon Speaker => Speakerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "speaker");
   private static Icon? Speakersf;
   public static Icon Speakers => Speakersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "speakers");
   private static Icon? SpellCheckf;
   public static Icon SpellCheck => SpellCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spell-check");
   private static Icon? Spiderf;
   public static Icon Spider => Spiderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spider");
   private static Icon? SpiderBlackWidowf;
   public static Icon SpiderBlackWidow => SpiderBlackWidowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spider-black-widow");
   private static Icon? SpiderWebf;
   public static Icon SpiderWeb => SpiderWebf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spider-web");
   private static Icon? Spinnerf;
   public static Icon Spinner => Spinnerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spinner");
   private static Icon? SpinnerScalef;
   public static Icon SpinnerScale => SpinnerScalef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spinner-scale");
   private static Icon? SpinnerThirdf;
   public static Icon SpinnerThird => SpinnerThirdf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spinner-third");
   private static Icon? Splitf;
   public static Icon Split => Splitf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "split");
   private static Icon? Splotchf;
   public static Icon Splotch => Splotchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "splotch");
   private static Icon? Spoonf;
   public static Icon Spoon => Spoonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spoon");
   public static Icon UtensilSpoon => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Spoon;
   private static Icon? Sportsballf;
   public static Icon Sportsball => Sportsballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sportsball");
   private static Icon? SprayCanf;
   public static Icon SprayCan => SprayCanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spray-can");
   private static Icon? SprayCanSparklesf;
   public static Icon SprayCanSparkles => SprayCanSparklesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "spray-can-sparkles");
   public static Icon AirFreshener => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SprayCanSparkles;
   private static Icon? Sprinklerf;
   public static Icon Sprinkler => Sprinklerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sprinkler");
   private static Icon? SprinklerCeilingf;
   public static Icon SprinklerCeiling => SprinklerCeilingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sprinkler-ceiling");
   private static Icon? Squaref;
   public static Icon Square => Squaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square");
   private static Icon? Square0f;
   public static Icon Square0 => Square0f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-0");
   private static Icon? Square1f;
   public static Icon Square1 => Square1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-1");
   private static Icon? Square2f;
   public static Icon Square2 => Square2f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-2");
   private static Icon? Square3f;
   public static Icon Square3 => Square3f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-3");
   private static Icon? Square4f;
   public static Icon Square4 => Square4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-4");
   private static Icon? Square5f;
   public static Icon Square5 => Square5f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-5");
   private static Icon? Square6f;
   public static Icon Square6 => Square6f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-6");
   private static Icon? Square7f;
   public static Icon Square7 => Square7f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-7");
   private static Icon? Square8f;
   public static Icon Square8 => Square8f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-8");
   private static Icon? Square9f;
   public static Icon Square9 => Square9f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-9");
   private static Icon? SquareAf;
   public static Icon SquareA => SquareAf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-a");
   private static Icon? SquareALockf;
   public static Icon SquareALock => SquareALockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-a-lock");
   private static Icon? SquareAmpersandf;
   public static Icon SquareAmpersand => SquareAmpersandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-ampersand");
   private static Icon? SquareArrowDownf;
   public static Icon SquareArrowDown => SquareArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-arrow-down");
   public static Icon ArrowSquareDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareArrowDown;
   private static Icon? SquareArrowDownLeftf;
   public static Icon SquareArrowDownLeft => SquareArrowDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-arrow-down-left");
   private static Icon? SquareArrowDownRightf;
   public static Icon SquareArrowDownRight => SquareArrowDownRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-arrow-down-right");
   private static Icon? SquareArrowLeftf;
   public static Icon SquareArrowLeft => SquareArrowLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-arrow-left");
   public static Icon ArrowSquareLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareArrowLeft;
   private static Icon? SquareArrowRightf;
   public static Icon SquareArrowRight => SquareArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-arrow-right");
   public static Icon ArrowSquareRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareArrowRight;
   private static Icon? SquareArrowUpf;
   public static Icon SquareArrowUp => SquareArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-arrow-up");
   public static Icon ArrowSquareUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareArrowUp;
   private static Icon? SquareArrowUpLeftf;
   public static Icon SquareArrowUpLeft => SquareArrowUpLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-arrow-up-left");
   private static Icon? SquareArrowUpRightf;
   public static Icon SquareArrowUpRight => SquareArrowUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-arrow-up-right");
   public static Icon ExternalLinkSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareArrowUpRight;
   private static Icon? SquareBf;
   public static Icon SquareB => SquareBf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-b");
   private static Icon? SquareBoltf;
   public static Icon SquareBolt => SquareBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-bolt");
   private static Icon? SquareCf;
   public static Icon SquareC => SquareCf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-c");
   private static Icon? SquareCaretDownf;
   public static Icon SquareCaretDown => SquareCaretDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-caret-down");
   public static Icon CaretSquareDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareCaretDown;
   private static Icon? SquareCaretLeftf;
   public static Icon SquareCaretLeft => SquareCaretLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-caret-left");
   public static Icon CaretSquareLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareCaretLeft;
   private static Icon? SquareCaretRightf;
   public static Icon SquareCaretRight => SquareCaretRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-caret-right");
   public static Icon CaretSquareRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareCaretRight;
   private static Icon? SquareCaretUpf;
   public static Icon SquareCaretUp => SquareCaretUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-caret-up");
   public static Icon CaretSquareUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareCaretUp;
   private static Icon? SquareCheckf;
   public static Icon SquareCheck => SquareCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-check");
   public static Icon CheckSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareCheck;
   private static Icon? SquareChevronDownf;
   public static Icon SquareChevronDown => SquareChevronDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-chevron-down");
   public static Icon ChevronSquareDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareChevronDown;
   private static Icon? SquareChevronLeftf;
   public static Icon SquareChevronLeft => SquareChevronLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-chevron-left");
   public static Icon ChevronSquareLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareChevronLeft;
   private static Icon? SquareChevronRightf;
   public static Icon SquareChevronRight => SquareChevronRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-chevron-right");
   public static Icon ChevronSquareRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareChevronRight;
   private static Icon? SquareChevronUpf;
   public static Icon SquareChevronUp => SquareChevronUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-chevron-up");
   public static Icon ChevronSquareUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareChevronUp;
   private static Icon? SquareCodef;
   public static Icon SquareCode => SquareCodef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-code");
   private static Icon? SquareDf;
   public static Icon SquareD => SquareDf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-d");
   private static Icon? SquareDashedf;
   public static Icon SquareDashed => SquareDashedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-dashed");
   private static Icon? SquareDashedCirclePlusf;
   public static Icon SquareDashedCirclePlus => SquareDashedCirclePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-dashed-circle-plus");
   private static Icon? SquareDividef;
   public static Icon SquareDivide => SquareDividef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-divide");
   private static Icon? SquareDollarf;
   public static Icon SquareDollar => SquareDollarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-dollar");
   public static Icon DollarSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareDollar;
   public static Icon UsdSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareDollar;
   private static Icon? SquareDownf;
   public static Icon SquareDown => SquareDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-down");
   public static Icon ArrowAltSquareDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareDown;
   private static Icon? SquareDownLeftf;
   public static Icon SquareDownLeft => SquareDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-down-left");
   private static Icon? SquareDownRightf;
   public static Icon SquareDownRight => SquareDownRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-down-right");
   private static Icon? SquareEf;
   public static Icon SquareE => SquareEf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-e");
   private static Icon? SquareEllipsisf;
   public static Icon SquareEllipsis => SquareEllipsisf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-ellipsis");
   private static Icon? SquareEllipsisVerticalf;
   public static Icon SquareEllipsisVertical => SquareEllipsisVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-ellipsis-vertical");
   private static Icon? SquareEnvelopef;
   public static Icon SquareEnvelope => SquareEnvelopef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-envelope");
   public static Icon EnvelopeSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareEnvelope;
   private static Icon? SquareExclamationf;
   public static Icon SquareExclamation => SquareExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-exclamation");
   public static Icon ExclamationSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareExclamation;
   private static Icon? SquareFf;
   public static Icon SquareF => SquareFf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-f");
   private static Icon? SquareFragilef;
   public static Icon SquareFragile => SquareFragilef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-fragile");
   public static Icon BoxFragile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareFragile;
   public static Icon SquareWineGlassCrack => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareFragile;
   private static Icon? SquareFullf;
   public static Icon SquareFull => SquareFullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-full");
   private static Icon? SquareGf;
   public static Icon SquareG => SquareGf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-g");
   private static Icon? SquareHf;
   public static Icon SquareH => SquareHf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-h");
   public static Icon HSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareH;
   private static Icon? SquareHeartf;
   public static Icon SquareHeart => SquareHeartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-heart");
   public static Icon HeartSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareHeart;
   private static Icon? SquareIf;
   public static Icon SquareI => SquareIf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-i");
   private static Icon? SquareInfof;
   public static Icon SquareInfo => SquareInfof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-info");
   public static Icon InfoSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareInfo;
   private static Icon? SquareJf;
   public static Icon SquareJ => SquareJf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-j");
   private static Icon? SquareKf;
   public static Icon SquareK => SquareKf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-k");
   private static Icon? SquareKanbanf;
   public static Icon SquareKanban => SquareKanbanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-kanban");
   private static Icon? SquareLf;
   public static Icon SquareL => SquareLf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-l");
   private static Icon? SquareLeftf;
   public static Icon SquareLeft => SquareLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-left");
   public static Icon ArrowAltSquareLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareLeft;
   private static Icon? SquareListf;
   public static Icon SquareList => SquareListf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-list");
   private static Icon? SquareMf;
   public static Icon SquareM => SquareMf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-m");
   private static Icon? SquareMinusf;
   public static Icon SquareMinus => SquareMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-minus");
   public static Icon MinusSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareMinus;
   private static Icon? SquareNf;
   public static Icon SquareN => SquareNf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-n");
   private static Icon? SquareNfif;
   public static Icon SquareNfi => SquareNfif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-nfi");
   private static Icon? SquareOf;
   public static Icon SquareO => SquareOf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-o");
   private static Icon? SquarePf;
   public static Icon SquareP => SquarePf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-p");
   private static Icon? SquareParkingf;
   public static Icon SquareParking => SquareParkingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-parking");
   public static Icon Parking => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareParking;
   private static Icon? SquareParkingSlashf;
   public static Icon SquareParkingSlash => SquareParkingSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-parking-slash");
   public static Icon ParkingSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareParkingSlash;
   private static Icon? SquarePenf;
   public static Icon SquarePen => SquarePenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-pen");
   public static Icon PenSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquarePen;
   public static Icon PencilSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquarePen;
   private static Icon? SquarePersonConfinedf;
   public static Icon SquarePersonConfined => SquarePersonConfinedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-person-confined");
   private static Icon? SquarePhonef;
   public static Icon SquarePhone => SquarePhonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-phone");
   public static Icon PhoneSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquarePhone;
   private static Icon? SquarePhoneFlipf;
   public static Icon SquarePhoneFlip => SquarePhoneFlipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-phone-flip");
   public static Icon PhoneSquareAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquarePhoneFlip;
   private static Icon? SquarePhoneHangupf;
   public static Icon SquarePhoneHangup => SquarePhoneHangupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-phone-hangup");
   public static Icon PhoneSquareDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquarePhoneHangup;
   private static Icon? SquarePlusf;
   public static Icon SquarePlus => SquarePlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-plus");
   public static Icon PlusSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquarePlus;
   private static Icon? SquarePollHorizontalf;
   public static Icon SquarePollHorizontal => SquarePollHorizontalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-poll-horizontal");
   public static Icon PollH => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquarePollHorizontal;
   private static Icon? SquarePollVerticalf;
   public static Icon SquarePollVertical => SquarePollVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-poll-vertical");
   public static Icon Poll => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquarePollVertical;
   private static Icon? SquareQf;
   public static Icon SquareQ => SquareQf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-q");
   private static Icon? SquareQuartersf;
   public static Icon SquareQuarters => SquareQuartersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-quarters");
   private static Icon? SquareQuestionf;
   public static Icon SquareQuestion => SquareQuestionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-question");
   public static Icon QuestionSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareQuestion;
   private static Icon? SquareQuotef;
   public static Icon SquareQuote => SquareQuotef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-quote");
   private static Icon? SquareRf;
   public static Icon SquareR => SquareRf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-r");
   private static Icon? SquareRightf;
   public static Icon SquareRight => SquareRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-right");
   public static Icon ArrowAltSquareRight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareRight;
   private static Icon? SquareRingf;
   public static Icon SquareRing => SquareRingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-ring");
   private static Icon? SquareRootf;
   public static Icon SquareRoot => SquareRootf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-root");
   private static Icon? SquareRootVariablef;
   public static Icon SquareRootVariable => SquareRootVariablef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-root-variable");
   public static Icon SquareRootAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareRootVariable;
   private static Icon? SquareRssf;
   public static Icon SquareRss => SquareRssf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-rss");
   public static Icon RssSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareRss;
   private static Icon? SquareSf;
   public static Icon SquareS => SquareSf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-s");
   private static Icon? SquareShareNodesf;
   public static Icon SquareShareNodes => SquareShareNodesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-share-nodes");
   public static Icon ShareAltSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareShareNodes;
   private static Icon? SquareSlidersf;
   public static Icon SquareSliders => SquareSlidersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-sliders");
   public static Icon SlidersHSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareSliders;
   private static Icon? SquareSlidersVerticalf;
   public static Icon SquareSlidersVertical => SquareSlidersVerticalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-sliders-vertical");
   public static Icon SlidersVSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareSlidersVertical;
   private static Icon? SquareSmallf;
   public static Icon SquareSmall => SquareSmallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-small");
   private static Icon? SquareStarf;
   public static Icon SquareStar => SquareStarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-star");
   private static Icon? SquareTf;
   public static Icon SquareT => SquareTf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-t");
   private static Icon? SquareTerminalf;
   public static Icon SquareTerminal => SquareTerminalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-terminal");
   private static Icon? SquareThisWayUpf;
   public static Icon SquareThisWayUp => SquareThisWayUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-this-way-up");
   public static Icon BoxUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareThisWayUp;
   private static Icon? SquareUf;
   public static Icon SquareU => SquareUf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-u");
   private static Icon? SquareUpf;
   public static Icon SquareUp => SquareUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-up");
   public static Icon ArrowAltSquareUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareUp;
   private static Icon? SquareUpLeftf;
   public static Icon SquareUpLeft => SquareUpLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-up-left");
   private static Icon? SquareUpRightf;
   public static Icon SquareUpRight => SquareUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-up-right");
   public static Icon ExternalLinkSquareAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareUpRight;
   private static Icon? SquareUserf;
   public static Icon SquareUser => SquareUserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-user");
   private static Icon? SquareVf;
   public static Icon SquareV => SquareVf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-v");
   private static Icon? SquareVirusf;
   public static Icon SquareVirus => SquareVirusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-virus");
   private static Icon? SquareWf;
   public static Icon SquareW => SquareWf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-w");
   private static Icon? SquareXf;
   public static Icon SquareX => SquareXf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-x");
   private static Icon? SquareXmarkf;
   public static Icon SquareXmark => SquareXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-xmark");
   public static Icon TimesSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareXmark;
   public static Icon XmarkSquare => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SquareXmark;
   private static Icon? SquareYf;
   public static Icon SquareY => SquareYf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-y");
   private static Icon? SquareZf;
   public static Icon SquareZ => SquareZf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "square-z");
   private static Icon? Squidf;
   public static Icon Squid => Squidf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "squid");
   private static Icon? Squirrelf;
   public static Icon Squirrel => Squirrelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "squirrel");
   private static Icon? Stafff;
   public static Icon Staff => Stafff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "staff");
   private static Icon? StaffSnakef;
   public static Icon StaffSnake => StaffSnakef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "staff-snake");
   public static Icon RodAsclepius => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.StaffSnake;
   public static Icon RodSnake => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.StaffSnake;
   public static Icon StaffAesculapius => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.StaffSnake;
   private static Icon? Stairsf;
   public static Icon Stairs => Stairsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stairs");
   private static Icon? Stampf;
   public static Icon Stamp => Stampf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stamp");
   private static Icon? StandardDefinitionf;
   public static Icon StandardDefinition => StandardDefinitionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "standard-definition");
   public static Icon RectangleSd => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.StandardDefinition;
   private static Icon? Staplerf;
   public static Icon Stapler => Staplerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stapler");
   private static Icon? Starf;
   public static Icon Star => Starf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star");
   private static Icon? StarAndCrescentf;
   public static Icon StarAndCrescent => StarAndCrescentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-and-crescent");
   private static Icon? StarChristmasf;
   public static Icon StarChristmas => StarChristmasf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-christmas");
   private static Icon? StarExclamationf;
   public static Icon StarExclamation => StarExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-exclamation");
   private static Icon? StarHalff;
   public static Icon StarHalf => StarHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-half");
   private static Icon? StarHalfStrokef;
   public static Icon StarHalfStroke => StarHalfStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-half-stroke");
   public static Icon StarHalfAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.StarHalfStroke;
   private static Icon? StarOfDavidf;
   public static Icon StarOfDavid => StarOfDavidf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-of-david");
   private static Icon? StarOfLifef;
   public static Icon StarOfLife => StarOfLifef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-of-life");
   private static Icon? StarSharpf;
   public static Icon StarSharp => StarSharpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-sharp");
   private static Icon? StarSharpHalff;
   public static Icon StarSharpHalf => StarSharpHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-sharp-half");
   private static Icon? StarSharpHalfStrokef;
   public static Icon StarSharpHalfStroke => StarSharpHalfStrokef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-sharp-half-stroke");
   public static Icon StarSharpHalfAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.StarSharpHalfStroke;
   private static Icon? StarShootingf;
   public static Icon StarShooting => StarShootingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "star-shooting");
   private static Icon? Starfighterf;
   public static Icon Starfighter => Starfighterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "starfighter");
   private static Icon? StarfighterTwinIonEnginef;
   public static Icon StarfighterTwinIonEngine => StarfighterTwinIonEnginef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "starfighter-twin-ion-engine");
   public static Icon StarfighterAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.StarfighterTwinIonEngine;
   private static Icon? StarfighterTwinIonEngineAdvancedf;
   public static Icon StarfighterTwinIonEngineAdvanced => StarfighterTwinIonEngineAdvancedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "starfighter-twin-ion-engine-advanced");
   public static Icon StarfighterAltAdvanced => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.StarfighterTwinIonEngineAdvanced;
   private static Icon? Starsf;
   public static Icon Stars => Starsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stars");
   private static Icon? Starshipf;
   public static Icon Starship => Starshipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "starship");
   private static Icon? StarshipFreighterf;
   public static Icon StarshipFreighter => StarshipFreighterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "starship-freighter");
   private static Icon? Steakf;
   public static Icon Steak => Steakf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "steak");
   private static Icon? SteeringWheelf;
   public static Icon SteeringWheel => SteeringWheelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "steering-wheel");
   private static Icon? SterlingSignf;
   public static Icon SterlingSign => SterlingSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sterling-sign");
   public static Icon Gbp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SterlingSign;
   public static Icon PoundSign => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SterlingSign;
   private static Icon? Stethoscopef;
   public static Icon Stethoscope => Stethoscopef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stethoscope");
   private static Icon? Stockingf;
   public static Icon Stocking => Stockingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stocking");
   private static Icon? Stomachf;
   public static Icon Stomach => Stomachf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stomach");
   private static Icon? Stopf;
   public static Icon Stop => Stopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stop");
   private static Icon? Stopwatchf;
   public static Icon Stopwatch => Stopwatchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stopwatch");
   private static Icon? Stopwatch20f;
   public static Icon Stopwatch20 => Stopwatch20f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stopwatch-20");
   private static Icon? Storef;
   public static Icon Store => Storef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "store");
   private static Icon? StoreLockf;
   public static Icon StoreLock => StoreLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "store-lock");
   private static Icon? StoreSlashf;
   public static Icon StoreSlash => StoreSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "store-slash");
   private static Icon? Strawberryf;
   public static Icon Strawberry => Strawberryf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "strawberry");
   private static Icon? StreetViewf;
   public static Icon StreetView => StreetViewf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "street-view");
   private static Icon? Stretcherf;
   public static Icon Stretcher => Stretcherf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stretcher");
   private static Icon? Strikethroughf;
   public static Icon Strikethrough => Strikethroughf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "strikethrough");
   private static Icon? Stroopwafelf;
   public static Icon Stroopwafel => Stroopwafelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "stroopwafel");
   private static Icon? Subscriptf;
   public static Icon Subscript => Subscriptf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "subscript");
   private static Icon? Subtitlesf;
   public static Icon Subtitles => Subtitlesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "subtitles");
   private static Icon? SubtitlesSlashf;
   public static Icon SubtitlesSlash => SubtitlesSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "subtitles-slash");
   private static Icon? Suitcasef;
   public static Icon Suitcase => Suitcasef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "suitcase");
   private static Icon? SuitcaseMedicalf;
   public static Icon SuitcaseMedical => SuitcaseMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "suitcase-medical");
   public static Icon Medkit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SuitcaseMedical;
   private static Icon? SuitcaseRollingf;
   public static Icon SuitcaseRolling => SuitcaseRollingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "suitcase-rolling");
   private static Icon? Sunf;
   public static Icon Sun => Sunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sun");
   private static Icon? SunBrightf;
   public static Icon SunBright => SunBrightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sun-bright");
   public static Icon SunAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SunBright;
   private static Icon? SunCloudf;
   public static Icon SunCloud => SunCloudf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sun-cloud");
   private static Icon? SunDustf;
   public static Icon SunDust => SunDustf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sun-dust");
   private static Icon? SunHazef;
   public static Icon SunHaze => SunHazef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sun-haze");
   private static Icon? SunPlantWiltf;
   public static Icon SunPlantWilt => SunPlantWiltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sun-plant-wilt");
   private static Icon? Sunglassesf;
   public static Icon Sunglasses => Sunglassesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sunglasses");
   private static Icon? Sunrisef;
   public static Icon Sunrise => Sunrisef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sunrise");
   private static Icon? Sunsetf;
   public static Icon Sunset => Sunsetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sunset");
   private static Icon? Superscriptf;
   public static Icon Superscript => Superscriptf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "superscript");
   private static Icon? Sushif;
   public static Icon Sushi => Sushif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sushi");
   public static Icon Nigiri => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Sushi;
   private static Icon? SushiRollf;
   public static Icon SushiRoll => SushiRollf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sushi-roll");
   public static Icon MakiRoll => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SushiRoll;
   public static Icon Makizushi => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.SushiRoll;
   private static Icon? Swapf;
   public static Icon Swap => Swapf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "swap");
   private static Icon? SwapArrowsf;
   public static Icon SwapArrows => SwapArrowsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "swap-arrows");
   private static Icon? Swatchbookf;
   public static Icon Swatchbook => Swatchbookf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "swatchbook");
   private static Icon? Swordf;
   public static Icon Sword => Swordf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sword");
   private static Icon? SwordLaserf;
   public static Icon SwordLaser => SwordLaserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sword-laser");
   private static Icon? SwordLaserAltf;
   public static Icon SwordLaserAlt => SwordLaserAltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "sword-laser-alt");
   private static Icon? Swordsf;
   public static Icon Swords => Swordsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "swords");
   private static Icon? SwordsLaserf;
   public static Icon SwordsLaser => SwordsLaserf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "swords-laser");
   private static Icon? Symbolsf;
   public static Icon Symbols => Symbolsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "symbols");
   public static Icon IconsAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Symbols;
   private static Icon? Synagoguef;
   public static Icon Synagogue => Synagoguef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "synagogue");
   private static Icon? Syringef;
   public static Icon Syringe => Syringef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "syringe");
   private static Icon? Tf;
   public static Icon T => Tf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "t");
   private static Icon? TRexf;
   public static Icon TRex => TRexf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "t-rex");
   private static Icon? Tablef;
   public static Icon Table => Tablef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table");
   private static Icon? TableCellsf;
   public static Icon TableCells => TableCellsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-cells");
   public static Icon Th => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TableCells;
   private static Icon? TableCellsLargef;
   public static Icon TableCellsLarge => TableCellsLargef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-cells-large");
   public static Icon ThLarge => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TableCellsLarge;
   private static Icon? TableColumnsf;
   public static Icon TableColumns => TableColumnsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-columns");
   public static Icon Columns => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TableColumns;
   private static Icon? TableLayoutf;
   public static Icon TableLayout => TableLayoutf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-layout");
   private static Icon? TableListf;
   public static Icon TableList => TableListf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-list");
   public static Icon ThList => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TableList;
   private static Icon? TablePicnicf;
   public static Icon TablePicnic => TablePicnicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-picnic");
   private static Icon? TablePivotf;
   public static Icon TablePivot => TablePivotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-pivot");
   private static Icon? TableRowsf;
   public static Icon TableRows => TableRowsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-rows");
   public static Icon Rows => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TableRows;
   private static Icon? TableTennisPaddleBallf;
   public static Icon TableTennisPaddleBall => TableTennisPaddleBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-tennis-paddle-ball");
   public static Icon PingPongPaddleBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TableTennisPaddleBall;
   public static Icon TableTennis => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TableTennisPaddleBall;
   private static Icon? TableTreef;
   public static Icon TableTree => TableTreef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "table-tree");
   private static Icon? Tabletf;
   public static Icon Tablet => Tabletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tablet");
   public static Icon TabletAndroid => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Tablet;
   private static Icon? TabletButtonf;
   public static Icon TabletButton => TabletButtonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tablet-button");
   private static Icon? TabletRuggedf;
   public static Icon TabletRugged => TabletRuggedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tablet-rugged");
   private static Icon? TabletScreenf;
   public static Icon TabletScreen => TabletScreenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tablet-screen");
   public static Icon TabletAndroidAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TabletScreen;
   private static Icon? TabletScreenButtonf;
   public static Icon TabletScreenButton => TabletScreenButtonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tablet-screen-button");
   public static Icon TabletAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TabletScreenButton;
   private static Icon? Tabletsf;
   public static Icon Tablets => Tabletsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tablets");
   private static Icon? TachographDigitalf;
   public static Icon TachographDigital => TachographDigitalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tachograph-digital");
   public static Icon DigitalTachograph => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TachographDigital;
   private static Icon? Tacof;
   public static Icon Taco => Tacof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "taco");
   private static Icon? Tagf;
   public static Icon Tag => Tagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tag");
   private static Icon? Tagsf;
   public static Icon Tags => Tagsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tags");
   private static Icon? Tallyf;
   public static Icon Tally => Tallyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tally");
   public static Icon Tally5 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Tally;
   private static Icon? Tally1f;
   public static Icon Tally1 => Tally1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tally-1");
   private static Icon? Tally2f;
   public static Icon Tally2 => Tally2f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tally-2");
   private static Icon? Tally3f;
   public static Icon Tally3 => Tally3f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tally-3");
   private static Icon? Tally4f;
   public static Icon Tally4 => Tally4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tally-4");
   private static Icon? Tamalef;
   public static Icon Tamale => Tamalef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tamale");
   private static Icon? TankWaterf;
   public static Icon TankWater => TankWaterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tank-water");
   private static Icon? Tapef;
   public static Icon Tape => Tapef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tape");
   private static Icon? Tarpf;
   public static Icon Tarp => Tarpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tarp");
   private static Icon? TarpDropletf;
   public static Icon TarpDroplet => TarpDropletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tarp-droplet");
   private static Icon? Taxif;
   public static Icon Taxi => Taxif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "taxi");
   public static Icon Cab => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Taxi;
   private static Icon? TaxiBusf;
   public static Icon TaxiBus => TaxiBusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "taxi-bus");
   private static Icon? TeddyBearf;
   public static Icon TeddyBear => TeddyBearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "teddy-bear");
   private static Icon? Teethf;
   public static Icon Teeth => Teethf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "teeth");
   private static Icon? TeethOpenf;
   public static Icon TeethOpen => TeethOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "teeth-open");
   private static Icon? Telescopef;
   public static Icon Telescope => Telescopef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "telescope");
   private static Icon? TemperatureArrowDownf;
   public static Icon TemperatureArrowDown => TemperatureArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-arrow-down");
   public static Icon TemperatureDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureArrowDown;
   private static Icon? TemperatureArrowUpf;
   public static Icon TemperatureArrowUp => TemperatureArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-arrow-up");
   public static Icon TemperatureUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureArrowUp;
   private static Icon? TemperatureEmptyf;
   public static Icon TemperatureEmpty => TemperatureEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-empty");
   public static Icon Temperature0 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureEmpty;
   public static Icon Thermometer0 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureEmpty;
   public static Icon ThermometerEmpty => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureEmpty;
   private static Icon? TemperatureFullf;
   public static Icon TemperatureFull => TemperatureFullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-full");
   public static Icon Temperature4 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureFull;
   public static Icon Thermometer4 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureFull;
   public static Icon ThermometerFull => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureFull;
   private static Icon? TemperatureHalff;
   public static Icon TemperatureHalf => TemperatureHalff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-half");
   public static Icon Temperature2 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureHalf;
   public static Icon Thermometer2 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureHalf;
   public static Icon ThermometerHalf => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureHalf;
   private static Icon? TemperatureHighf;
   public static Icon TemperatureHigh => TemperatureHighf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-high");
   private static Icon? TemperatureListf;
   public static Icon TemperatureList => TemperatureListf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-list");
   private static Icon? TemperatureLowf;
   public static Icon TemperatureLow => TemperatureLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-low");
   private static Icon? TemperatureQuarterf;
   public static Icon TemperatureQuarter => TemperatureQuarterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-quarter");
   public static Icon Temperature1 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureQuarter;
   public static Icon Thermometer1 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureQuarter;
   public static Icon ThermometerQuarter => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureQuarter;
   private static Icon? TemperatureSnowf;
   public static Icon TemperatureSnow => TemperatureSnowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-snow");
   public static Icon TemperatureFrigid => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureSnow;
   private static Icon? TemperatureSunf;
   public static Icon TemperatureSun => TemperatureSunf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-sun");
   public static Icon TemperatureHot => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureSun;
   private static Icon? TemperatureThreeQuartersf;
   public static Icon TemperatureThreeQuarters => TemperatureThreeQuartersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "temperature-three-quarters");
   public static Icon Temperature3 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureThreeQuarters;
   public static Icon Thermometer3 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureThreeQuarters;
   public static Icon ThermometerThreeQuarters => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TemperatureThreeQuarters;
   private static Icon? TengeSignf;
   public static Icon TengeSign => TengeSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tenge-sign");
   public static Icon Tenge => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TengeSign;
   private static Icon? TennisBallf;
   public static Icon TennisBall => TennisBallf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tennis-ball");
   private static Icon? Tentf;
   public static Icon Tent => Tentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tent");
   private static Icon? TentArrowDownToLinef;
   public static Icon TentArrowDownToLine => TentArrowDownToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tent-arrow-down-to-line");
   private static Icon? TentArrowLeftRightf;
   public static Icon TentArrowLeftRight => TentArrowLeftRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tent-arrow-left-right");
   private static Icon? TentArrowTurnLeftf;
   public static Icon TentArrowTurnLeft => TentArrowTurnLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tent-arrow-turn-left");
   private static Icon? TentArrowsDownf;
   public static Icon TentArrowsDown => TentArrowsDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tent-arrows-down");
   private static Icon? TentDoublePeakf;
   public static Icon TentDoublePeak => TentDoublePeakf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tent-double-peak");
   private static Icon? Tentsf;
   public static Icon Tents => Tentsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tents");
   private static Icon? Terminalf;
   public static Icon Terminal => Terminalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "terminal");
   private static Icon? Textf;
   public static Icon Text => Textf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "text");
   private static Icon? TextHeightf;
   public static Icon TextHeight => TextHeightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "text-height");
   private static Icon? TextSizef;
   public static Icon TextSize => TextSizef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "text-size");
   private static Icon? TextSlashf;
   public static Icon TextSlash => TextSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "text-slash");
   public static Icon RemoveFormat => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TextSlash;
   private static Icon? TextWidthf;
   public static Icon TextWidth => TextWidthf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "text-width");
   private static Icon? Thermometerf;
   public static Icon Thermometer => Thermometerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "thermometer");
   private static Icon? Thetaf;
   public static Icon Theta => Thetaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "theta");
   private static Icon? ThoughtBubblef;
   public static Icon ThoughtBubble => ThoughtBubblef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "thought-bubble");
   private static Icon? ThumbsDownf;
   public static Icon ThumbsDown => ThumbsDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "thumbs-down");
   private static Icon? ThumbsUpf;
   public static Icon ThumbsUp => ThumbsUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "thumbs-up");
   private static Icon? Thumbtackf;
   public static Icon Thumbtack => Thumbtackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "thumbtack");
   public static Icon ThumbTack => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Thumbtack;
   private static Icon? Tickf;
   public static Icon Tick => Tickf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tick");
   private static Icon? Ticketf;
   public static Icon Ticket => Ticketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ticket");
   private static Icon? TicketAirlinef;
   public static Icon TicketAirline => TicketAirlinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ticket-airline");
   public static Icon TicketPerforatedPlane => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TicketAirline;
   public static Icon TicketPlane => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TicketAirline;
   private static Icon? TicketPerforatedf;
   public static Icon TicketPerforated => TicketPerforatedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ticket-perforated");
   private static Icon? TicketSimplef;
   public static Icon TicketSimple => TicketSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ticket-simple");
   public static Icon TicketAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TicketSimple;
   private static Icon? Ticketsf;
   public static Icon Tickets => Ticketsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tickets");
   private static Icon? TicketsAirlinef;
   public static Icon TicketsAirline => TicketsAirlinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tickets-airline");
   public static Icon TicketsPerforatedPlane => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TicketsAirline;
   public static Icon TicketsPlane => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TicketsAirline;
   private static Icon? TicketsPerforatedf;
   public static Icon TicketsPerforated => TicketsPerforatedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tickets-perforated");
   private static Icon? TicketsSimplef;
   public static Icon TicketsSimple => TicketsSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tickets-simple");
   private static Icon? Tildef;
   public static Icon Tilde => Tildef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tilde");
   private static Icon? Timelinef;
   public static Icon Timeline => Timelinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "timeline");
   private static Icon? TimelineArrowf;
   public static Icon TimelineArrow => TimelineArrowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "timeline-arrow");
   private static Icon? Timerf;
   public static Icon Timer => Timerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "timer");
   private static Icon? Tiref;
   public static Icon Tire => Tiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tire");
   private static Icon? TireFlatf;
   public static Icon TireFlat => TireFlatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tire-flat");
   private static Icon? TirePressureWarningf;
   public static Icon TirePressureWarning => TirePressureWarningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tire-pressure-warning");
   private static Icon? TireRuggedf;
   public static Icon TireRugged => TireRuggedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tire-rugged");
   private static Icon? ToggleLargeOfff;
   public static Icon ToggleLargeOff => ToggleLargeOfff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toggle-large-off");
   private static Icon? ToggleLargeOnf;
   public static Icon ToggleLargeOn => ToggleLargeOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toggle-large-on");
   private static Icon? ToggleOfff;
   public static Icon ToggleOff => ToggleOfff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toggle-off");
   private static Icon? ToggleOnf;
   public static Icon ToggleOn => ToggleOnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toggle-on");
   private static Icon? Toiletf;
   public static Icon Toilet => Toiletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet");
   private static Icon? ToiletPaperf;
   public static Icon ToiletPaper => ToiletPaperf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-paper");
   private static Icon? ToiletPaperBlankf;
   public static Icon ToiletPaperBlank => ToiletPaperBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-paper-blank");
   public static Icon ToiletPaperAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ToiletPaperBlank;
   private static Icon? ToiletPaperBlankUnderf;
   public static Icon ToiletPaperBlankUnder => ToiletPaperBlankUnderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-paper-blank-under");
   public static Icon ToiletPaperReverseAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ToiletPaperBlankUnder;
   private static Icon? ToiletPaperCheckf;
   public static Icon ToiletPaperCheck => ToiletPaperCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-paper-check");
   private static Icon? ToiletPaperSlashf;
   public static Icon ToiletPaperSlash => ToiletPaperSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-paper-slash");
   private static Icon? ToiletPaperUnderf;
   public static Icon ToiletPaperUnder => ToiletPaperUnderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-paper-under");
   public static Icon ToiletPaperReverse => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ToiletPaperUnder;
   private static Icon? ToiletPaperUnderSlashf;
   public static Icon ToiletPaperUnderSlash => ToiletPaperUnderSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-paper-under-slash");
   public static Icon ToiletPaperReverseSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.ToiletPaperUnderSlash;
   private static Icon? ToiletPaperXmarkf;
   public static Icon ToiletPaperXmark => ToiletPaperXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-paper-xmark");
   private static Icon? ToiletPortablef;
   public static Icon ToiletPortable => ToiletPortablef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilet-portable");
   private static Icon? ToiletsPortablef;
   public static Icon ToiletsPortable => ToiletsPortablef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toilets-portable");
   private static Icon? Tomatof;
   public static Icon Tomato => Tomatof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tomato");
   private static Icon? Tombstonef;
   public static Icon Tombstone => Tombstonef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tombstone");
   private static Icon? TombstoneBlankf;
   public static Icon TombstoneBlank => TombstoneBlankf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tombstone-blank");
   public static Icon TombstoneAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TombstoneBlank;
   private static Icon? Toolboxf;
   public static Icon Toolbox => Toolboxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toolbox");
   private static Icon? Toothf;
   public static Icon Tooth => Toothf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tooth");
   private static Icon? Toothbrushf;
   public static Icon Toothbrush => Toothbrushf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "toothbrush");
   private static Icon? ToriiGatef;
   public static Icon ToriiGate => ToriiGatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "torii-gate");
   private static Icon? Tornadof;
   public static Icon Tornado => Tornadof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tornado");
   private static Icon? TowerBroadcastf;
   public static Icon TowerBroadcast => TowerBroadcastf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tower-broadcast");
   public static Icon BroadcastTower => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TowerBroadcast;
   private static Icon? TowerCellf;
   public static Icon TowerCell => TowerCellf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tower-cell");
   private static Icon? TowerControlf;
   public static Icon TowerControl => TowerControlf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tower-control");
   private static Icon? TowerObservationf;
   public static Icon TowerObservation => TowerObservationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tower-observation");
   private static Icon? Tractorf;
   public static Icon Tractor => Tractorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tractor");
   private static Icon? Trademarkf;
   public static Icon Trademark => Trademarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trademark");
   private static Icon? TrafficConef;
   public static Icon TrafficCone => TrafficConef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "traffic-cone");
   private static Icon? TrafficLightf;
   public static Icon TrafficLight => TrafficLightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "traffic-light");
   private static Icon? TrafficLightGof;
   public static Icon TrafficLightGo => TrafficLightGof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "traffic-light-go");
   private static Icon? TrafficLightSlowf;
   public static Icon TrafficLightSlow => TrafficLightSlowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "traffic-light-slow");
   private static Icon? TrafficLightStopf;
   public static Icon TrafficLightStop => TrafficLightStopf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "traffic-light-stop");
   private static Icon? Trailerf;
   public static Icon Trailer => Trailerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trailer");
   private static Icon? Trainf;
   public static Icon Train => Trainf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "train");
   private static Icon? TrainSubwayf;
   public static Icon TrainSubway => TrainSubwayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "train-subway");
   public static Icon Subway => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrainSubway;
   private static Icon? TrainSubwayTunnelf;
   public static Icon TrainSubwayTunnel => TrainSubwayTunnelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "train-subway-tunnel");
   public static Icon SubwayTunnel => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrainSubwayTunnel;
   private static Icon? TrainTrackf;
   public static Icon TrainTrack => TrainTrackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "train-track");
   private static Icon? TrainTramf;
   public static Icon TrainTram => TrainTramf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "train-tram");
   private static Icon? TrainTunnelf;
   public static Icon TrainTunnel => TrainTunnelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "train-tunnel");
   private static Icon? TransformerBoltf;
   public static Icon TransformerBolt => TransformerBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transformer-bolt");
   private static Icon? Transgenderf;
   public static Icon Transgender => Transgenderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transgender");
   public static Icon TransgenderAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Transgender;
   private static Icon? Transporterf;
   public static Icon Transporter => Transporterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter");
   private static Icon? Transporter1f;
   public static Icon Transporter1 => Transporter1f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter-1");
   private static Icon? Transporter2f;
   public static Icon Transporter2 => Transporter2f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter-2");
   private static Icon? Transporter3f;
   public static Icon Transporter3 => Transporter3f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter-3");
   private static Icon? Transporter4f;
   public static Icon Transporter4 => Transporter4f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter-4");
   private static Icon? Transporter5f;
   public static Icon Transporter5 => Transporter5f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter-5");
   private static Icon? Transporter6f;
   public static Icon Transporter6 => Transporter6f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter-6");
   private static Icon? Transporter7f;
   public static Icon Transporter7 => Transporter7f ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter-7");
   private static Icon? TransporterEmptyf;
   public static Icon TransporterEmpty => TransporterEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "transporter-empty");
   private static Icon? Trashf;
   public static Icon Trash => Trashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash");
   private static Icon? TrashArrowUpf;
   public static Icon TrashArrowUp => TrashArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-arrow-up");
   public static Icon TrashRestore => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrashArrowUp;
   private static Icon? TrashCanf;
   public static Icon TrashCan => TrashCanf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can");
   public static Icon TrashAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrashCan;
   private static Icon? TrashCanArrowUpf;
   public static Icon TrashCanArrowUp => TrashCanArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can-arrow-up");
   public static Icon TrashRestoreAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrashCanArrowUp;
   private static Icon? TrashCanCheckf;
   public static Icon TrashCanCheck => TrashCanCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can-check");
   private static Icon? TrashCanClockf;
   public static Icon TrashCanClock => TrashCanClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can-clock");
   private static Icon? TrashCanListf;
   public static Icon TrashCanList => TrashCanListf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can-list");
   private static Icon? TrashCanPlusf;
   public static Icon TrashCanPlus => TrashCanPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can-plus");
   private static Icon? TrashCanSlashf;
   public static Icon TrashCanSlash => TrashCanSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can-slash");
   public static Icon TrashAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrashCanSlash;
   private static Icon? TrashCanUndof;
   public static Icon TrashCanUndo => TrashCanUndof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can-undo");
   public static Icon TrashCanArrowTurnLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrashCanUndo;
   public static Icon TrashUndoAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrashCanUndo;
   private static Icon? TrashCanXmarkf;
   public static Icon TrashCanXmark => TrashCanXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-can-xmark");
   private static Icon? TrashCheckf;
   public static Icon TrashCheck => TrashCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-check");
   private static Icon? TrashClockf;
   public static Icon TrashClock => TrashClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-clock");
   private static Icon? TrashListf;
   public static Icon TrashList => TrashListf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-list");
   private static Icon? TrashPlusf;
   public static Icon TrashPlus => TrashPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-plus");
   private static Icon? TrashSlashf;
   public static Icon TrashSlash => TrashSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-slash");
   private static Icon? TrashUndof;
   public static Icon TrashUndo => TrashUndof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-undo");
   public static Icon TrashArrowTurnLeft => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrashUndo;
   private static Icon? TrashXmarkf;
   public static Icon TrashXmark => TrashXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trash-xmark");
   private static Icon? TreasureChestf;
   public static Icon TreasureChest => TreasureChestf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "treasure-chest");
   private static Icon? Treef;
   public static Icon Tree => Treef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tree");
   private static Icon? TreeChristmasf;
   public static Icon TreeChristmas => TreeChristmasf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tree-christmas");
   private static Icon? TreeCityf;
   public static Icon TreeCity => TreeCityf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tree-city");
   private static Icon? TreeDeciduousf;
   public static Icon TreeDeciduous => TreeDeciduousf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tree-deciduous");
   public static Icon TreeAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TreeDeciduous;
   private static Icon? TreeDecoratedf;
   public static Icon TreeDecorated => TreeDecoratedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tree-decorated");
   private static Icon? TreeLargef;
   public static Icon TreeLarge => TreeLargef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tree-large");
   private static Icon? TreePalmf;
   public static Icon TreePalm => TreePalmf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tree-palm");
   private static Icon? Treesf;
   public static Icon Trees => Treesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trees");
   private static Icon? Trianglef;
   public static Icon Triangle => Trianglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "triangle");
   private static Icon? TriangleExclamationf;
   public static Icon TriangleExclamation => TriangleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "triangle-exclamation");
   public static Icon ExclamationTriangle => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TriangleExclamation;
   public static Icon Warning => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TriangleExclamation;
   private static Icon? TriangleInstrumentf;
   public static Icon TriangleInstrument => TriangleInstrumentf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "triangle-instrument");
   public static Icon TriangleMusic => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TriangleInstrument;
   private static Icon? TrianglePersonDiggingf;
   public static Icon TrianglePersonDigging => TrianglePersonDiggingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "triangle-person-digging");
   public static Icon Construction => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrianglePersonDigging;
   private static Icon? Tricyclef;
   public static Icon Tricycle => Tricyclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tricycle");
   private static Icon? TricycleAdultf;
   public static Icon TricycleAdult => TricycleAdultf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tricycle-adult");
   private static Icon? Trilliumf;
   public static Icon Trillium => Trilliumf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trillium");
   private static Icon? Trophyf;
   public static Icon Trophy => Trophyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trophy");
   private static Icon? TrophyStarf;
   public static Icon TrophyStar => TrophyStarf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trophy-star");
   public static Icon TrophyAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TrophyStar;
   private static Icon? Trowelf;
   public static Icon Trowel => Trowelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trowel");
   private static Icon? TrowelBricksf;
   public static Icon TrowelBricks => TrowelBricksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trowel-bricks");
   private static Icon? Truckf;
   public static Icon Truck => Truckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck");
   private static Icon? TruckArrowRightf;
   public static Icon TruckArrowRight => TruckArrowRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-arrow-right");
   private static Icon? TruckBoltf;
   public static Icon TruckBolt => TruckBoltf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-bolt");
   private static Icon? TruckClockf;
   public static Icon TruckClock => TruckClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-clock");
   public static Icon ShippingTimed => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TruckClock;
   private static Icon? TruckContainerf;
   public static Icon TruckContainer => TruckContainerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-container");
   private static Icon? TruckContainerEmptyf;
   public static Icon TruckContainerEmpty => TruckContainerEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-container-empty");
   private static Icon? TruckDropletf;
   public static Icon TruckDroplet => TruckDropletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-droplet");
   private static Icon? TruckFastf;
   public static Icon TruckFast => TruckFastf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-fast");
   public static Icon ShippingFast => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TruckFast;
   private static Icon? TruckFieldf;
   public static Icon TruckField => TruckFieldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-field");
   private static Icon? TruckFieldUnf;
   public static Icon TruckFieldUn => TruckFieldUnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-field-un");
   private static Icon? TruckFiref;
   public static Icon TruckFire => TruckFiref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-fire");
   private static Icon? TruckFlatbedf;
   public static Icon TruckFlatbed => TruckFlatbedf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-flatbed");
   private static Icon? TruckFrontf;
   public static Icon TruckFront => TruckFrontf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-front");
   private static Icon? TruckLadderf;
   public static Icon TruckLadder => TruckLadderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-ladder");
   private static Icon? TruckMedicalf;
   public static Icon TruckMedical => TruckMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-medical");
   public static Icon Ambulance => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TruckMedical;
   private static Icon? TruckMonsterf;
   public static Icon TruckMonster => TruckMonsterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-monster");
   private static Icon? TruckMovingf;
   public static Icon TruckMoving => TruckMovingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-moving");
   private static Icon? TruckPickupf;
   public static Icon TruckPickup => TruckPickupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-pickup");
   private static Icon? TruckPlanef;
   public static Icon TruckPlane => TruckPlanef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-plane");
   private static Icon? TruckPlowf;
   public static Icon TruckPlow => TruckPlowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-plow");
   private static Icon? TruckRampf;
   public static Icon TruckRamp => TruckRampf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-ramp");
   private static Icon? TruckRampBoxf;
   public static Icon TruckRampBox => TruckRampBoxf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-ramp-box");
   public static Icon TruckLoading => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TruckRampBox;
   private static Icon? TruckRampCouchf;
   public static Icon TruckRampCouch => TruckRampCouchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-ramp-couch");
   public static Icon TruckCouch => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TruckRampCouch;
   private static Icon? TruckTowf;
   public static Icon TruckTow => TruckTowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-tow");
   private static Icon? TruckUtensilsf;
   public static Icon TruckUtensils => TruckUtensilsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "truck-utensils");
   private static Icon? Trumpetf;
   public static Icon Trumpet => Trumpetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "trumpet");
   private static Icon? Ttyf;
   public static Icon Tty => Ttyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tty");
   public static Icon Teletype => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Tty;
   private static Icon? TtyAnswerf;
   public static Icon TtyAnswer => TtyAnswerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tty-answer");
   public static Icon TeletypeAnswer => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TtyAnswer;
   private static Icon? TugrikSignf;
   public static Icon TugrikSign => TugrikSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tugrik-sign");
   private static Icon? Turkeyf;
   public static Icon Turkey => Turkeyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turkey");
   private static Icon? TurkishLiraSignf;
   public static Icon TurkishLiraSign => TurkishLiraSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turkish-lira-sign");
   public static Icon Try => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TurkishLiraSign;
   public static Icon TurkishLira => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TurkishLiraSign;
   private static Icon? TurnDownf;
   public static Icon TurnDown => TurnDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turn-down");
   public static Icon LevelDownAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TurnDown;
   private static Icon? TurnDownLeftf;
   public static Icon TurnDownLeft => TurnDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turn-down-left");
   private static Icon? TurnDownRightf;
   public static Icon TurnDownRight => TurnDownRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turn-down-right");
   private static Icon? TurnLeftf;
   public static Icon TurnLeft => TurnLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turn-left");
   private static Icon? TurnLeftDownf;
   public static Icon TurnLeftDown => TurnLeftDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turn-left-down");
   private static Icon? TurnLeftUpf;
   public static Icon TurnLeftUp => TurnLeftUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turn-left-up");
   private static Icon? TurnRightf;
   public static Icon TurnRight => TurnRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turn-right");
   private static Icon? TurnUpf;
   public static Icon TurnUp => TurnUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turn-up");
   public static Icon LevelUpAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.TurnUp;
   private static Icon? Turntablef;
   public static Icon Turntable => Turntablef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turntable");
   private static Icon? Turtlef;
   public static Icon Turtle => Turtlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "turtle");
   private static Icon? Tvf;
   public static Icon Tv => Tvf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tv");
   public static Icon Television => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Tv;
   public static Icon TvAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Tv;
   private static Icon? TvMusicf;
   public static Icon TvMusic => TvMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tv-music");
   private static Icon? TvRetrof;
   public static Icon TvRetro => TvRetrof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "tv-retro");
   private static Icon? Typewriterf;
   public static Icon Typewriter => Typewriterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "typewriter");
   private static Icon? Uf;
   public static Icon U => Uf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "u");
   private static Icon? Ufof;
   public static Icon Ufo => Ufof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ufo");
   private static Icon? UfoBeamf;
   public static Icon UfoBeam => UfoBeamf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "ufo-beam");
   private static Icon? Umbrellaf;
   public static Icon Umbrella => Umbrellaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "umbrella");
   private static Icon? UmbrellaBeachf;
   public static Icon UmbrellaBeach => UmbrellaBeachf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "umbrella-beach");
   private static Icon? UmbrellaSimplef;
   public static Icon UmbrellaSimple => UmbrellaSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "umbrella-simple");
   public static Icon UmbrellaAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UmbrellaSimple;
   private static Icon? Underlinef;
   public static Icon Underline => Underlinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "underline");
   private static Icon? Unicornf;
   public static Icon Unicorn => Unicornf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "unicorn");
   private static Icon? UniformMartialArtsf;
   public static Icon UniformMartialArts => UniformMartialArtsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "uniform-martial-arts");
   private static Icon? Unionf;
   public static Icon Union => Unionf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "union");
   private static Icon? UniversalAccessf;
   public static Icon UniversalAccess => UniversalAccessf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "universal-access");
   private static Icon? Unlockf;
   public static Icon Unlock => Unlockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "unlock");
   private static Icon? UnlockKeyholef;
   public static Icon UnlockKeyhole => UnlockKeyholef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "unlock-keyhole");
   public static Icon UnlockAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UnlockKeyhole;
   private static Icon? Upf;
   public static Icon Up => Upf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up");
   public static Icon ArrowAltUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Up;
   private static Icon? UpDownf;
   public static Icon UpDown => UpDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-down");
   public static Icon ArrowsAltV => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UpDown;
   private static Icon? UpDownLeftRightf;
   public static Icon UpDownLeftRight => UpDownLeftRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-down-left-right");
   public static Icon ArrowsAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UpDownLeftRight;
   private static Icon? UpFromBracketf;
   public static Icon UpFromBracket => UpFromBracketf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-from-bracket");
   private static Icon? UpFromDottedLinef;
   public static Icon UpFromDottedLine => UpFromDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-from-dotted-line");
   private static Icon? UpFromLinef;
   public static Icon UpFromLine => UpFromLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-from-line");
   public static Icon ArrowAltFromBottom => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UpFromLine;
   private static Icon? UpLeftf;
   public static Icon UpLeft => UpLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-left");
   private static Icon? UpLongf;
   public static Icon UpLong => UpLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-long");
   public static Icon LongArrowAltUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UpLong;
   private static Icon? UpRightf;
   public static Icon UpRight => UpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-right");
   private static Icon? UpRightAndDownLeftFromCenterf;
   public static Icon UpRightAndDownLeftFromCenter => UpRightAndDownLeftFromCenterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-right-and-down-left-from-center");
   public static Icon ExpandAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UpRightAndDownLeftFromCenter;
   private static Icon? UpRightFromSquaref;
   public static Icon UpRightFromSquare => UpRightFromSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-right-from-square");
   public static Icon ExternalLinkAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UpRightFromSquare;
   private static Icon? UpToDottedLinef;
   public static Icon UpToDottedLine => UpToDottedLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-to-dotted-line");
   private static Icon? UpToLinef;
   public static Icon UpToLine => UpToLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "up-to-line");
   public static Icon ArrowAltToTop => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UpToLine;
   private static Icon? Uploadf;
   public static Icon Upload => Uploadf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "upload");
   private static Icon? UsbDrivef;
   public static Icon UsbDrive => UsbDrivef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "usb-drive");
   private static Icon? Userf;
   public static Icon User => Userf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user");
   private static Icon? UserAlienf;
   public static Icon UserAlien => UserAlienf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-alien");
   private static Icon? UserAstronautf;
   public static Icon UserAstronaut => UserAstronautf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-astronaut");
   private static Icon? UserBountyHunterf;
   public static Icon UserBountyHunter => UserBountyHunterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-bounty-hunter");
   private static Icon? UserCheckf;
   public static Icon UserCheck => UserCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-check");
   private static Icon? UserCheff;
   public static Icon UserChef => UserCheff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-chef");
   private static Icon? UserClockf;
   public static Icon UserClock => UserClockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-clock");
   private static Icon? UserCowboyf;
   public static Icon UserCowboy => UserCowboyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-cowboy");
   private static Icon? UserCrownf;
   public static Icon UserCrown => UserCrownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-crown");
   private static Icon? UserDoctorf;
   public static Icon UserDoctor => UserDoctorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-doctor");
   public static Icon UserMd => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserDoctor;
   private static Icon? UserDoctorHairf;
   public static Icon UserDoctorHair => UserDoctorHairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-doctor-hair");
   private static Icon? UserDoctorHairLongf;
   public static Icon UserDoctorHairLong => UserDoctorHairLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-doctor-hair-long");
   private static Icon? UserDoctorMessagef;
   public static Icon UserDoctorMessage => UserDoctorMessagef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-doctor-message");
   public static Icon UserMdChat => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserDoctorMessage;
   private static Icon? UserGearf;
   public static Icon UserGear => UserGearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-gear");
   public static Icon UserCog => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserGear;
   private static Icon? UserGraduatef;
   public static Icon UserGraduate => UserGraduatef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-graduate");
   private static Icon? UserGroupf;
   public static Icon UserGroup => UserGroupf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-group");
   public static Icon UserFriends => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserGroup;
   private static Icon? UserGroupCrownf;
   public static Icon UserGroupCrown => UserGroupCrownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-group-crown");
   public static Icon UsersCrown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserGroupCrown;
   private static Icon? UserGroupSimplef;
   public static Icon UserGroupSimple => UserGroupSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-group-simple");
   private static Icon? UserHairf;
   public static Icon UserHair => UserHairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-hair");
   private static Icon? UserHairBunsf;
   public static Icon UserHairBuns => UserHairBunsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-hair-buns");
   private static Icon? UserHairLongf;
   public static Icon UserHairLong => UserHairLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-hair-long");
   private static Icon? UserHairMulletf;
   public static Icon UserHairMullet => UserHairMulletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-hair-mullet");
   public static Icon BusinessFront => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserHairMullet;
   public static Icon PartyBack => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserHairMullet;
   public static Icon TrianBalbot => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserHairMullet;
   private static Icon? UserHeadsetf;
   public static Icon UserHeadset => UserHeadsetf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-headset");
   private static Icon? UserHelmetSafetyf;
   public static Icon UserHelmetSafety => UserHelmetSafetyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-helmet-safety");
   public static Icon UserConstruction => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserHelmetSafety;
   public static Icon UserHardHat => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserHelmetSafety;
   private static Icon? UserInjuredf;
   public static Icon UserInjured => UserInjuredf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-injured");
   private static Icon? UserLargef;
   public static Icon UserLarge => UserLargef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-large");
   public static Icon UserAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserLarge;
   private static Icon? UserLargeSlashf;
   public static Icon UserLargeSlash => UserLargeSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-large-slash");
   public static Icon UserAltSlash => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserLargeSlash;
   private static Icon? UserLockf;
   public static Icon UserLock => UserLockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-lock");
   private static Icon? UserMagnifyingGlassf;
   public static Icon UserMagnifyingGlass => UserMagnifyingGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-magnifying-glass");
   private static Icon? UserMinusf;
   public static Icon UserMinus => UserMinusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-minus");
   private static Icon? UserMusicf;
   public static Icon UserMusic => UserMusicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-music");
   private static Icon? UserNinjaf;
   public static Icon UserNinja => UserNinjaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-ninja");
   private static Icon? UserNursef;
   public static Icon UserNurse => UserNursef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-nurse");
   private static Icon? UserNurseHairf;
   public static Icon UserNurseHair => UserNurseHairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-nurse-hair");
   private static Icon? UserNurseHairLongf;
   public static Icon UserNurseHairLong => UserNurseHairLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-nurse-hair-long");
   private static Icon? UserPenf;
   public static Icon UserPen => UserPenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-pen");
   public static Icon UserEdit => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserPen;
   private static Icon? UserPilotf;
   public static Icon UserPilot => UserPilotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-pilot");
   private static Icon? UserPilotTief;
   public static Icon UserPilotTie => UserPilotTief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-pilot-tie");
   private static Icon? UserPlusf;
   public static Icon UserPlus => UserPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-plus");
   private static Icon? UserPolicef;
   public static Icon UserPolice => UserPolicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-police");
   private static Icon? UserPoliceTief;
   public static Icon UserPoliceTie => UserPoliceTief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-police-tie");
   private static Icon? UserRobotf;
   public static Icon UserRobot => UserRobotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-robot");
   private static Icon? UserRobotXmarksf;
   public static Icon UserRobotXmarks => UserRobotXmarksf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-robot-xmarks");
   private static Icon? UserSecretf;
   public static Icon UserSecret => UserSecretf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-secret");
   private static Icon? UserShakespearef;
   public static Icon UserShakespeare => UserShakespearef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-shakespeare");
   private static Icon? UserShieldf;
   public static Icon UserShield => UserShieldf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-shield");
   private static Icon? UserSlashf;
   public static Icon UserSlash => UserSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-slash");
   private static Icon? UserTagf;
   public static Icon UserTag => UserTagf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-tag");
   private static Icon? UserTief;
   public static Icon UserTie => UserTief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-tie");
   private static Icon? UserTieHairf;
   public static Icon UserTieHair => UserTieHairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-tie-hair");
   private static Icon? UserTieHairLongf;
   public static Icon UserTieHairLong => UserTieHairLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-tie-hair-long");
   private static Icon? UserUnlockf;
   public static Icon UserUnlock => UserUnlockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-unlock");
   private static Icon? UserVisorf;
   public static Icon UserVisor => UserVisorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-visor");
   private static Icon? UserVneckf;
   public static Icon UserVneck => UserVneckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-vneck");
   private static Icon? UserVneckHairf;
   public static Icon UserVneckHair => UserVneckHairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-vneck-hair");
   private static Icon? UserVneckHairLongf;
   public static Icon UserVneckHairLong => UserVneckHairLongf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-vneck-hair-long");
   private static Icon? UserXmarkf;
   public static Icon UserXmark => UserXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "user-xmark");
   public static Icon UserTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UserXmark;
   private static Icon? Usersf;
   public static Icon Users => Usersf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users");
   private static Icon? UsersBetweenLinesf;
   public static Icon UsersBetweenLines => UsersBetweenLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users-between-lines");
   private static Icon? UsersGearf;
   public static Icon UsersGear => UsersGearf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users-gear");
   public static Icon UsersCog => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.UsersGear;
   private static Icon? UsersLinef;
   public static Icon UsersLine => UsersLinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users-line");
   private static Icon? UsersMedicalf;
   public static Icon UsersMedical => UsersMedicalf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users-medical");
   private static Icon? UsersRaysf;
   public static Icon UsersRays => UsersRaysf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users-rays");
   private static Icon? UsersRectanglef;
   public static Icon UsersRectangle => UsersRectanglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users-rectangle");
   private static Icon? UsersSlashf;
   public static Icon UsersSlash => UsersSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users-slash");
   private static Icon? UsersViewfinderf;
   public static Icon UsersViewfinder => UsersViewfinderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "users-viewfinder");
   private static Icon? Utensilsf;
   public static Icon Utensils => Utensilsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "utensils");
   public static Icon Cutlery => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Utensils;
   private static Icon? UtensilsSlashf;
   public static Icon UtensilsSlash => UtensilsSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "utensils-slash");
   private static Icon? UtilityPolef;
   public static Icon UtilityPole => UtilityPolef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "utility-pole");
   private static Icon? UtilityPoleDoublef;
   public static Icon UtilityPoleDouble => UtilityPoleDoublef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "utility-pole-double");
   private static Icon? Vf;
   public static Icon V => Vf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "v");
   private static Icon? Vacuumf;
   public static Icon Vacuum => Vacuumf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vacuum");
   private static Icon? VacuumRobotf;
   public static Icon VacuumRobot => VacuumRobotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vacuum-robot");
   private static Icon? ValueAbsolutef;
   public static Icon ValueAbsolute => ValueAbsolutef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "value-absolute");
   private static Icon? VanShuttlef;
   public static Icon VanShuttle => VanShuttlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "van-shuttle");
   public static Icon ShuttleVan => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.VanShuttle;
   private static Icon? Vaultf;
   public static Icon Vault => Vaultf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vault");
   private static Icon? VectorCirclef;
   public static Icon VectorCircle => VectorCirclef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vector-circle");
   private static Icon? VectorPolygonf;
   public static Icon VectorPolygon => VectorPolygonf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vector-polygon");
   private static Icon? VectorSquaref;
   public static Icon VectorSquare => VectorSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vector-square");
   private static Icon? VentDamperf;
   public static Icon VentDamper => VentDamperf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vent-damper");
   private static Icon? Venusf;
   public static Icon Venus => Venusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "venus");
   private static Icon? VenusDoublef;
   public static Icon VenusDouble => VenusDoublef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "venus-double");
   private static Icon? VenusMarsf;
   public static Icon VenusMars => VenusMarsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "venus-mars");
   private static Icon? Vestf;
   public static Icon Vest => Vestf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vest");
   private static Icon? VestPatchesf;
   public static Icon VestPatches => VestPatchesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vest-patches");
   private static Icon? Vialf;
   public static Icon Vial => Vialf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vial");
   private static Icon? VialCircleCheckf;
   public static Icon VialCircleCheck => VialCircleCheckf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vial-circle-check");
   private static Icon? VialVirusf;
   public static Icon VialVirus => VialVirusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vial-virus");
   private static Icon? Vialsf;
   public static Icon Vials => Vialsf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vials");
   private static Icon? Videof;
   public static Icon Video => Videof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "video");
   public static Icon VideoCamera => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Video;
   private static Icon? VideoArrowDownLeftf;
   public static Icon VideoArrowDownLeft => VideoArrowDownLeftf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "video-arrow-down-left");
   private static Icon? VideoArrowUpRightf;
   public static Icon VideoArrowUpRight => VideoArrowUpRightf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "video-arrow-up-right");
   private static Icon? VideoPlusf;
   public static Icon VideoPlus => VideoPlusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "video-plus");
   private static Icon? VideoSlashf;
   public static Icon VideoSlash => VideoSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "video-slash");
   private static Icon? Viharaf;
   public static Icon Vihara => Viharaf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vihara");
   private static Icon? Violinf;
   public static Icon Violin => Violinf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "violin");
   private static Icon? Virusf;
   public static Icon Virus => Virusf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "virus");
   private static Icon? VirusCovidf;
   public static Icon VirusCovid => VirusCovidf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "virus-covid");
   private static Icon? VirusCovidSlashf;
   public static Icon VirusCovidSlash => VirusCovidSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "virus-covid-slash");
   private static Icon? VirusSlashf;
   public static Icon VirusSlash => VirusSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "virus-slash");
   private static Icon? Virusesf;
   public static Icon Viruses => Virusesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "viruses");
   private static Icon? Voicemailf;
   public static Icon Voicemail => Voicemailf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "voicemail");
   private static Icon? Volcanof;
   public static Icon Volcano => Volcanof ??= new Icon(IconFamily.Sharp, IconStyle.Light, "volcano");
   private static Icon? Volleyballf;
   public static Icon Volleyball => Volleyballf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "volleyball");
   public static Icon VolleyballBall => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Volleyball;
   private static Icon? Volumef;
   public static Icon Volume => Volumef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "volume");
   public static Icon VolumeMedium => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Volume;
   private static Icon? VolumeHighf;
   public static Icon VolumeHigh => VolumeHighf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "volume-high");
   public static Icon VolumeUp => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.VolumeHigh;
   private static Icon? VolumeLowf;
   public static Icon VolumeLow => VolumeLowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "volume-low");
   public static Icon VolumeDown => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.VolumeLow;
   private static Icon? VolumeOfff;
   public static Icon VolumeOff => VolumeOfff ??= new Icon(IconFamily.Sharp, IconStyle.Light, "volume-off");
   private static Icon? VolumeSlashf;
   public static Icon VolumeSlash => VolumeSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "volume-slash");
   private static Icon? VolumeXmarkf;
   public static Icon VolumeXmark => VolumeXmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "volume-xmark");
   public static Icon VolumeMute => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.VolumeXmark;
   public static Icon VolumeTimes => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.VolumeXmark;
   private static Icon? VrCardboardf;
   public static Icon VrCardboard => VrCardboardf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "vr-cardboard");
   private static Icon? Wf;
   public static Icon W => Wf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "w");
   private static Icon? Wafflef;
   public static Icon Waffle => Wafflef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "waffle");
   private static Icon? WagonCoveredf;
   public static Icon WagonCovered => WagonCoveredf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wagon-covered");
   private static Icon? Walkerf;
   public static Icon Walker => Walkerf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "walker");
   private static Icon? WalkieTalkief;
   public static Icon WalkieTalkie => WalkieTalkief ??= new Icon(IconFamily.Sharp, IconStyle.Light, "walkie-talkie");
   private static Icon? Walletf;
   public static Icon Wallet => Walletf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wallet");
   private static Icon? Wandf;
   public static Icon Wand => Wandf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wand");
   private static Icon? WandMagicf;
   public static Icon WandMagic => WandMagicf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wand-magic");
   public static Icon Magic => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WandMagic;
   private static Icon? WandMagicSparklesf;
   public static Icon WandMagicSparkles => WandMagicSparklesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wand-magic-sparkles");
   public static Icon MagicWandSparkles => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WandMagicSparkles;
   private static Icon? WandSparklesf;
   public static Icon WandSparkles => WandSparklesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wand-sparkles");
   private static Icon? Warehousef;
   public static Icon Warehouse => Warehousef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "warehouse");
   private static Icon? WarehouseFullf;
   public static Icon WarehouseFull => WarehouseFullf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "warehouse-full");
   public static Icon WarehouseAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WarehouseFull;
   private static Icon? WashingMachinef;
   public static Icon WashingMachine => WashingMachinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "washing-machine");
   public static Icon Washer => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WashingMachine;
   private static Icon? Watchf;
   public static Icon Watch => Watchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "watch");
   private static Icon? WatchApplef;
   public static Icon WatchApple => WatchApplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "watch-apple");
   private static Icon? WatchCalculatorf;
   public static Icon WatchCalculator => WatchCalculatorf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "watch-calculator");
   private static Icon? WatchFitnessf;
   public static Icon WatchFitness => WatchFitnessf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "watch-fitness");
   private static Icon? WatchSmartf;
   public static Icon WatchSmart => WatchSmartf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "watch-smart");
   private static Icon? Waterf;
   public static Icon Water => Waterf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "water");
   private static Icon? WaterArrowDownf;
   public static Icon WaterArrowDown => WaterArrowDownf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "water-arrow-down");
   public static Icon WaterLower => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WaterArrowDown;
   private static Icon? WaterArrowUpf;
   public static Icon WaterArrowUp => WaterArrowUpf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "water-arrow-up");
   public static Icon WaterRise => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WaterArrowUp;
   private static Icon? WaterLadderf;
   public static Icon WaterLadder => WaterLadderf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "water-ladder");
   public static Icon LadderWater => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WaterLadder;
   public static Icon SwimmingPool => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WaterLadder;
   private static Icon? WatermelonSlicef;
   public static Icon WatermelonSlice => WatermelonSlicef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "watermelon-slice");
   private static Icon? Wavef;
   public static Icon Wave => Wavef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wave");
   private static Icon? WavePulsef;
   public static Icon WavePulse => WavePulsef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wave-pulse");
   public static Icon HeartRate => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WavePulse;
   private static Icon? WaveSinef;
   public static Icon WaveSine => WaveSinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wave-sine");
   private static Icon? WaveSquaref;
   public static Icon WaveSquare => WaveSquaref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wave-square");
   private static Icon? WaveTrianglef;
   public static Icon WaveTriangle => WaveTrianglef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wave-triangle");
   private static Icon? Waveformf;
   public static Icon Waveform => Waveformf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "waveform");
   private static Icon? WaveformLinesf;
   public static Icon WaveformLines => WaveformLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "waveform-lines");
   public static Icon WaveformPath => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WaveformLines;
   private static Icon? WavesSinef;
   public static Icon WavesSine => WavesSinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "waves-sine");
   private static Icon? Webhookf;
   public static Icon Webhook => Webhookf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "webhook");
   private static Icon? WeightHangingf;
   public static Icon WeightHanging => WeightHangingf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "weight-hanging");
   private static Icon? WeightScalef;
   public static Icon WeightScale => WeightScalef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "weight-scale");
   public static Icon Weight => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WeightScale;
   private static Icon? Whalef;
   public static Icon Whale => Whalef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "whale");
   private static Icon? Wheatf;
   public static Icon Wheat => Wheatf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wheat");
   private static Icon? WheatAwnf;
   public static Icon WheatAwn => WheatAwnf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wheat-awn");
   public static Icon WheatAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WheatAwn;
   private static Icon? WheatAwnCircleExclamationf;
   public static Icon WheatAwnCircleExclamation => WheatAwnCircleExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wheat-awn-circle-exclamation");
   private static Icon? WheatAwnSlashf;
   public static Icon WheatAwnSlash => WheatAwnSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wheat-awn-slash");
   private static Icon? WheatSlashf;
   public static Icon WheatSlash => WheatSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wheat-slash");
   private static Icon? Wheelchairf;
   public static Icon Wheelchair => Wheelchairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wheelchair");
   private static Icon? WheelchairMovef;
   public static Icon WheelchairMove => WheelchairMovef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wheelchair-move");
   public static Icon WheelchairAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WheelchairMove;
   private static Icon? WhiskeyGlassf;
   public static Icon WhiskeyGlass => WhiskeyGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "whiskey-glass");
   public static Icon GlassWhiskey => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WhiskeyGlass;
   private static Icon? WhiskeyGlassIcef;
   public static Icon WhiskeyGlassIce => WhiskeyGlassIcef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "whiskey-glass-ice");
   public static Icon GlassWhiskeyRocks => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WhiskeyGlassIce;
   private static Icon? Whistlef;
   public static Icon Whistle => Whistlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "whistle");
   private static Icon? Wifif;
   public static Icon Wifi => Wifif ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wifi");
   public static Icon Wifi3 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Wifi;
   public static Icon WifiStrong => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Wifi;
   private static Icon? WifiExclamationf;
   public static Icon WifiExclamation => WifiExclamationf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wifi-exclamation");
   private static Icon? WifiFairf;
   public static Icon WifiFair => WifiFairf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wifi-fair");
   public static Icon Wifi2 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WifiFair;
   private static Icon? WifiSlashf;
   public static Icon WifiSlash => WifiSlashf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wifi-slash");
   private static Icon? WifiWeakf;
   public static Icon WifiWeak => WifiWeakf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wifi-weak");
   public static Icon Wifi1 => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WifiWeak;
   private static Icon? Windf;
   public static Icon Wind => Windf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wind");
   private static Icon? WindTurbinef;
   public static Icon WindTurbine => WindTurbinef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wind-turbine");
   private static Icon? WindWarningf;
   public static Icon WindWarning => WindWarningf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wind-warning");
   public static Icon WindCircleExclamation => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WindWarning;
   private static Icon? Windowf;
   public static Icon Window => Windowf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "window");
   private static Icon? WindowFlipf;
   public static Icon WindowFlip => WindowFlipf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "window-flip");
   public static Icon WindowAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WindowFlip;
   private static Icon? WindowFramef;
   public static Icon WindowFrame => WindowFramef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "window-frame");
   private static Icon? WindowFrameOpenf;
   public static Icon WindowFrameOpen => WindowFrameOpenf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "window-frame-open");
   private static Icon? WindowMaximizef;
   public static Icon WindowMaximize => WindowMaximizef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "window-maximize");
   private static Icon? WindowMinimizef;
   public static Icon WindowMinimize => WindowMinimizef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "window-minimize");
   private static Icon? WindowRestoref;
   public static Icon WindowRestore => WindowRestoref ??= new Icon(IconFamily.Sharp, IconStyle.Light, "window-restore");
   private static Icon? Windsockf;
   public static Icon Windsock => Windsockf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "windsock");
   private static Icon? WineBottlef;
   public static Icon WineBottle => WineBottlef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wine-bottle");
   private static Icon? WineGlassf;
   public static Icon WineGlass => WineGlassf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wine-glass");
   private static Icon? WineGlassCrackf;
   public static Icon WineGlassCrack => WineGlassCrackf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wine-glass-crack");
   public static Icon Fragile => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WineGlassCrack;
   private static Icon? WineGlassEmptyf;
   public static Icon WineGlassEmpty => WineGlassEmptyf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wine-glass-empty");
   public static Icon WineGlassAlt => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WineGlassEmpty;
   private static Icon? WonSignf;
   public static Icon WonSign => WonSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "won-sign");
   public static Icon Krw => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WonSign;
   public static Icon Won => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.WonSign;
   private static Icon? Wormf;
   public static Icon Worm => Wormf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "worm");
   private static Icon? Wreathf;
   public static Icon Wreath => Wreathf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wreath");
   private static Icon? WreathLaurelf;
   public static Icon WreathLaurel => WreathLaurelf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wreath-laurel");
   private static Icon? Wrenchf;
   public static Icon Wrench => Wrenchf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wrench");
   private static Icon? WrenchSimplef;
   public static Icon WrenchSimple => WrenchSimplef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "wrench-simple");
   private static Icon? Xf;
   public static Icon X => Xf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "x");
   private static Icon? XRayf;
   public static Icon XRay => XRayf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "x-ray");
   private static Icon? Xmarkf;
   public static Icon Xmark => Xmarkf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "xmark");
   public static Icon Close => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Xmark;
   public static Icon Multiply => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Xmark;
   public static Icon Remove => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Xmark;
   public static Icon Times => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.Xmark;
   private static Icon? XmarkLargef;
   public static Icon XmarkLarge => XmarkLargef ??= new Icon(IconFamily.Sharp, IconStyle.Light, "xmark-large");
   private static Icon? XmarkToSlotf;
   public static Icon XmarkToSlot => XmarkToSlotf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "xmark-to-slot");
   public static Icon TimesToSlot => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.XmarkToSlot;
   public static Icon VoteNay => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.XmarkToSlot;
   private static Icon? XmarksLinesf;
   public static Icon XmarksLines => XmarksLinesf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "xmarks-lines");
   private static Icon? Yf;
   public static Icon Y => Yf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "y");
   private static Icon? YenSignf;
   public static Icon YenSign => YenSignf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "yen-sign");
   public static Icon Cny => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.YenSign;
   public static Icon Jpy => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.YenSign;
   public static Icon Rmb => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.YenSign;
   public static Icon Yen => global::Rocket.Surgery.Blazor.FontAwesome6.Pro.FaSharpLight.YenSign;
   private static Icon? YinYangf;
   public static Icon YinYang => YinYangf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "yin-yang");
   private static Icon? Zf;
   public static Icon Z => Zf ??= new Icon(IconFamily.Sharp, IconStyle.Light, "z");
}
